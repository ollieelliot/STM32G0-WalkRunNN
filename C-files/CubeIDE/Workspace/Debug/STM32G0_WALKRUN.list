
STM32G0_WALKRUN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800203c  0800203c  0001203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002090  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002090  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2a4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001998  00000000  00000000  0002a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0002bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158c3  00000000  00000000  0002cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b117  00000000  00000000  0004250b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875b9  00000000  00000000  0004d622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4bdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc0  00000000  00000000  000d4c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002024 	.word	0x08002024

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002024 	.word	0x08002024

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <MPU6050_Init+0x1c>)
 800022c:	224c      	movs	r2, #76	; 0x4c
 800022e:	0018      	movs	r0, r3
 8000230:	f001 fee6 	bl	8002000 <memcpy>
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000028 	.word	0x20000028

08000240 <I2C_Write8>:
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
}

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af02      	add	r7, sp, #8
 8000246:	0002      	movs	r2, r0
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	701a      	strb	r2, [r3, #0]
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	1c0a      	adds	r2, r1, #0
 8000250:	701a      	strb	r2, [r3, #0]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000252:	200c      	movs	r0, #12
 8000254:	183b      	adds	r3, r7, r0
 8000256:	1dfa      	adds	r2, r7, #7
 8000258:	7812      	ldrb	r2, [r2, #0]
 800025a:	701a      	strb	r2, [r3, #0]
	i2cData[1] = data;
 800025c:	183b      	adds	r3, r7, r0
 800025e:	1dba      	adds	r2, r7, #6
 8000260:	7812      	ldrb	r2, [r2, #0]
 8000262:	705a      	strb	r2, [r3, #1]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000264:	210f      	movs	r1, #15
 8000266:	187b      	adds	r3, r7, r1
 8000268:	22d0      	movs	r2, #208	; 0xd0
 800026a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 800026c:	187b      	adds	r3, r7, r1
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b299      	uxth	r1, r3
 8000272:	183a      	adds	r2, r7, r0
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <I2C_Write8+0x48>)
 8000276:	2364      	movs	r3, #100	; 0x64
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	2302      	movs	r3, #2
 800027c:	f000 fe86 	bl	8000f8c <HAL_I2C_Master_Transmit>
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b004      	add	sp, #16
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028

0800028c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000294:	240f      	movs	r4, #15
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 800029c:	2180      	movs	r1, #128	; 0x80
 800029e:	206b      	movs	r0, #107	; 0x6b
 80002a0:	f7ff ffce 	bl	8000240 <I2C_Write8>
	HAL_Delay(100);
 80002a4:	2064      	movs	r0, #100	; 0x64
 80002a6:	f000 fb67 	bl	8000978 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	781a      	ldrb	r2, [r3, #0]
 80002ae:	0020      	movs	r0, r4
 80002b0:	183b      	adds	r3, r7, r0
 80002b2:	2107      	movs	r1, #7
 80002b4:	400a      	ands	r2, r1
 80002b6:	701a      	strb	r2, [r3, #0]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	2240      	movs	r2, #64	; 0x40
 80002c2:	4013      	ands	r3, r2
 80002c4:	b25a      	sxtb	r2, r3
 80002c6:	183b      	adds	r3, r7, r0
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	4313      	orrs	r3, r2
 80002ce:	b25a      	sxtb	r2, r3
 80002d0:	183b      	adds	r3, r7, r0
 80002d2:	701a      	strb	r2, [r3, #0]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80002d4:	0004      	movs	r4, r0
 80002d6:	183b      	adds	r3, r7, r0
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	0019      	movs	r1, r3
 80002dc:	206b      	movs	r0, #107	; 0x6b
 80002de:	f7ff ffaf 	bl	8000240 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80002e2:	2064      	movs	r0, #100	; 0x64
 80002e4:	f000 fb48 	bl	8000978 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80002e8:	0021      	movs	r1, r4
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
	Buffer = config->CONFIG_DLPF & 0x07;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	78da      	ldrb	r2, [r3, #3]
 80002f4:	0008      	movs	r0, r1
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2107      	movs	r1, #7
 80002fa:	400a      	ands	r2, r1
 80002fc:	701a      	strb	r2, [r3, #0]
	I2C_Write8(CONFIG_REG, Buffer);
 80002fe:	0004      	movs	r4, r0
 8000300:	183b      	adds	r3, r7, r0
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0019      	movs	r1, r3
 8000306:	201a      	movs	r0, #26
 8000308:	f7ff ff9a 	bl	8000240 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	785b      	ldrb	r3, [r3, #1]
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	b2da      	uxtb	r2, r3
 800031c:	0008      	movs	r0, r1
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2118      	movs	r1, #24
 8000322:	400a      	ands	r2, r1
 8000324:	701a      	strb	r2, [r3, #0]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000326:	0004      	movs	r4, r0
 8000328:	183b      	adds	r3, r7, r0
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	0019      	movs	r1, r3
 800032e:	201b      	movs	r0, #27
 8000330:	f7ff ff86 	bl	8000240 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8000334:	0021      	movs	r1, r4
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	789b      	ldrb	r3, [r3, #2]
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	b2da      	uxtb	r2, r3
 8000344:	0008      	movs	r0, r1
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2118      	movs	r1, #24
 800034a:	400a      	ands	r2, r1
 800034c:	701a      	strb	r2, [r3, #0]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800034e:	183b      	adds	r3, r7, r0
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	0019      	movs	r1, r3
 8000354:	201c      	movs	r0, #28
 8000356:	f7ff ff73 	bl	8000240 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 800035a:	2004      	movs	r0, #4
 800035c:	f000 f852 	bl	8000404 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	789b      	ldrb	r3, [r3, #2]
 8000364:	2b03      	cmp	r3, #3
 8000366:	d014      	beq.n	8000392 <MPU6050_Config+0x106>
 8000368:	dc17      	bgt.n	800039a <MPU6050_Config+0x10e>
 800036a:	2b02      	cmp	r3, #2
 800036c:	d00d      	beq.n	800038a <MPU6050_Config+0xfe>
 800036e:	dc14      	bgt.n	800039a <MPU6050_Config+0x10e>
 8000370:	2b00      	cmp	r3, #0
 8000372:	d002      	beq.n	800037a <MPU6050_Config+0xee>
 8000374:	2b01      	cmp	r3, #1
 8000376:	d004      	beq.n	8000382 <MPU6050_Config+0xf6>
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
			break;
		
		default:
			break;
 8000378:	e00f      	b.n	800039a <MPU6050_Config+0x10e>
			accelScalingFactor = (2000.0f/32768.0f);
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <MPU6050_Config+0x154>)
 800037c:	4a19      	ldr	r2, [pc, #100]	; (80003e4 <MPU6050_Config+0x158>)
 800037e:	601a      	str	r2, [r3, #0]
			break;
 8000380:	e00c      	b.n	800039c <MPU6050_Config+0x110>
			accelScalingFactor = (4000.0f/32768.0f);
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <MPU6050_Config+0x154>)
 8000384:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <MPU6050_Config+0x15c>)
 8000386:	601a      	str	r2, [r3, #0]
				break;
 8000388:	e008      	b.n	800039c <MPU6050_Config+0x110>
			accelScalingFactor = (8000.0f/32768.0f);
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MPU6050_Config+0x154>)
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <MPU6050_Config+0x160>)
 800038e:	601a      	str	r2, [r3, #0]
			break;
 8000390:	e004      	b.n	800039c <MPU6050_Config+0x110>
			accelScalingFactor = (16000.0f/32768.0f);
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MPU6050_Config+0x154>)
 8000394:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <MPU6050_Config+0x164>)
 8000396:	601a      	str	r2, [r3, #0]
			break;
 8000398:	e000      	b.n	800039c <MPU6050_Config+0x110>
			break;
 800039a:	46c0      	nop			; (mov r8, r8)
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	785b      	ldrb	r3, [r3, #1]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d014      	beq.n	80003ce <MPU6050_Config+0x142>
 80003a4:	dc17      	bgt.n	80003d6 <MPU6050_Config+0x14a>
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d00d      	beq.n	80003c6 <MPU6050_Config+0x13a>
 80003aa:	dc14      	bgt.n	80003d6 <MPU6050_Config+0x14a>
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <MPU6050_Config+0x12a>
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d004      	beq.n	80003be <MPU6050_Config+0x132>
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
			break;
		
		default:
			break;
 80003b4:	e00f      	b.n	80003d6 <MPU6050_Config+0x14a>
			gyroScalingFactor = 250.0f/32768.0f;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MPU6050_Config+0x168>)
 80003b8:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <MPU6050_Config+0x16c>)
 80003ba:	601a      	str	r2, [r3, #0]
			break;
 80003bc:	e00c      	b.n	80003d8 <MPU6050_Config+0x14c>
				gyroScalingFactor = 500.0f/32768.0f;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <MPU6050_Config+0x168>)
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <MPU6050_Config+0x170>)
 80003c2:	601a      	str	r2, [r3, #0]
				break;
 80003c4:	e008      	b.n	80003d8 <MPU6050_Config+0x14c>
			gyroScalingFactor = 1000.0f/32768.0f;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MPU6050_Config+0x168>)
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <MPU6050_Config+0x174>)
 80003ca:	601a      	str	r2, [r3, #0]
			break;
 80003cc:	e004      	b.n	80003d8 <MPU6050_Config+0x14c>
			gyroScalingFactor = 2000.0f/32768.0f;
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MPU6050_Config+0x168>)
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <MPU6050_Config+0x158>)
 80003d2:	601a      	str	r2, [r3, #0]
			break;
 80003d4:	e000      	b.n	80003d8 <MPU6050_Config+0x14c>
			break;
 80003d6:	46c0      	nop			; (mov r8, r8)
	}
	
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b005      	add	sp, #20
 80003de:	bd90      	pop	{r4, r7, pc}
 80003e0:	20000074 	.word	0x20000074
 80003e4:	3d7a0000 	.word	0x3d7a0000
 80003e8:	3dfa0000 	.word	0x3dfa0000
 80003ec:	3e7a0000 	.word	0x3e7a0000
 80003f0:	3efa0000 	.word	0x3efa0000
 80003f4:	20000078 	.word	0x20000078
 80003f8:	3bfa0000 	.word	0x3bfa0000
 80003fc:	3c7a0000 	.word	0x3c7a0000
 8000400:	3cfa0000 	.word	0x3cfa0000

08000404 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	0019      	movs	r1, r3
 8000416:	2019      	movs	r0, #25
 8000418:	f7ff ff12 	bl	8000240 <I2C_Write8>
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042a:	f000 fa1f 	bl	800086c <HAL_Init>

  /* USER CODE BEGIN Init */


  MPU6050_Init(&hi2c2);
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <main+0xa4>)
 8000430:	0018      	movs	r0, r3
 8000432:	f7ff fef5 	bl	8000220 <MPU6050_Init>
  //2. Configure Accel and Gyro parameters
  MpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	709a      	strb	r2, [r3, #2]
  MpuConfig.ClockSource = Internal_8MHz;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
  MpuConfig.CONFIG_DLPF = DLPF_5_Hz;
 8000442:	003b      	movs	r3, r7
 8000444:	2206      	movs	r2, #6
 8000446:	70da      	strb	r2, [r3, #3]
  MpuConfig.Gyro_Full_Scale = FS_SEL_250;
 8000448:	003b      	movs	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	705a      	strb	r2, [r3, #1]
  MpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 800044e:	003b      	movs	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	711a      	strb	r2, [r3, #4]
  MPU6050_Config(&MpuConfig);
 8000454:	003b      	movs	r3, r7
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff ff18 	bl	800028c <MPU6050_Config>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f83a 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f000 f8d6 	bl	8000610 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000464:	f000 f894 	bl	8000590 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <main+0xa8>)
 800046a:	2200      	movs	r2, #0
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fcbe 	bl	8000df0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS2_GPIO_Port, STATUS2_Pin, GPIO_PIN_RESET);
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <main+0xac>)
 8000476:	2200      	movs	r2, #0
 8000478:	2104      	movs	r1, #4
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fcb8 	bl	8000df0 <HAL_GPIO_WritePin>
	  //HAL_Delay(10);



	  //HAL_GPIO_TogglePin(STATUS2_GPIO_Port, STATUS2_Pin);
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <main+0xa8>)
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fcd0 	bl	8000e2a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800048a:	2064      	movs	r0, #100	; 0x64
 800048c:	f000 fa74 	bl	8000978 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <main+0xa8>)
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fcc8 	bl	8000e2a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800049a:	2064      	movs	r0, #100	; 0x64
 800049c:	f000 fa6c 	bl	8000978 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <main+0xa8>)
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fcc0 	bl	8000e2a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80004aa:	2064      	movs	r0, #100	; 0x64
 80004ac:	f000 fa64 	bl	8000978 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <main+0xa8>)
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fcb8 	bl	8000e2a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004ba:	23fa      	movs	r3, #250	; 0xfa
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fa5a 	bl	8000978 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80004c4:	e7dc      	b.n	8000480 <main+0x5c>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	2000007c 	.word	0x2000007c
 80004cc:	50000400 	.word	0x50000400
 80004d0:	50001400 	.word	0x50001400

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b093      	sub	sp, #76	; 0x4c
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	2410      	movs	r4, #16
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2338      	movs	r3, #56	; 0x38
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f001 fd94 	bl	8002012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	2310      	movs	r3, #16
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f001 fd8d 	bl	8002012 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 f871 	bl	80015e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2202      	movs	r2, #2
 8000506:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	0052      	lsls	r2, r2, #1
 800050e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000510:	0021      	movs	r1, r4
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2240      	movs	r2, #64	; 0x40
 800051c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2202      	movs	r2, #2
 8000522:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2208      	movs	r2, #8
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0292      	lsls	r2, r2, #10
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	0492      	lsls	r2, r2, #18
 8000544:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	0592      	lsls	r2, r2, #22
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	187b      	adds	r3, r7, r1
 8000550:	0018      	movs	r0, r3
 8000552:	f001 f887 	bl	8001664 <HAL_RCC_OscConfig>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800055a:	f000 f8c3 	bl	80006e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	003b      	movs	r3, r7
 8000560:	2207      	movs	r2, #7
 8000562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000564:	003b      	movs	r3, r7
 8000566:	2202      	movs	r2, #2
 8000568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	003b      	movs	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000576:	003b      	movs	r3, r7
 8000578:	2102      	movs	r1, #2
 800057a:	0018      	movs	r0, r3
 800057c:	f001 fb92 	bl	8001ca4 <HAL_RCC_ClockConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000584:	f000 f8ae 	bl	80006e4 <Error_Handler>
  }
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b013      	add	sp, #76	; 0x4c
 800058e:	bd90      	pop	{r4, r7, pc}

08000590 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_I2C2_Init+0x74>)
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MX_I2C2_Init+0x78>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_I2C2_Init+0x74>)
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_I2C2_Init+0x7c>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_I2C2_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_I2C2_Init+0x74>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_I2C2_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_I2C2_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_I2C2_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_I2C2_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_I2C2_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_I2C2_Init+0x74>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fc47 	bl	8000e60 <HAL_I2C_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005d6:	f000 f885 	bl	80006e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_I2C2_Init+0x74>)
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 ff68 	bl	80014b4 <HAL_I2CEx_ConfigAnalogFilter>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80005e8:	f000 f87c 	bl	80006e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_I2C2_Init+0x74>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 ffab 	bl	800154c <HAL_I2CEx_ConfigDigitalFilter>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f873 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000007c 	.word	0x2000007c
 8000608:	40005800 	.word	0x40005800
 800060c:	10707dbc 	.word	0x10707dbc

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	240c      	movs	r4, #12
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f001 fcf6 	bl	8002012 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800062c:	2102      	movs	r1, #2
 800062e:	430a      	orrs	r2, r1
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	2202      	movs	r2, #2
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000644:	2120      	movs	r1, #32
 8000646:	430a      	orrs	r2, r1
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800064c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064e:	2220      	movs	r2, #32
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800065c:	2101      	movs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000666:	2201      	movs	r2, #1
 8000668:	4013      	ands	r3, r2
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_GPIO_Init+0xcc>)
 8000670:	2200      	movs	r2, #0
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fbbb 	bl	8000df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS2_GPIO_Port, STATUS2_Pin, GPIO_PIN_RESET);
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_GPIO_Init+0xd0>)
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fbb5 	bl	8000df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2201      	movs	r2, #1
 8000690:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <MX_GPIO_Init+0xcc>)
 80006a2:	0019      	movs	r1, r3
 80006a4:	0010      	movs	r0, r2
 80006a6:	f000 fa3f 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS2_Pin */
  GPIO_InitStruct.Pin = STATUS2_Pin;
 80006aa:	0021      	movs	r1, r4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2204      	movs	r2, #4
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS2_GPIO_Port, &GPIO_InitStruct);
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <MX_GPIO_Init+0xd0>)
 80006c8:	0019      	movs	r1, r3
 80006ca:	0010      	movs	r0, r2
 80006cc:	f000 fa2c 	bl	8000b28 <HAL_GPIO_Init>

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b009      	add	sp, #36	; 0x24
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	50000400 	.word	0x50000400
 80006e0:	50001400 	.word	0x50001400

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	641a      	str	r2, [r3, #64]	; 0x40
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0549      	lsls	r1, r1, #21
 8000718:	430a      	orrs	r2, r1
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_MspInit+0x44>)
 800071e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	055b      	lsls	r3, r3, #21
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b08b      	sub	sp, #44	; 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	2414      	movs	r4, #20
 8000742:	193b      	adds	r3, r7, r4
 8000744:	0018      	movs	r0, r3
 8000746:	2314      	movs	r3, #20
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f001 fc61 	bl	8002012 <memset>
  if(hi2c->Instance==I2C2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <HAL_I2C_MspInit+0x90>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d131      	bne.n	80007be <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_I2C_MspInit+0x94>)
 800075c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_I2C_MspInit+0x94>)
 8000760:	2101      	movs	r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_I2C_MspInit+0x94>)
 8000768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076a:	2201      	movs	r2, #1
 800076c:	4013      	ands	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	22c0      	movs	r2, #192	; 0xc0
 8000776:	0152      	lsls	r2, r2, #5
 8000778:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077a:	0021      	movs	r1, r4
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2212      	movs	r2, #18
 8000780:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2206      	movs	r2, #6
 8000792:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	187a      	adds	r2, r7, r1
 8000796:	23a0      	movs	r3, #160	; 0xa0
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f000 f9c3 	bl	8000b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_I2C_MspInit+0x94>)
 80007a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_I2C_MspInit+0x94>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	03c9      	lsls	r1, r1, #15
 80007ac:	430a      	orrs	r2, r1
 80007ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_I2C_MspInit+0x94>)
 80007b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	03db      	lsls	r3, r3, #15
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b00b      	add	sp, #44	; 0x2c
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40005800 	.word	0x40005800
 80007cc:	40021000 	.word	0x40021000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f8a4 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <SystemInit+0x14>)
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	0512      	lsls	r2, r2, #20
 800080a:	609a      	str	r2, [r3, #8]
#endif
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800081c:	f7ff fff0 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <LoopForever+0x6>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	; (8000858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <LoopForever+0xe>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	; (8000864 <LoopForever+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000846:	f001 fbb7 	bl	8001fb8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800084a:	f7ff fdeb 	bl	8000424 <main>

0800084e <LoopForever>:

LoopForever:
  b LoopForever
 800084e:	e7fe      	b.n	800084e <LoopForever>
  ldr   r0, =_estack
 8000850:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800085c:	08002084 	.word	0x08002084
  ldr r2, =_sbss
 8000860:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000864:	20000100 	.word	0x20000100

08000868 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_IRQHandler>
	...

0800086c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_Init+0x3c>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_Init+0x3c>)
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	0049      	lsls	r1, r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000886:	2000      	movs	r0, #0
 8000888:	f000 f810 	bl	80008ac <HAL_InitTick>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d003      	beq.n	8000898 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e001      	b.n	800089c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff ff2a 	bl	80006f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	781b      	ldrb	r3, [r3, #0]
}
 80008a0:	0018      	movs	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40022000 	.word	0x40022000

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008b4:	230f      	movs	r3, #15
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_InitTick+0x88>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d02b      	beq.n	800091c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_InitTick+0x8c>)
 80008c6:	681c      	ldr	r4, [r3, #0]
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_InitTick+0x88>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	0019      	movs	r1, r3
 80008ce:	23fa      	movs	r3, #250	; 0xfa
 80008d0:	0098      	lsls	r0, r3, #2
 80008d2:	f7ff fc19 	bl	8000108 <__udivsi3>
 80008d6:	0003      	movs	r3, r0
 80008d8:	0019      	movs	r1, r3
 80008da:	0020      	movs	r0, r4
 80008dc:	f7ff fc14 	bl	8000108 <__udivsi3>
 80008e0:	0003      	movs	r3, r0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 f913 	bl	8000b0e <HAL_SYSTICK_Config>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d112      	bne.n	8000912 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d80a      	bhi.n	8000908 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	2200      	movs	r2, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 f8f2 	bl	8000ae4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_InitTick+0x90>)
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e00d      	b.n	8000924 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000908:	230f      	movs	r3, #15
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e008      	b.n	8000924 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000912:	230f      	movs	r3, #15
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e003      	b.n	8000924 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800091c:	230f      	movs	r3, #15
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	781b      	ldrb	r3, [r3, #0]
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b005      	add	sp, #20
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000008 	.word	0x20000008
 8000938:	20000000 	.word	0x20000000
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x1c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	001a      	movs	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	18d2      	adds	r2, r2, r3
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_IncTick+0x20>)
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	20000008 	.word	0x20000008
 8000960:	200000fc 	.word	0x200000fc

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_GetTick+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	200000fc 	.word	0x200000fc

08000978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000980:	f7ff fff0 	bl	8000964 <HAL_GetTick>
 8000984:	0003      	movs	r3, r0
 8000986:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3301      	adds	r3, #1
 8000990:	d005      	beq.n	800099e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_Delay+0x44>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	001a      	movs	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	189b      	adds	r3, r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	f7ff ffe0 	bl	8000964 <HAL_GetTick>
 80009a4:	0002      	movs	r2, r0
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d8f7      	bhi.n	80009a0 <HAL_Delay+0x28>
  {
  }
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	20000008 	.word	0x20000008

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	0002      	movs	r2, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b7f      	cmp	r3, #127	; 0x7f
 80009d4:	d828      	bhi.n	8000a28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d6:	4a2f      	ldr	r2, [pc, #188]	; (8000a94 <__NVIC_SetPriority+0xd4>)
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	33c0      	adds	r3, #192	; 0xc0
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	589b      	ldr	r3, [r3, r2]
 80009e6:	1dfa      	adds	r2, r7, #7
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	0011      	movs	r1, r2
 80009ec:	2203      	movs	r2, #3
 80009ee:	400a      	ands	r2, r1
 80009f0:	00d2      	lsls	r2, r2, #3
 80009f2:	21ff      	movs	r1, #255	; 0xff
 80009f4:	4091      	lsls	r1, r2
 80009f6:	000a      	movs	r2, r1
 80009f8:	43d2      	mvns	r2, r2
 80009fa:	401a      	ands	r2, r3
 80009fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	019b      	lsls	r3, r3, #6
 8000a02:	22ff      	movs	r2, #255	; 0xff
 8000a04:	401a      	ands	r2, r3
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	4003      	ands	r3, r0
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a14:	481f      	ldr	r0, [pc, #124]	; (8000a94 <__NVIC_SetPriority+0xd4>)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	33c0      	adds	r3, #192	; 0xc0
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a26:	e031      	b.n	8000a8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <__NVIC_SetPriority+0xd8>)
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	0019      	movs	r1, r3
 8000a30:	230f      	movs	r3, #15
 8000a32:	400b      	ands	r3, r1
 8000a34:	3b08      	subs	r3, #8
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	3306      	adds	r3, #6
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	18d3      	adds	r3, r2, r3
 8000a3e:	3304      	adds	r3, #4
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1dfa      	adds	r2, r7, #7
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	0011      	movs	r1, r2
 8000a48:	2203      	movs	r2, #3
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	00d2      	lsls	r2, r2, #3
 8000a4e:	21ff      	movs	r1, #255	; 0xff
 8000a50:	4091      	lsls	r1, r2
 8000a52:	000a      	movs	r2, r1
 8000a54:	43d2      	mvns	r2, r2
 8000a56:	401a      	ands	r2, r3
 8000a58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	019b      	lsls	r3, r3, #6
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	401a      	ands	r2, r3
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	0018      	movs	r0, r3
 8000a68:	2303      	movs	r3, #3
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <__NVIC_SetPriority+0xd8>)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	001c      	movs	r4, r3
 8000a78:	230f      	movs	r3, #15
 8000a7a:	4023      	ands	r3, r4
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	430a      	orrs	r2, r1
 8000a82:	3306      	adds	r3, #6
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	18c3      	adds	r3, r0, r3
 8000a88:	3304      	adds	r3, #4
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b003      	add	sp, #12
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	1e5a      	subs	r2, r3, #1
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	045b      	lsls	r3, r3, #17
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d301      	bcc.n	8000ab4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e010      	b.n	8000ad6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <SysTick_Config+0x44>)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	3a01      	subs	r2, #1
 8000aba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abc:	2301      	movs	r3, #1
 8000abe:	425b      	negs	r3, r3
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff ff7c 	bl	80009c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x44>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x44>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	210f      	movs	r1, #15
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	1c02      	adds	r2, r0, #0
 8000af4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff ff5d 	bl	80009c0 <__NVIC_SetPriority>
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b004      	add	sp, #16
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff ffbf 	bl	8000a9c <SysTick_Config>
 8000b1e:	0003      	movs	r3, r0
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e147      	b.n	8000dc8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d100      	bne.n	8000b50 <HAL_GPIO_Init+0x28>
 8000b4e:	e138      	b.n	8000dc2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2203      	movs	r2, #3
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d005      	beq.n	8000b68 <HAL_GPIO_Init+0x40>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2203      	movs	r2, #3
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d130      	bne.n	8000bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	409a      	lsls	r2, r3
 8000b76:	0013      	movs	r3, r2
 8000b78:	43da      	mvns	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	0013      	movs	r3, r2
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2203      	movs	r2, #3
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d017      	beq.n	8000c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d123      	bne.n	8000c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	58d3      	ldr	r3, [r2, r3]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	2207      	movs	r2, #7
 8000c24:	4013      	ands	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2107      	movs	r1, #7
 8000c3e:	400b      	ands	r3, r1
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	6939      	ldr	r1, [r7, #16]
 8000c58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2203      	movs	r2, #3
 8000c78:	401a      	ands	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	23c0      	movs	r3, #192	; 0xc0
 8000c94:	029b      	lsls	r3, r3, #10
 8000c96:	4013      	ands	r3, r2
 8000c98:	d100      	bne.n	8000c9c <HAL_GPIO_Init+0x174>
 8000c9a:	e092      	b.n	8000dc2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c9c:	4a50      	ldr	r2, [pc, #320]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	589b      	ldr	r3, [r3, r2]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2203      	movs	r2, #3
 8000cae:	4013      	ands	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	23a0      	movs	r3, #160	; 0xa0
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0x1ca>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a45      	ldr	r2, [pc, #276]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00d      	beq.n	8000cee <HAL_GPIO_Init+0x1c6>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a44      	ldr	r2, [pc, #272]	; (8000de8 <HAL_GPIO_Init+0x2c0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d007      	beq.n	8000cea <HAL_GPIO_Init+0x1c2>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a43      	ldr	r2, [pc, #268]	; (8000dec <HAL_GPIO_Init+0x2c4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_GPIO_Init+0x1be>
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e006      	b.n	8000cf4 <HAL_GPIO_Init+0x1cc>
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	e004      	b.n	8000cf4 <HAL_GPIO_Init+0x1cc>
 8000cea:	2302      	movs	r3, #2
 8000cec:	e002      	b.n	8000cf4 <HAL_GPIO_Init+0x1cc>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <HAL_GPIO_Init+0x1cc>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	2103      	movs	r1, #3
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	00d2      	lsls	r2, r2, #3
 8000cfc:	4093      	lsls	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d04:	4936      	ldr	r1, [pc, #216]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d12:	4a33      	ldr	r2, [pc, #204]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	58d3      	ldr	r3, [r2, r3]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43da      	mvns	r2, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	025b      	lsls	r3, r3, #9
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d38:	4929      	ldr	r1, [pc, #164]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000d40:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000d42:	2384      	movs	r3, #132	; 0x84
 8000d44:	58d3      	ldr	r3, [r2, r3]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	029b      	lsls	r3, r3, #10
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d66:	491e      	ldr	r1, [pc, #120]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000d68:	2284      	movs	r2, #132	; 0x84
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	035b      	lsls	r3, r3, #13
 8000d86:	4013      	ands	r3, r2
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43da      	mvns	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	039b      	lsls	r3, r3, #14
 8000db0:	4013      	ands	r3, r2
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	40da      	lsrs	r2, r3
 8000dd0:	1e13      	subs	r3, r2, #0
 8000dd2:	d000      	beq.n	8000dd6 <HAL_GPIO_Init+0x2ae>
 8000dd4:	e6b0      	b.n	8000b38 <HAL_GPIO_Init+0x10>
  }
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b006      	add	sp, #24
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021800 	.word	0x40021800
 8000de4:	50000400 	.word	0x50000400
 8000de8:	50000800 	.word	0x50000800
 8000dec:	50000c00 	.word	0x50000c00

08000df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	0008      	movs	r0, r1
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	1cbb      	adds	r3, r7, #2
 8000dfe:	1c02      	adds	r2, r0, #0
 8000e00:	801a      	strh	r2, [r3, #0]
 8000e02:	1c7b      	adds	r3, r7, #1
 8000e04:	1c0a      	adds	r2, r1, #0
 8000e06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e08:	1c7b      	adds	r3, r7, #1
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d004      	beq.n	8000e1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e10:	1cbb      	adds	r3, r7, #2
 8000e12:	881a      	ldrh	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e18:	e003      	b.n	8000e22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1a:	1cbb      	adds	r3, r7, #2
 8000e1c:	881a      	ldrh	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	000a      	movs	r2, r1
 8000e34:	1cbb      	adds	r3, r7, #2
 8000e36:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e3e:	1cbb      	adds	r3, r7, #2
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4013      	ands	r3, r2
 8000e46:	041a      	lsls	r2, r3, #16
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	1cb9      	adds	r1, r7, #2
 8000e4e:	8809      	ldrh	r1, [r1, #0]
 8000e50:	400b      	ands	r3, r1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	619a      	str	r2, [r3, #24]
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b004      	add	sp, #16
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e082      	b.n	8000f78 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2241      	movs	r2, #65	; 0x41
 8000e76:	5c9b      	ldrb	r3, [r3, r2]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d107      	bne.n	8000e8e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2240      	movs	r2, #64	; 0x40
 8000e82:	2100      	movs	r1, #0
 8000e84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fc55 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2241      	movs	r2, #65	; 0x41
 8000e92:	2124      	movs	r1, #36	; 0x24
 8000e94:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	438a      	bics	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4934      	ldr	r1, [pc, #208]	; (8000f80 <HAL_I2C_Init+0x120>)
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4931      	ldr	r1, [pc, #196]	; (8000f84 <HAL_I2C_Init+0x124>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d108      	bne.n	8000ede <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0209      	lsls	r1, r1, #8
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	e007      	b.n	8000eee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2184      	movs	r1, #132	; 0x84
 8000ee8:	0209      	lsls	r1, r1, #8
 8000eea:	430a      	orrs	r2, r1
 8000eec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d104      	bne.n	8000f00 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	491f      	ldr	r1, [pc, #124]	; (8000f88 <HAL_I2C_Init+0x128>)
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	491a      	ldr	r1, [pc, #104]	; (8000f84 <HAL_I2C_Init+0x124>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69d9      	ldr	r1, [r3, #28]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a1a      	ldr	r2, [r3, #32]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2241      	movs	r2, #65	; 0x41
 8000f64:	2120      	movs	r1, #32
 8000f66:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2242      	movs	r2, #66	; 0x42
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	f0ffffff 	.word	0xf0ffffff
 8000f84:	ffff7fff 	.word	0xffff7fff
 8000f88:	02008000 	.word	0x02008000

08000f8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	0008      	movs	r0, r1
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	0019      	movs	r1, r3
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	1c02      	adds	r2, r0, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	1c0a      	adds	r2, r1, #0
 8000fa8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2241      	movs	r2, #65	; 0x41
 8000fae:	5c9b      	ldrb	r3, [r3, r2]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b20      	cmp	r3, #32
 8000fb4:	d000      	beq.n	8000fb8 <HAL_I2C_Master_Transmit+0x2c>
 8000fb6:	e0e7      	b.n	8001188 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2240      	movs	r2, #64	; 0x40
 8000fbc:	5c9b      	ldrb	r3, [r3, r2]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_I2C_Master_Transmit+0x3a>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e0e1      	b.n	800118a <HAL_I2C_Master_Transmit+0x1fe>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2240      	movs	r2, #64	; 0x40
 8000fca:	2101      	movs	r1, #1
 8000fcc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fce:	f7ff fcc9 	bl	8000964 <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	0219      	lsls	r1, r3, #8
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2319      	movs	r3, #25
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f000 f8fc 	bl	80011e0 <I2C_WaitOnFlagUntilTimeout>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e0cc      	b.n	800118a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2241      	movs	r2, #65	; 0x41
 8000ff4:	2121      	movs	r1, #33	; 0x21
 8000ff6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2242      	movs	r2, #66	; 0x42
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2208      	movs	r2, #8
 8001010:	18ba      	adds	r2, r7, r2
 8001012:	8812      	ldrh	r2, [r2, #0]
 8001014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001020:	b29b      	uxth	r3, r3
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d911      	bls.n	800104a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	22ff      	movs	r2, #255	; 0xff
 800102a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001030:	b2da      	uxtb	r2, r3
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	045c      	lsls	r4, r3, #17
 8001036:	230a      	movs	r3, #10
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	8819      	ldrh	r1, [r3, #0]
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	4b55      	ldr	r3, [pc, #340]	; (8001194 <HAL_I2C_Master_Transmit+0x208>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	0023      	movs	r3, r4
 8001044:	f000 fa00 	bl	8001448 <I2C_TransferConfig>
 8001048:	e075      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800104e:	b29a      	uxth	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001058:	b2da      	uxtb	r2, r3
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	049c      	lsls	r4, r3, #18
 800105e:	230a      	movs	r3, #10
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	8819      	ldrh	r1, [r3, #0]
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <HAL_I2C_Master_Transmit+0x208>)
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	0023      	movs	r3, r4
 800106c:	f000 f9ec 	bl	8001448 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001070:	e061      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	0018      	movs	r0, r3
 800107a:	f000 f8f0 	bl	800125e <I2C_WaitOnTXISFlagUntilTimeout>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e081      	b.n	800118a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3b01      	subs	r3, #1
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ae:	3b01      	subs	r3, #1
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d03a      	beq.n	8001136 <HAL_I2C_Master_Transmit+0x1aa>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d136      	bne.n	8001136 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	0013      	movs	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	f000 f883 	bl	80011e0 <I2C_WaitOnFlagUntilTimeout>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e053      	b.n	800118a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	2bff      	cmp	r3, #255	; 0xff
 80010ea:	d911      	bls.n	8001110 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	045c      	lsls	r4, r3, #17
 80010fc:	230a      	movs	r3, #10
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	8819      	ldrh	r1, [r3, #0]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	2300      	movs	r3, #0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	0023      	movs	r3, r4
 800110a:	f000 f99d 	bl	8001448 <I2C_TransferConfig>
 800110e:	e012      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001114:	b29a      	uxth	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111e:	b2da      	uxtb	r2, r3
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	049c      	lsls	r4, r3, #18
 8001124:	230a      	movs	r3, #10
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	8819      	ldrh	r1, [r3, #0]
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	0023      	movs	r3, r4
 8001132:	f000 f989 	bl	8001448 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113a:	b29b      	uxth	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d198      	bne.n	8001072 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	0018      	movs	r0, r3
 8001148:	f000 f8c8 	bl	80012dc <I2C_WaitOnSTOPFlagUntilTimeout>
 800114c:	1e03      	subs	r3, r0, #0
 800114e:	d001      	beq.n	8001154 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e01a      	b.n	800118a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2220      	movs	r2, #32
 800115a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	490c      	ldr	r1, [pc, #48]	; (8001198 <HAL_I2C_Master_Transmit+0x20c>)
 8001168:	400a      	ands	r2, r1
 800116a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2241      	movs	r2, #65	; 0x41
 8001170:	2120      	movs	r1, #32
 8001172:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2242      	movs	r2, #66	; 0x42
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2240      	movs	r2, #64	; 0x40
 8001180:	2100      	movs	r1, #0
 8001182:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	e000      	b.n	800118a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001188:	2302      	movs	r3, #2
  }
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b007      	add	sp, #28
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	80002000 	.word	0x80002000
 8001198:	fe00e800 	.word	0xfe00e800

0800119c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	2202      	movs	r2, #2
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d103      	bne.n	80011ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2201      	movs	r2, #1
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d007      	beq.n	80011d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2101      	movs	r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	619a      	str	r2, [r3, #24]
  }
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011f0:	e021      	b.n	8001236 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	d01e      	beq.n	8001236 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011f8:	f7ff fbb4 	bl	8000964 <HAL_GetTick>
 80011fc:	0002      	movs	r2, r0
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d302      	bcc.n	800120e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d113      	bne.n	8001236 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	2220      	movs	r2, #32
 8001214:	431a      	orrs	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2241      	movs	r2, #65	; 0x41
 800121e:	2120      	movs	r1, #32
 8001220:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2242      	movs	r2, #66	; 0x42
 8001226:	2100      	movs	r1, #0
 8001228:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2240      	movs	r2, #64	; 0x40
 800122e:	2100      	movs	r1, #0
 8001230:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	4013      	ands	r3, r2
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	425a      	negs	r2, r3
 8001246:	4153      	adcs	r3, r2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	001a      	movs	r2, r3
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d0ce      	beq.n	80011f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}

0800125e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800126a:	e02b      	b.n	80012c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	0018      	movs	r0, r3
 8001274:	f000 f86e 	bl	8001354 <I2C_IsAcknowledgeFailed>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d001      	beq.n	8001280 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e029      	b.n	80012d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3301      	adds	r3, #1
 8001284:	d01e      	beq.n	80012c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001286:	f7ff fb6d 	bl	8000964 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	429a      	cmp	r2, r3
 8001294:	d302      	bcc.n	800129c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d113      	bne.n	80012c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	2220      	movs	r2, #32
 80012a2:	431a      	orrs	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2241      	movs	r2, #65	; 0x41
 80012ac:	2120      	movs	r1, #32
 80012ae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2242      	movs	r2, #66	; 0x42
 80012b4:	2100      	movs	r1, #0
 80012b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	2100      	movs	r1, #0
 80012be:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e007      	b.n	80012d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d1cc      	bne.n	800126c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b004      	add	sp, #16
 80012da:	bd80      	pop	{r7, pc}

080012dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012e8:	e028      	b.n	800133c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 f82f 	bl	8001354 <I2C_IsAcknowledgeFailed>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d001      	beq.n	80012fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e026      	b.n	800134c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012fe:	f7ff fb31 	bl	8000964 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	429a      	cmp	r2, r3
 800130c:	d302      	bcc.n	8001314 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d113      	bne.n	800133c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	2220      	movs	r2, #32
 800131a:	431a      	orrs	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2241      	movs	r2, #65	; 0x41
 8001324:	2120      	movs	r1, #32
 8001326:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2242      	movs	r2, #66	; 0x42
 800132c:	2100      	movs	r1, #0
 800132e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	2100      	movs	r1, #0
 8001336:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e007      	b.n	800134c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2220      	movs	r2, #32
 8001344:	4013      	ands	r3, r2
 8001346:	2b20      	cmp	r3, #32
 8001348:	d1cf      	bne.n	80012ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b004      	add	sp, #16
 8001352:	bd80      	pop	{r7, pc}

08001354 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2210      	movs	r2, #16
 8001368:	4013      	ands	r3, r2
 800136a:	2b10      	cmp	r3, #16
 800136c:	d164      	bne.n	8001438 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	049b      	lsls	r3, r3, #18
 8001378:	401a      	ands	r2, r3
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	049b      	lsls	r3, r3, #18
 800137e:	429a      	cmp	r2, r3
 8001380:	d02b      	beq.n	80013da <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	01c9      	lsls	r1, r1, #7
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001394:	e021      	b.n	80013da <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3301      	adds	r3, #1
 800139a:	d01e      	beq.n	80013da <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800139c:	f7ff fae2 	bl	8000964 <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d302      	bcc.n	80013b2 <I2C_IsAcknowledgeFailed+0x5e>
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d113      	bne.n	80013da <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	2220      	movs	r2, #32
 80013b8:	431a      	orrs	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2241      	movs	r2, #65	; 0x41
 80013c2:	2120      	movs	r1, #32
 80013c4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2242      	movs	r2, #66	; 0x42
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2240      	movs	r2, #64	; 0x40
 80013d2:	2100      	movs	r1, #0
 80013d4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e02f      	b.n	800143a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2220      	movs	r2, #32
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d1d6      	bne.n	8001396 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2210      	movs	r2, #16
 80013ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2220      	movs	r2, #32
 80013f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7ff fece 	bl	800119c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	490e      	ldr	r1, [pc, #56]	; (8001444 <I2C_IsAcknowledgeFailed+0xf0>)
 800140c:	400a      	ands	r2, r1
 800140e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	2204      	movs	r2, #4
 8001416:	431a      	orrs	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2241      	movs	r2, #65	; 0x41
 8001420:	2120      	movs	r1, #32
 8001422:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2242      	movs	r2, #66	; 0x42
 8001428:	2100      	movs	r1, #0
 800142a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b004      	add	sp, #16
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	fe00e800 	.word	0xfe00e800

08001448 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	0008      	movs	r0, r1
 8001452:	0011      	movs	r1, r2
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	240a      	movs	r4, #10
 8001458:	193b      	adds	r3, r7, r4
 800145a:	1c02      	adds	r2, r0, #0
 800145c:	801a      	strh	r2, [r3, #0]
 800145e:	2009      	movs	r0, #9
 8001460:	183b      	adds	r3, r7, r0
 8001462:	1c0a      	adds	r2, r1, #0
 8001464:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	0d51      	lsrs	r1, r2, #21
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	00d2      	lsls	r2, r2, #3
 8001474:	400a      	ands	r2, r1
 8001476:	490e      	ldr	r1, [pc, #56]	; (80014b0 <I2C_TransferConfig+0x68>)
 8001478:	430a      	orrs	r2, r1
 800147a:	43d2      	mvns	r2, r2
 800147c:	401a      	ands	r2, r3
 800147e:	0011      	movs	r1, r2
 8001480:	193b      	adds	r3, r7, r4
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	059b      	lsls	r3, r3, #22
 8001486:	0d9a      	lsrs	r2, r3, #22
 8001488:	183b      	adds	r3, r7, r0
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	0418      	lsls	r0, r3, #16
 800148e:	23ff      	movs	r3, #255	; 0xff
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	4003      	ands	r3, r0
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	431a      	orrs	r2, r3
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	431a      	orrs	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b005      	add	sp, #20
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	03ff63ff 	.word	0x03ff63ff

080014b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2241      	movs	r2, #65	; 0x41
 80014c2:	5c9b      	ldrb	r3, [r3, r2]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b20      	cmp	r3, #32
 80014c8:	d138      	bne.n	800153c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2240      	movs	r2, #64	; 0x40
 80014ce:	5c9b      	ldrb	r3, [r3, r2]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e032      	b.n	800153e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2240      	movs	r2, #64	; 0x40
 80014dc:	2101      	movs	r1, #1
 80014de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2241      	movs	r2, #65	; 0x41
 80014e4:	2124      	movs	r1, #36	; 0x24
 80014e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2101      	movs	r1, #1
 80014f4:	438a      	bics	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4911      	ldr	r1, [pc, #68]	; (8001548 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2241      	movs	r2, #65	; 0x41
 800152c:	2120      	movs	r1, #32
 800152e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2240      	movs	r2, #64	; 0x40
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800153c:	2302      	movs	r3, #2
  }
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	ffffefff 	.word	0xffffefff

0800154c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2241      	movs	r2, #65	; 0x41
 800155a:	5c9b      	ldrb	r3, [r3, r2]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b20      	cmp	r3, #32
 8001560:	d139      	bne.n	80015d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	5c9b      	ldrb	r3, [r3, r2]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800156c:	2302      	movs	r3, #2
 800156e:	e033      	b.n	80015d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	2101      	movs	r1, #1
 8001576:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2241      	movs	r2, #65	; 0x41
 800157c:	2124      	movs	r1, #36	; 0x24
 800157e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	430a      	orrs	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2241      	movs	r2, #65	; 0x41
 80015c6:	2120      	movs	r1, #32
 80015c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2240      	movs	r2, #64	; 0x40
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015d6:	2302      	movs	r3, #2
  }
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b004      	add	sp, #16
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	fffff0ff 	.word	0xfffff0ff

080015e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d11f      	bne.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	0013      	movs	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	189b      	adds	r3, r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4912      	ldr	r1, [pc, #72]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001616:	0018      	movs	r0, r3
 8001618:	f7fe fd76 	bl	8000108 <__udivsi3>
 800161c:	0003      	movs	r3, r0
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001622:	e008      	b.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3b01      	subs	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e001      	b.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e009      	b.n	800164a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	401a      	ands	r2, r3
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	429a      	cmp	r2, r3
 8001646:	d0ed      	beq.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b004      	add	sp, #16
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40007000 	.word	0x40007000
 8001658:	fffff9ff 	.word	0xfffff9ff
 800165c:	20000000 	.word	0x20000000
 8001660:	000f4240 	.word	0x000f4240

08001664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e304      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2201      	movs	r2, #1
 800167c:	4013      	ands	r3, r2
 800167e:	d100      	bne.n	8001682 <HAL_RCC_OscConfig+0x1e>
 8001680:	e07c      	b.n	800177c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001682:	4bc3      	ldr	r3, [pc, #780]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2238      	movs	r2, #56	; 0x38
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168c:	4bc0      	ldr	r3, [pc, #768]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2203      	movs	r2, #3
 8001692:	4013      	ands	r3, r2
 8001694:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b10      	cmp	r3, #16
 800169a:	d102      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3e>
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d002      	beq.n	80016a8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d10b      	bne.n	80016c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	4bb9      	ldr	r3, [pc, #740]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	d062      	beq.n	800177a <HAL_RCC_OscConfig+0x116>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d15e      	bne.n	800177a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e2df      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x78>
 80016cc:	4bb0      	ldr	r3, [pc, #704]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4baf      	ldr	r3, [pc, #700]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0249      	lsls	r1, r1, #9
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e020      	b.n	800171e <HAL_RCC_OscConfig+0xba>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	23a0      	movs	r3, #160	; 0xa0
 80016e2:	02db      	lsls	r3, r3, #11
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d10e      	bne.n	8001706 <HAL_RCC_OscConfig+0xa2>
 80016e8:	4ba9      	ldr	r3, [pc, #676]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4ba8      	ldr	r3, [pc, #672]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	02c9      	lsls	r1, r1, #11
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	4ba6      	ldr	r3, [pc, #664]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4ba5      	ldr	r3, [pc, #660]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0249      	lsls	r1, r1, #9
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0xba>
 8001706:	4ba2      	ldr	r3, [pc, #648]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4ba1      	ldr	r3, [pc, #644]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800170c:	49a1      	ldr	r1, [pc, #644]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 800170e:	400a      	ands	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	4b9f      	ldr	r3, [pc, #636]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b9e      	ldr	r3, [pc, #632]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001718:	499f      	ldr	r1, [pc, #636]	; (8001998 <HAL_RCC_OscConfig+0x334>)
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d014      	beq.n	8001750 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff f91d 	bl	8000964 <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff f918 	bl	8000964 <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e29e      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001742:	4b93      	ldr	r3, [pc, #588]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0xcc>
 800174e:	e015      	b.n	800177c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f908 	bl	8000964 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175a:	f7ff f903 	bl	8000964 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b64      	cmp	r3, #100	; 0x64
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e289      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176c:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	029b      	lsls	r3, r3, #10
 8001774:	4013      	ands	r3, r2
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0xf6>
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d100      	bne.n	8001788 <HAL_RCC_OscConfig+0x124>
 8001786:	e099      	b.n	80018bc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001788:	4b81      	ldr	r3, [pc, #516]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2238      	movs	r2, #56	; 0x38
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2203      	movs	r2, #3
 8001798:	4013      	ands	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0x144>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d002      	beq.n	80017ae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d135      	bne.n	800181a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ae:	4b78      	ldr	r3, [pc, #480]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4013      	ands	r3, r2
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x162>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e25c      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b72      	ldr	r3, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4a74      	ldr	r2, [pc, #464]	; (800199c <HAL_RCC_OscConfig+0x338>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	021a      	lsls	r2, r3, #8
 80017d6:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d112      	bne.n	8001808 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017e2:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6e      	ldr	r2, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x33c>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017f6:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0adb      	lsrs	r3, r3, #11
 80017fc:	2207      	movs	r2, #7
 80017fe:	4013      	ands	r3, r2
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <HAL_RCC_OscConfig+0x340>)
 8001802:	40da      	lsrs	r2, r3
 8001804:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x344>)
 8001806:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x348>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff f84d 	bl	80008ac <HAL_InitTick>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d051      	beq.n	80018ba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e232      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d030      	beq.n	8001884 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001822:	4b5b      	ldr	r3, [pc, #364]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a5e      	ldr	r2, [pc, #376]	; (80019a0 <HAL_RCC_OscConfig+0x33c>)
 8001828:	4013      	ands	r3, r2
 800182a:	0019      	movs	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	4b57      	ldr	r3, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0049      	lsls	r1, r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff f88e 	bl	8000964 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff f889 	bl	8000964 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e20f      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4013      	ands	r3, r2
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b48      	ldr	r3, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_RCC_OscConfig+0x338>)
 8001872:	4013      	ands	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	021a      	lsls	r2, r3, #8
 800187c:	4b44      	ldr	r3, [pc, #272]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	e01b      	b.n	80018bc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800188a:	4949      	ldr	r1, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x34c>)
 800188c:	400a      	ands	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff f868 	bl	8000964 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff f863 	bl	8000964 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1e9      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4013      	ands	r3, r2
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x236>
 80018b8:	e000      	b.n	80018bc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2208      	movs	r2, #8
 80018c2:	4013      	ands	r3, r2
 80018c4:	d047      	beq.n	8001956 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2238      	movs	r2, #56	; 0x38
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b18      	cmp	r3, #24
 80018d0:	d10a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	2202      	movs	r2, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	d03c      	beq.n	8001956 <HAL_RCC_OscConfig+0x2f2>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d138      	bne.n	8001956 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e1cb      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d019      	beq.n	8001924 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	430a      	orrs	r2, r1
 80018fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f832 	bl	8000964 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff f82d 	bl	8000964 <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1b3      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800191a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191c:	2202      	movs	r2, #2
 800191e:	4013      	ands	r3, r2
 8001920:	d0f1      	beq.n	8001906 <HAL_RCC_OscConfig+0x2a2>
 8001922:	e018      	b.n	8001956 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001926:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800192a:	2101      	movs	r1, #1
 800192c:	438a      	bics	r2, r1
 800192e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff f818 	bl	8000964 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff f813 	bl	8000964 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e199      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	2202      	movs	r2, #2
 8001952:	4013      	ands	r3, r2
 8001954:	d1f1      	bne.n	800193a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2204      	movs	r2, #4
 800195c:	4013      	ands	r3, r2
 800195e:	d100      	bne.n	8001962 <HAL_RCC_OscConfig+0x2fe>
 8001960:	e0c6      	b.n	8001af0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	231f      	movs	r3, #31
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2238      	movs	r2, #56	; 0x38
 8001970:	4013      	ands	r3, r2
 8001972:	2b20      	cmp	r3, #32
 8001974:	d11e      	bne.n	80019b4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_OscConfig+0x32c>)
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x31e>
 8001980:	e0b6      	b.n	8001af0 <HAL_RCC_OscConfig+0x48c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d000      	beq.n	800198c <HAL_RCC_OscConfig+0x328>
 800198a:	e0b1      	b.n	8001af0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e177      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
 8001990:	40021000 	.word	0x40021000
 8001994:	fffeffff 	.word	0xfffeffff
 8001998:	fffbffff 	.word	0xfffbffff
 800199c:	ffff80ff 	.word	0xffff80ff
 80019a0:	ffffc7ff 	.word	0xffffc7ff
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004
 80019b0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019b4:	4bb4      	ldr	r3, [pc, #720]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 80019b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	055b      	lsls	r3, r3, #21
 80019bc:	4013      	ands	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_OscConfig+0x360>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x362>
 80019c4:	2300      	movs	r3, #0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d011      	beq.n	80019ee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4baf      	ldr	r3, [pc, #700]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 80019cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ce:	4bae      	ldr	r3, [pc, #696]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	0549      	lsls	r1, r1, #21
 80019d4:	430a      	orrs	r2, r1
 80019d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80019d8:	4bab      	ldr	r3, [pc, #684]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 80019da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	055b      	lsls	r3, r3, #21
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019e6:	231f      	movs	r3, #31
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ee:	4ba7      	ldr	r3, [pc, #668]	; (8001c8c <HAL_RCC_OscConfig+0x628>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4013      	ands	r3, r2
 80019f8:	d11a      	bne.n	8001a30 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019fa:	4ba4      	ldr	r3, [pc, #656]	; (8001c8c <HAL_RCC_OscConfig+0x628>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4ba3      	ldr	r3, [pc, #652]	; (8001c8c <HAL_RCC_OscConfig+0x628>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	0049      	lsls	r1, r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a08:	f7fe ffac 	bl	8000964 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7fe ffa7 	bl	8000964 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e12d      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a24:	4b99      	ldr	r3, [pc, #612]	; (8001c8c <HAL_RCC_OscConfig+0x628>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3e2>
 8001a38:	4b93      	ldr	r3, [pc, #588]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a3c:	4b92      	ldr	r3, [pc, #584]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x41c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x404>
 8001a4e:	4b8e      	ldr	r3, [pc, #568]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a52:	4b8d      	ldr	r3, [pc, #564]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a54:	2104      	movs	r1, #4
 8001a56:	430a      	orrs	r2, r1
 8001a58:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a5a:	4b8b      	ldr	r3, [pc, #556]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a5e:	4b8a      	ldr	r3, [pc, #552]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0x41c>
 8001a68:	4b87      	ldr	r3, [pc, #540]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a6c:	4b86      	ldr	r3, [pc, #536]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	438a      	bics	r2, r1
 8001a72:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a74:	4b84      	ldr	r3, [pc, #528]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a78:	4b83      	ldr	r3, [pc, #524]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d014      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7fe ff6c 	bl	8000964 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a90:	e009      	b.n	8001aa6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7fe ff67 	bl	8000964 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4a7c      	ldr	r2, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x62c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0ec      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa6:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x42e>
 8001ab0:	e013      	b.n	8001ada <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7fe ff57 	bl	8000964 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aba:	e009      	b.n	8001ad0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7fe ff52 	bl	8000964 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	4a72      	ldr	r2, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0x62c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0d7      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad0:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ada:	231f      	movs	r3, #31
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae8:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001aea:	496a      	ldr	r1, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x630>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d100      	bne.n	8001afa <HAL_RCC_OscConfig+0x496>
 8001af8:	e0c1      	b.n	8001c7e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2238      	movs	r2, #56	; 0x38
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d100      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4a4>
 8001b06:	e081      	b.n	8001c0c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d156      	bne.n	8001bbe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b5c      	ldr	r3, [pc, #368]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b16:	4960      	ldr	r1, [pc, #384]	; (8001c98 <HAL_RCC_OscConfig+0x634>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7fe ff22 	bl	8000964 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7fe ff1d 	bl	8000964 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0a3      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	049b      	lsls	r3, r3, #18
 8001b40:	4013      	ands	r3, r2
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_RCC_OscConfig+0x638>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1a      	ldr	r2, [r3, #32]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	431a      	orrs	r2, r3
 8001b72:	4b45      	ldr	r3, [pc, #276]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b74:	430a      	orrs	r2, r1
 8001b76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	0449      	lsls	r1, r1, #17
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0549      	lsls	r1, r1, #21
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7fe fee6 	bl	8000964 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7fe fee1 	bl	8000964 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e067      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	049b      	lsls	r3, r3, #18
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x53a>
 8001bbc:	e05f      	b.n	8001c7e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001bc4:	4934      	ldr	r1, [pc, #208]	; (8001c98 <HAL_RCC_OscConfig+0x634>)
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001bd0:	2103      	movs	r1, #3
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001bdc:	4930      	ldr	r1, [pc, #192]	; (8001ca0 <HAL_RCC_OscConfig+0x63c>)
 8001bde:	400a      	ands	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7fe febf 	bl	8000964 <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7fe feba 	bl	8000964 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e040      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	049b      	lsls	r3, r3, #18
 8001c06:	4013      	ands	r3, r2
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x588>
 8001c0a:	e038      	b.n	8001c7e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e033      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x624>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2203      	movs	r2, #3
 8001c22:	401a      	ands	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d126      	bne.n	8001c7a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2270      	movs	r2, #112	; 0x70
 8001c30:	401a      	ands	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d11f      	bne.n	8001c7a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	23fe      	movs	r3, #254	; 0xfe
 8001c3e:	01db      	lsls	r3, r3, #7
 8001c40:	401a      	ands	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d116      	bne.n	8001c7a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	23f8      	movs	r3, #248	; 0xf8
 8001c50:	039b      	lsls	r3, r3, #14
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d10e      	bne.n	8001c7a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	23e0      	movs	r3, #224	; 0xe0
 8001c60:	051b      	lsls	r3, r3, #20
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	0f5b      	lsrs	r3, r3, #29
 8001c70:	075a      	lsls	r2, r3, #29
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b008      	add	sp, #32
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	00001388 	.word	0x00001388
 8001c94:	efffffff 	.word	0xefffffff
 8001c98:	feffffff 	.word	0xfeffffff
 8001c9c:	11c1808c 	.word	0x11c1808c
 8001ca0:	eefeffff 	.word	0xeefeffff

08001ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0e9      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b76      	ldr	r3, [pc, #472]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d91e      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b73      	ldr	r3, [pc, #460]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2207      	movs	r2, #7
 8001ccc:	4393      	bics	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cd8:	f7fe fe44 	bl	8000964 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce0:	e009      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce2:	f7fe fe3f 	bl	8000964 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	4a6a      	ldr	r2, [pc, #424]	; (8001e98 <HAL_RCC_ClockConfig+0x1f4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0ca      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cf6:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1ee      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d015      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2204      	movs	r2, #4
 8001d14:	4013      	ands	r3, r2
 8001d16:	d006      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d18:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d1e:	21e0      	movs	r1, #224	; 0xe0
 8001d20:	01c9      	lsls	r1, r1, #7
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d26:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ea0 <HAL_RCC_ClockConfig+0x1fc>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d057      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	029b      	lsls	r3, r3, #10
 8001d54:	4013      	ands	r3, r2
 8001d56:	d12b      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e097      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d64:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	049b      	lsls	r3, r3, #18
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d11f      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e08b      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4013      	ands	r3, r2
 8001d86:	d113      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e07f      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d108      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e074      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e06d      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db0:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2207      	movs	r2, #7
 8001db6:	4393      	bics	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc4:	f7fe fdce 	bl	8000964 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7fe fdc9 	bl	8000964 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	; (8001e98 <HAL_RCC_ClockConfig+0x1f4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e054      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2238      	movs	r2, #56	; 0x38
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d1ec      	bne.n	8001dce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2207      	movs	r2, #7
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d21e      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2207      	movs	r2, #7
 8001e08:	4393      	bics	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e14:	f7fe fda6 	bl	8000964 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1e:	f7fe fda1 	bl	8000964 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <HAL_RCC_ClockConfig+0x1f4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e02c      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2207      	movs	r2, #7
 8001e38:	4013      	ands	r3, r2
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1ee      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2204      	movs	r2, #4
 8001e46:	4013      	ands	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <HAL_RCC_ClockConfig+0x200>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e5e:	f000 f829 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001e62:	0001      	movs	r1, r0
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_RCC_ClockConfig+0x204>)
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	58d3      	ldr	r3, [r2, r3]
 8001e74:	221f      	movs	r2, #31
 8001e76:	4013      	ands	r3, r2
 8001e78:	000a      	movs	r2, r1
 8001e7a:	40da      	lsrs	r2, r3
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_ClockConfig+0x208>)
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_ClockConfig+0x20c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe fd11 	bl	80008ac <HAL_InitTick>
 8001e8a:	0003      	movs	r3, r0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b004      	add	sp, #16
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40022000 	.word	0x40022000
 8001e98:	00001388 	.word	0x00001388
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	fffff0ff 	.word	0xfffff0ff
 8001ea4:	ffff8fff 	.word	0xffff8fff
 8001ea8:	0800203c 	.word	0x0800203c
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2238      	movs	r2, #56	; 0x38
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d10f      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0adb      	lsrs	r3, r3, #11
 8001eca:	2207      	movs	r2, #7
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2201      	movs	r2, #1
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	4835      	ldr	r0, [pc, #212]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eda:	f7fe f915 	bl	8000108 <__udivsi3>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e05d      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2238      	movs	r2, #56	; 0x38
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef0:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e054      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2238      	movs	r2, #56	; 0x38
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d138      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2203      	movs	r2, #3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	2207      	movs	r2, #7
 8001f14:	4013      	ands	r3, r2
 8001f16:	3301      	adds	r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	4824      	ldr	r0, [pc, #144]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f24:	f7fe f8f0 	bl	8000108 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	227f      	movs	r2, #127	; 0x7f
 8001f34:	4013      	ands	r3, r2
 8001f36:	434b      	muls	r3, r1
 8001f38:	617b      	str	r3, [r7, #20]
        break;
 8001f3a:	e00d      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f40:	f7fe f8e2 	bl	8000108 <__udivsi3>
 8001f44:	0003      	movs	r3, r0
 8001f46:	0019      	movs	r1, r3
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	227f      	movs	r2, #127	; 0x7f
 8001f50:	4013      	ands	r3, r2
 8001f52:	434b      	muls	r3, r1
 8001f54:	617b      	str	r3, [r7, #20]
        break;
 8001f56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0f5b      	lsrs	r3, r3, #29
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4013      	ands	r3, r2
 8001f62:	3301      	adds	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7fe f8cd 	bl	8000108 <__udivsi3>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e015      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2238      	movs	r2, #56	; 0x38
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d103      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2238      	movs	r2, #56	; 0x38
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b18      	cmp	r3, #24
 8001f92:	d103      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f94:	23fa      	movs	r3, #250	; 0xfa
 8001f96:	01db      	lsls	r3, r3, #7
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e001      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fa0:	693b      	ldr	r3, [r7, #16]
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b006      	add	sp, #24
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	007a1200 	.word	0x007a1200

08001fb8 <__libc_init_array>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	2600      	movs	r6, #0
 8001fbc:	4d0c      	ldr	r5, [pc, #48]	; (8001ff0 <__libc_init_array+0x38>)
 8001fbe:	4c0d      	ldr	r4, [pc, #52]	; (8001ff4 <__libc_init_array+0x3c>)
 8001fc0:	1b64      	subs	r4, r4, r5
 8001fc2:	10a4      	asrs	r4, r4, #2
 8001fc4:	42a6      	cmp	r6, r4
 8001fc6:	d109      	bne.n	8001fdc <__libc_init_array+0x24>
 8001fc8:	2600      	movs	r6, #0
 8001fca:	f000 f82b 	bl	8002024 <_init>
 8001fce:	4d0a      	ldr	r5, [pc, #40]	; (8001ff8 <__libc_init_array+0x40>)
 8001fd0:	4c0a      	ldr	r4, [pc, #40]	; (8001ffc <__libc_init_array+0x44>)
 8001fd2:	1b64      	subs	r4, r4, r5
 8001fd4:	10a4      	asrs	r4, r4, #2
 8001fd6:	42a6      	cmp	r6, r4
 8001fd8:	d105      	bne.n	8001fe6 <__libc_init_array+0x2e>
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	00b3      	lsls	r3, r6, #2
 8001fde:	58eb      	ldr	r3, [r5, r3]
 8001fe0:	4798      	blx	r3
 8001fe2:	3601      	adds	r6, #1
 8001fe4:	e7ee      	b.n	8001fc4 <__libc_init_array+0xc>
 8001fe6:	00b3      	lsls	r3, r6, #2
 8001fe8:	58eb      	ldr	r3, [r5, r3]
 8001fea:	4798      	blx	r3
 8001fec:	3601      	adds	r6, #1
 8001fee:	e7f2      	b.n	8001fd6 <__libc_init_array+0x1e>
 8001ff0:	0800207c 	.word	0x0800207c
 8001ff4:	0800207c 	.word	0x0800207c
 8001ff8:	0800207c 	.word	0x0800207c
 8001ffc:	08002080 	.word	0x08002080

08002000 <memcpy>:
 8002000:	2300      	movs	r3, #0
 8002002:	b510      	push	{r4, lr}
 8002004:	429a      	cmp	r2, r3
 8002006:	d100      	bne.n	800200a <memcpy+0xa>
 8002008:	bd10      	pop	{r4, pc}
 800200a:	5ccc      	ldrb	r4, [r1, r3]
 800200c:	54c4      	strb	r4, [r0, r3]
 800200e:	3301      	adds	r3, #1
 8002010:	e7f8      	b.n	8002004 <memcpy+0x4>

08002012 <memset>:
 8002012:	0003      	movs	r3, r0
 8002014:	1882      	adds	r2, r0, r2
 8002016:	4293      	cmp	r3, r2
 8002018:	d100      	bne.n	800201c <memset+0xa>
 800201a:	4770      	bx	lr
 800201c:	7019      	strb	r1, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	e7f9      	b.n	8002016 <memset+0x4>
	...

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
