
STM32G0_WALKRUN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000211c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002270  08002270  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002270  08002270  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002270  08002270  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002270  08002270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002274  08002274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002284  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002284  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce23  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb5  00000000  00000000  0002ce57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0002ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0002f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b58  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f080  00000000  00000000  00045f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d37e  00000000  00000000  00054fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e233e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003074  00000000  00000000  000e2394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021c4 	.word	0x080021c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080021c4 	.word	0x080021c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa24 	bl	8000670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f807 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ee 	bl	800040c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000230:	f000 f84c 	bl	80002cc <MX_I2C2_Init>
  MX_TIM2_Init();
 8000234:	f000 f88a 	bl	800034c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x18>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b093      	sub	sp, #76	; 0x4c
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2410      	movs	r4, #16
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	2338      	movs	r3, #56	; 0x38
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f001 ffb2 	bl	80021b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	003b      	movs	r3, r7
 8000252:	0018      	movs	r0, r3
 8000254:	2310      	movs	r3, #16
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f001 ffab 	bl	80021b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fdd0 	bl	8000e08 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2202      	movs	r2, #2
 800026c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2280      	movs	r2, #128	; 0x80
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2240      	movs	r2, #64	; 0x40
 8000280:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2200      	movs	r2, #0
 8000286:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fdfc 	bl	8000e88 <HAL_RCC_OscConfig>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000294:	f000 f8d0 	bl	8000438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	003b      	movs	r3, r7
 800029a:	2207      	movs	r2, #7
 800029c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029e:	003b      	movs	r3, r7
 80002a0:	2200      	movs	r2, #0
 80002a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	003b      	movs	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	003b      	movs	r3, r7
 80002ac:	2200      	movs	r2, #0
 80002ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b0:	003b      	movs	r3, r7
 80002b2:	2100      	movs	r1, #0
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 f907 	bl	80014c8 <HAL_RCC_ClockConfig>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002be:	f000 f8bb 	bl	8000438 <Error_Handler>
  }
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b013      	add	sp, #76	; 0x4c
 80002c8:	bd90      	pop	{r4, r7, pc}
	...

080002cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_I2C2_Init+0x74>)
 80002d2:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <MX_I2C2_Init+0x78>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <MX_I2C2_Init+0x74>)
 80002d8:	4a1b      	ldr	r2, [pc, #108]	; (8000348 <MX_I2C2_Init+0x7c>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_I2C2_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e2:	4b17      	ldr	r3, [pc, #92]	; (8000340 <MX_I2C2_Init+0x74>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_I2C2_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80002ee:	4b14      	ldr	r3, [pc, #80]	; (8000340 <MX_I2C2_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <MX_I2C2_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fa:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_I2C2_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_I2C2_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_I2C2_Init+0x74>)
 8000308:	0018      	movs	r0, r3
 800030a:	f000 fc4f 	bl	8000bac <HAL_I2C_Init>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000312:	f000 f891 	bl	8000438 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <MX_I2C2_Init+0x74>)
 8000318:	2100      	movs	r1, #0
 800031a:	0018      	movs	r0, r3
 800031c:	f000 fcdc 	bl	8000cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000320:	1e03      	subs	r3, r0, #0
 8000322:	d001      	beq.n	8000328 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000324:	f000 f888 	bl	8000438 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <MX_I2C2_Init+0x74>)
 800032a:	2100      	movs	r1, #0
 800032c:	0018      	movs	r0, r3
 800032e:	f000 fd1f 	bl	8000d70 <HAL_I2CEx_ConfigDigitalFilter>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000336:	f000 f87f 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000028 	.word	0x20000028
 8000344:	40005800 	.word	0x40005800
 8000348:	00303d5b 	.word	0x00303d5b

0800034c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000352:	231c      	movs	r3, #28
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	0018      	movs	r0, r3
 8000358:	230c      	movs	r3, #12
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f001 ff29 	bl	80021b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	231c      	movs	r3, #28
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f001 ff22 	bl	80021b4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000370:	4b25      	ldr	r3, [pc, #148]	; (8000408 <MX_TIM2_Init+0xbc>)
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	05d2      	lsls	r2, r2, #23
 8000376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000378:	4b23      	ldr	r3, [pc, #140]	; (8000408 <MX_TIM2_Init+0xbc>)
 800037a:	2200      	movs	r2, #0
 800037c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037e:	4b22      	ldr	r3, [pc, #136]	; (8000408 <MX_TIM2_Init+0xbc>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000384:	4b20      	ldr	r3, [pc, #128]	; (8000408 <MX_TIM2_Init+0xbc>)
 8000386:	2201      	movs	r2, #1
 8000388:	4252      	negs	r2, r2
 800038a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <MX_TIM2_Init+0xbc>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000392:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_TIM2_Init+0xbc>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_TIM2_Init+0xbc>)
 800039a:	0018      	movs	r0, r3
 800039c:	f001 fa1e 	bl	80017dc <HAL_TIM_PWM_Init>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80003a4:	f000 f848 	bl	8000438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a8:	211c      	movs	r1, #28
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b6:	187a      	adds	r2, r7, r1
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_TIM2_Init+0xbc>)
 80003ba:	0011      	movs	r1, r2
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 fe6d 	bl	800209c <HAL_TIMEx_MasterConfigSynchronization>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80003c6:	f000 f837 	bl	8000438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ca:	003b      	movs	r3, r7
 80003cc:	2260      	movs	r2, #96	; 0x60
 80003ce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003dc:	003b      	movs	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003e2:	0039      	movs	r1, r7
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_TIM2_Init+0xbc>)
 80003e6:	2208      	movs	r2, #8
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fa4f 	bl	800188c <HAL_TIM_PWM_ConfigChannel>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80003f2:	f000 f821 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <MX_TIM2_Init+0xbc>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 f8af 	bl	800055c <HAL_TIM_MspPostInit>

}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b00a      	add	sp, #40	; 0x28
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	20000074 	.word	0x20000074

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_GPIO_Init+0x28>)
 8000414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000416:	4b07      	ldr	r3, [pc, #28]	; (8000434 <MX_GPIO_Init+0x28>)
 8000418:	2101      	movs	r1, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <MX_GPIO_Init+0x28>)
 8000420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b002      	add	sp, #8
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40021000 	.word	0x40021000

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>
	...

08000444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x44>)
 800044c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <HAL_MspInit+0x44>)
 8000450:	2101      	movs	r1, #1
 8000452:	430a      	orrs	r2, r1
 8000454:	641a      	str	r2, [r3, #64]	; 0x40
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x44>)
 8000458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800045a:	2201      	movs	r2, #1
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_MspInit+0x44>)
 8000464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <HAL_MspInit+0x44>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	0549      	lsls	r1, r1, #21
 800046c:	430a      	orrs	r2, r1
 800046e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_MspInit+0x44>)
 8000472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	055b      	lsls	r3, r3, #21
 8000478:	4013      	ands	r3, r2
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b002      	add	sp, #8
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	40021000 	.word	0x40021000

0800048c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b08b      	sub	sp, #44	; 0x2c
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	2414      	movs	r4, #20
 8000496:	193b      	adds	r3, r7, r4
 8000498:	0018      	movs	r0, r3
 800049a:	2314      	movs	r3, #20
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f001 fe88 	bl	80021b4 <memset>
  if(hi2c->Instance==I2C2)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a1c      	ldr	r2, [pc, #112]	; (800051c <HAL_I2C_MspInit+0x90>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d131      	bne.n	8000512 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <HAL_I2C_MspInit+0x94>)
 80004b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <HAL_I2C_MspInit+0x94>)
 80004b4:	2101      	movs	r1, #1
 80004b6:	430a      	orrs	r2, r1
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <HAL_I2C_MspInit+0x94>)
 80004bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004be:	2201      	movs	r2, #1
 80004c0:	4013      	ands	r3, r2
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	22c0      	movs	r2, #192	; 0xc0
 80004ca:	0152      	lsls	r2, r2, #5
 80004cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ce:	0021      	movs	r1, r4
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2212      	movs	r2, #18
 80004d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2201      	movs	r2, #1
 80004da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2206      	movs	r2, #6
 80004e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	187a      	adds	r2, r7, r1
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 f9f7 	bl	80008e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_I2C_MspInit+0x94>)
 80004f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <HAL_I2C_MspInit+0x94>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	03c9      	lsls	r1, r1, #15
 8000500:	430a      	orrs	r2, r1
 8000502:	63da      	str	r2, [r3, #60]	; 0x3c
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_I2C_MspInit+0x94>)
 8000506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	03db      	lsls	r3, r3, #15
 800050c:	4013      	ands	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b00b      	add	sp, #44	; 0x2c
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	40005800 	.word	0x40005800
 8000520:	40021000 	.word	0x40021000

08000524 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	429a      	cmp	r2, r3
 8000536:	d10b      	bne.n	8000550 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_TIM_PWM_MspInit+0x34>)
 800053a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_TIM_PWM_MspInit+0x34>)
 800053e:	2101      	movs	r1, #1
 8000540:	430a      	orrs	r2, r1
 8000542:	63da      	str	r2, [r3, #60]	; 0x3c
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_TIM_PWM_MspInit+0x34>)
 8000546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000548:	2201      	movs	r2, #1
 800054a:	4013      	ands	r3, r2
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b004      	add	sp, #16
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	240c      	movs	r4, #12
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f001 fe20 	bl	80021b4 <memset>
  if(htim->Instance==TIM2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	429a      	cmp	r2, r3
 800057e:	d122      	bne.n	80005c6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <HAL_TIM_MspPostInit+0x74>)
 8000582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <HAL_TIM_MspPostInit+0x74>)
 8000586:	2101      	movs	r1, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_TIM_MspPostInit+0x74>)
 800058e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8000598:	0021      	movs	r1, r4
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2204      	movs	r2, #4
 800059e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2202      	movs	r2, #2
 80005a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2202      	movs	r2, #2
 80005b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 80005b8:	187a      	adds	r2, r7, r1
 80005ba:	23a0      	movs	r3, #160	; 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 f98f 	bl	80008e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b009      	add	sp, #36	; 0x24
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <NMI_Handler+0x4>

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0x4>

080005e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f000 f8a4 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <SystemInit+0x14>)
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	0512      	lsls	r2, r2, #20
 800060e:	609a      	str	r2, [r3, #8]
#endif
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000620:	f7ff fff0 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f001 fd8f 	bl	800216c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800064e:	f7ff fde7 	bl	8000220 <main>

08000652 <LoopForever>:

LoopForever:
  b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000660:	08002278 	.word	0x08002278
  ldr r2, =_sbss
 8000664:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000668:	200000c4 	.word	0x200000c4

0800066c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_IRQHandler>
	...

08000670 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <HAL_Init+0x3c>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_Init+0x3c>)
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	0049      	lsls	r1, r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800068a:	2000      	movs	r0, #0
 800068c:	f000 f810 	bl	80006b0 <HAL_InitTick>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d003      	beq.n	800069c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e001      	b.n	80006a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f7ff fed2 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	781b      	ldrb	r3, [r3, #0]
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <HAL_InitTick+0x88>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d02b      	beq.n	8000720 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_InitTick+0x8c>)
 80006ca:	681c      	ldr	r4, [r3, #0]
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <HAL_InitTick+0x88>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	0019      	movs	r1, r3
 80006d2:	23fa      	movs	r3, #250	; 0xfa
 80006d4:	0098      	lsls	r0, r3, #2
 80006d6:	f7ff fd17 	bl	8000108 <__udivsi3>
 80006da:	0003      	movs	r3, r0
 80006dc:	0019      	movs	r1, r3
 80006de:	0020      	movs	r0, r4
 80006e0:	f7ff fd12 	bl	8000108 <__udivsi3>
 80006e4:	0003      	movs	r3, r0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f8ef 	bl	80008ca <HAL_SYSTICK_Config>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d112      	bne.n	8000716 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d80a      	bhi.n	800070c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	2301      	movs	r3, #1
 80006fa:	425b      	negs	r3, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 f8ce 	bl	80008a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_InitTick+0x90>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e00d      	b.n	8000728 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800070c:	230f      	movs	r3, #15
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e008      	b.n	8000728 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000716:	230f      	movs	r3, #15
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	e003      	b.n	8000728 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000720:	230f      	movs	r3, #15
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
}
 800072e:	0018      	movs	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	b005      	add	sp, #20
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000008 	.word	0x20000008
 800073c:	20000000 	.word	0x20000000
 8000740:	20000004 	.word	0x20000004

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x1c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	001a      	movs	r2, r3
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x20>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	18d2      	adds	r2, r2, r3
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_IncTick+0x20>)
 8000756:	601a      	str	r2, [r3, #0]
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000008 	.word	0x20000008
 8000764:	200000c0 	.word	0x200000c0

08000768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <HAL_GetTick+0x10>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	200000c0 	.word	0x200000c0

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	0002      	movs	r2, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b7f      	cmp	r3, #127	; 0x7f
 8000790:	d828      	bhi.n	80007e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000792:	4a2f      	ldr	r2, [pc, #188]	; (8000850 <__NVIC_SetPriority+0xd4>)
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b25b      	sxtb	r3, r3
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	33c0      	adds	r3, #192	; 0xc0
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	589b      	ldr	r3, [r3, r2]
 80007a2:	1dfa      	adds	r2, r7, #7
 80007a4:	7812      	ldrb	r2, [r2, #0]
 80007a6:	0011      	movs	r1, r2
 80007a8:	2203      	movs	r2, #3
 80007aa:	400a      	ands	r2, r1
 80007ac:	00d2      	lsls	r2, r2, #3
 80007ae:	21ff      	movs	r1, #255	; 0xff
 80007b0:	4091      	lsls	r1, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	43d2      	mvns	r2, r2
 80007b6:	401a      	ands	r2, r3
 80007b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	019b      	lsls	r3, r3, #6
 80007be:	22ff      	movs	r2, #255	; 0xff
 80007c0:	401a      	ands	r2, r3
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	0018      	movs	r0, r3
 80007c8:	2303      	movs	r3, #3
 80007ca:	4003      	ands	r3, r0
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d0:	481f      	ldr	r0, [pc, #124]	; (8000850 <__NVIC_SetPriority+0xd4>)
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	089b      	lsrs	r3, r3, #2
 80007da:	430a      	orrs	r2, r1
 80007dc:	33c0      	adds	r3, #192	; 0xc0
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007e2:	e031      	b.n	8000848 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <__NVIC_SetPriority+0xd8>)
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	0019      	movs	r1, r3
 80007ec:	230f      	movs	r3, #15
 80007ee:	400b      	ands	r3, r1
 80007f0:	3b08      	subs	r3, #8
 80007f2:	089b      	lsrs	r3, r3, #2
 80007f4:	3306      	adds	r3, #6
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	18d3      	adds	r3, r2, r3
 80007fa:	3304      	adds	r3, #4
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	1dfa      	adds	r2, r7, #7
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	0011      	movs	r1, r2
 8000804:	2203      	movs	r2, #3
 8000806:	400a      	ands	r2, r1
 8000808:	00d2      	lsls	r2, r2, #3
 800080a:	21ff      	movs	r1, #255	; 0xff
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	43d2      	mvns	r2, r2
 8000812:	401a      	ands	r2, r3
 8000814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	401a      	ands	r2, r3
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	2303      	movs	r3, #3
 8000826:	4003      	ands	r3, r0
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082c:	4809      	ldr	r0, [pc, #36]	; (8000854 <__NVIC_SetPriority+0xd8>)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	001c      	movs	r4, r3
 8000834:	230f      	movs	r3, #15
 8000836:	4023      	ands	r3, r4
 8000838:	3b08      	subs	r3, #8
 800083a:	089b      	lsrs	r3, r3, #2
 800083c:	430a      	orrs	r2, r1
 800083e:	3306      	adds	r3, #6
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	18c3      	adds	r3, r0, r3
 8000844:	3304      	adds	r3, #4
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b003      	add	sp, #12
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	1e5a      	subs	r2, r3, #1
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	045b      	lsls	r3, r3, #17
 8000868:	429a      	cmp	r2, r3
 800086a:	d301      	bcc.n	8000870 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086c:	2301      	movs	r3, #1
 800086e:	e010      	b.n	8000892 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <SysTick_Config+0x44>)
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	3a01      	subs	r2, #1
 8000876:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000878:	2301      	movs	r3, #1
 800087a:	425b      	negs	r3, r3
 800087c:	2103      	movs	r1, #3
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff ff7c 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <SysTick_Config+0x44>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <SysTick_Config+0x44>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	0018      	movs	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
 80008aa:	210f      	movs	r1, #15
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	1c02      	adds	r2, r0, #0
 80008b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	0011      	movs	r1, r2
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff5d 	bl	800077c <__NVIC_SetPriority>
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b004      	add	sp, #16
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ffbf 	bl	8000858 <SysTick_Config>
 80008da:	0003      	movs	r3, r0
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b002      	add	sp, #8
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f2:	e147      	b.n	8000b84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <HAL_GPIO_Init+0x28>
 800090a:	e138      	b.n	8000b7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d00b      	beq.n	800092c <HAL_GPIO_Init+0x48>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d007      	beq.n	800092c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000920:	2b11      	cmp	r3, #17
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b12      	cmp	r3, #18
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	409a      	lsls	r2, r3
 800093a:	0013      	movs	r3, r2
 800093c:	43da      	mvns	r2, r3
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	409a      	lsls	r2, r3
 800094e:	0013      	movs	r3, r2
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	43da      	mvns	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	2201      	movs	r2, #1
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	43da      	mvns	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	409a      	lsls	r2, r3
 80009b0:	0013      	movs	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0xea>
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d123      	bne.n	8000a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	08da      	lsrs	r2, r3, #3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3208      	adds	r2, #8
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	58d3      	ldr	r3, [r2, r3]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	2207      	movs	r2, #7
 80009e0:	4013      	ands	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	409a      	lsls	r2, r3
 80009e8:	0013      	movs	r3, r2
 80009ea:	43da      	mvns	r2, r3
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	691a      	ldr	r2, [r3, #16]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2107      	movs	r1, #7
 80009fa:	400b      	ands	r3, r1
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	08da      	lsrs	r2, r3, #3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3208      	adds	r2, #8
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	6939      	ldr	r1, [r7, #16]
 8000a14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2203      	movs	r2, #3
 8000a34:	401a      	ands	r2, r3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	055b      	lsls	r3, r3, #21
 8000a52:	4013      	ands	r3, r2
 8000a54:	d100      	bne.n	8000a58 <HAL_GPIO_Init+0x174>
 8000a56:	e092      	b.n	8000b7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a58:	4a50      	ldr	r2, [pc, #320]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3318      	adds	r3, #24
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	589b      	ldr	r3, [r3, r2]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2203      	movs	r2, #3
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	220f      	movs	r2, #15
 8000a70:	409a      	lsls	r2, r3
 8000a72:	0013      	movs	r3, r2
 8000a74:	43da      	mvns	r2, r3
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	23a0      	movs	r3, #160	; 0xa0
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d013      	beq.n	8000aae <HAL_GPIO_Init+0x1ca>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a45      	ldr	r2, [pc, #276]	; (8000ba0 <HAL_GPIO_Init+0x2bc>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d00d      	beq.n	8000aaa <HAL_GPIO_Init+0x1c6>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a44      	ldr	r2, [pc, #272]	; (8000ba4 <HAL_GPIO_Init+0x2c0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d007      	beq.n	8000aa6 <HAL_GPIO_Init+0x1c2>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a43      	ldr	r2, [pc, #268]	; (8000ba8 <HAL_GPIO_Init+0x2c4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_GPIO_Init+0x1be>
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x1cc>
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	e004      	b.n	8000ab0 <HAL_GPIO_Init+0x1cc>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e002      	b.n	8000ab0 <HAL_GPIO_Init+0x1cc>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <HAL_GPIO_Init+0x1cc>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	2103      	movs	r1, #3
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	00d2      	lsls	r2, r2, #3
 8000ab8:	4093      	lsls	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ac0:	4936      	ldr	r1, [pc, #216]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3318      	adds	r3, #24
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ace:	4a33      	ldr	r2, [pc, #204]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	58d3      	ldr	r3, [r2, r3]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43da      	mvns	r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	025b      	lsls	r3, r3, #9
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000af4:	4929      	ldr	r1, [pc, #164]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000afc:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000afe:	2384      	movs	r3, #132	; 0x84
 8000b00:	58d3      	ldr	r3, [r2, r3]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43da      	mvns	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	029b      	lsls	r3, r3, #10
 8000b16:	4013      	ands	r3, r2
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b22:	491e      	ldr	r1, [pc, #120]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000b24:	2284      	movs	r2, #132	; 0x84
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	035b      	lsls	r3, r3, #13
 8000b42:	4013      	ands	r3, r2
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43da      	mvns	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	039b      	lsls	r3, r3, #14
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	40da      	lsrs	r2, r3
 8000b8c:	1e13      	subs	r3, r2, #0
 8000b8e:	d000      	beq.n	8000b92 <HAL_GPIO_Init+0x2ae>
 8000b90:	e6b0      	b.n	80008f4 <HAL_GPIO_Init+0x10>
  }
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b006      	add	sp, #24
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	50000400 	.word	0x50000400
 8000ba4:	50000800 	.word	0x50000800
 8000ba8:	50000c00 	.word	0x50000c00

08000bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e082      	b.n	8000cc4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2241      	movs	r2, #65	; 0x41
 8000bc2:	5c9b      	ldrb	r3, [r3, r2]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d107      	bne.n	8000bda <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2240      	movs	r2, #64	; 0x40
 8000bce:	2100      	movs	r1, #0
 8000bd0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fc59 	bl	800048c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2241      	movs	r2, #65	; 0x41
 8000bde:	2124      	movs	r1, #36	; 0x24
 8000be0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2101      	movs	r1, #1
 8000bee:	438a      	bics	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4934      	ldr	r1, [pc, #208]	; (8000ccc <HAL_I2C_Init+0x120>)
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4931      	ldr	r1, [pc, #196]	; (8000cd0 <HAL_I2C_Init+0x124>)
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d108      	bne.n	8000c2a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0209      	lsls	r1, r1, #8
 8000c24:	430a      	orrs	r2, r1
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	e007      	b.n	8000c3a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2184      	movs	r1, #132	; 0x84
 8000c34:	0209      	lsls	r1, r1, #8
 8000c36:	430a      	orrs	r2, r1
 8000c38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d104      	bne.n	8000c4c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	491f      	ldr	r1, [pc, #124]	; (8000cd4 <HAL_I2C_Init+0x128>)
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <HAL_I2C_Init+0x124>)
 8000c68:	400a      	ands	r2, r1
 8000c6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	0011      	movs	r1, r2
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	021a      	lsls	r2, r3, #8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69d9      	ldr	r1, [r3, #28]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2241      	movs	r2, #65	; 0x41
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2242      	movs	r2, #66	; 0x42
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	f0ffffff 	.word	0xf0ffffff
 8000cd0:	ffff7fff 	.word	0xffff7fff
 8000cd4:	02008000 	.word	0x02008000

08000cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2241      	movs	r2, #65	; 0x41
 8000ce6:	5c9b      	ldrb	r3, [r3, r2]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b20      	cmp	r3, #32
 8000cec:	d138      	bne.n	8000d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2240      	movs	r2, #64	; 0x40
 8000cf2:	5c9b      	ldrb	r3, [r3, r2]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d101      	bne.n	8000cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e032      	b.n	8000d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2240      	movs	r2, #64	; 0x40
 8000d00:	2101      	movs	r1, #1
 8000d02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2241      	movs	r2, #65	; 0x41
 8000d08:	2124      	movs	r1, #36	; 0x24
 8000d0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2101      	movs	r1, #1
 8000d18:	438a      	bics	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4911      	ldr	r1, [pc, #68]	; (8000d6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000d28:	400a      	ands	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2101      	movs	r1, #1
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2241      	movs	r2, #65	; 0x41
 8000d50:	2120      	movs	r1, #32
 8000d52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	2100      	movs	r1, #0
 8000d5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e000      	b.n	8000d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000d60:	2302      	movs	r3, #2
  }
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	ffffefff 	.word	0xffffefff

08000d70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2241      	movs	r2, #65	; 0x41
 8000d7e:	5c9b      	ldrb	r3, [r3, r2]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b20      	cmp	r3, #32
 8000d84:	d139      	bne.n	8000dfa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2240      	movs	r2, #64	; 0x40
 8000d8a:	5c9b      	ldrb	r3, [r3, r2]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e033      	b.n	8000dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2240      	movs	r2, #64	; 0x40
 8000d98:	2101      	movs	r1, #1
 8000d9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2241      	movs	r2, #65	; 0x41
 8000da0:	2124      	movs	r1, #36	; 0x24
 8000da2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2101      	movs	r1, #1
 8000db0:	438a      	bics	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2241      	movs	r2, #65	; 0x41
 8000dea:	2120      	movs	r1, #32
 8000dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2240      	movs	r2, #64	; 0x40
 8000df2:	2100      	movs	r1, #0
 8000df4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000dfa:	2302      	movs	r3, #2
  }
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	fffff0ff 	.word	0xfffff0ff

08000e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	0019      	movs	r1, r3
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d11f      	bne.n	8000e6c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	0013      	movs	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	189b      	adds	r3, r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4912      	ldr	r1, [pc, #72]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff f964 	bl	8000108 <__udivsi3>
 8000e40:	0003      	movs	r3, r0
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e46:	e008      	b.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e001      	b.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e009      	b.n	8000e6e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	401a      	ands	r2, r3
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d0ed      	beq.n	8000e48 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b004      	add	sp, #16
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40007000 	.word	0x40007000
 8000e7c:	fffff9ff 	.word	0xfffff9ff
 8000e80:	20000000 	.word	0x20000000
 8000e84:	000f4240 	.word	0x000f4240

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e304      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x1e>
 8000ea4:	e07c      	b.n	8000fa0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea6:	4bc3      	ldr	r3, [pc, #780]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2238      	movs	r2, #56	; 0x38
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb0:	4bc0      	ldr	r3, [pc, #768]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2b10      	cmp	r3, #16
 8000ebe:	d102      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x3e>
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d002      	beq.n	8000ecc <HAL_RCC_OscConfig+0x44>
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d10b      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ecc:	4bb9      	ldr	r3, [pc, #740]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d062      	beq.n	8000f9e <HAL_RCC_OscConfig+0x116>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d15e      	bne.n	8000f9e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e2df      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	025b      	lsls	r3, r3, #9
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d107      	bne.n	8000f00 <HAL_RCC_OscConfig+0x78>
 8000ef0:	4bb0      	ldr	r3, [pc, #704]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4baf      	ldr	r3, [pc, #700]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0249      	lsls	r1, r1, #9
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e020      	b.n	8000f42 <HAL_RCC_OscConfig+0xba>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	02db      	lsls	r3, r3, #11
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d10e      	bne.n	8000f2a <HAL_RCC_OscConfig+0xa2>
 8000f0c:	4ba9      	ldr	r3, [pc, #676]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4ba8      	ldr	r3, [pc, #672]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	02c9      	lsls	r1, r1, #11
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	4ba6      	ldr	r3, [pc, #664]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4ba5      	ldr	r3, [pc, #660]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0249      	lsls	r1, r1, #9
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e00b      	b.n	8000f42 <HAL_RCC_OscConfig+0xba>
 8000f2a:	4ba2      	ldr	r3, [pc, #648]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4ba1      	ldr	r3, [pc, #644]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f30:	49a1      	ldr	r1, [pc, #644]	; (80011b8 <HAL_RCC_OscConfig+0x330>)
 8000f32:	400a      	ands	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	4b9f      	ldr	r3, [pc, #636]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4b9e      	ldr	r3, [pc, #632]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f3c:	499f      	ldr	r1, [pc, #636]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f3e:	400a      	ands	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d014      	beq.n	8000f74 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fc0d 	bl	8000768 <HAL_GetTick>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fc08 	bl	8000768 <HAL_GetTick>
 8000f58:	0002      	movs	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e29e      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f66:	4b93      	ldr	r3, [pc, #588]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xcc>
 8000f72:	e015      	b.n	8000fa0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f74:	f7ff fbf8 	bl	8000768 <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fbf3 	bl	8000768 <HAL_GetTick>
 8000f82:	0002      	movs	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	; 0x64
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e289      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f90:	4b88      	ldr	r3, [pc, #544]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d1f0      	bne.n	8000f7e <HAL_RCC_OscConfig+0xf6>
 8000f9c:	e000      	b.n	8000fa0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d100      	bne.n	8000fac <HAL_RCC_OscConfig+0x124>
 8000faa:	e099      	b.n	80010e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fac:	4b81      	ldr	r3, [pc, #516]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2238      	movs	r2, #56	; 0x38
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fb6:	4b7f      	ldr	r3, [pc, #508]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2203      	movs	r2, #3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2b10      	cmp	r3, #16
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x144>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d002      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x14a>
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d135      	bne.n	800103e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd2:	4b78      	ldr	r3, [pc, #480]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d005      	beq.n	8000fea <HAL_RCC_OscConfig+0x162>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e25c      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	4b72      	ldr	r3, [pc, #456]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a74      	ldr	r2, [pc, #464]	; (80011c0 <HAL_RCC_OscConfig+0x338>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	0019      	movs	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	021a      	lsls	r2, r3, #8
 8000ffa:	4b6e      	ldr	r3, [pc, #440]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d112      	bne.n	800102c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001006:	4b6b      	ldr	r3, [pc, #428]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6e      	ldr	r2, [pc, #440]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 800100c:	4013      	ands	r3, r2
 800100e:	0019      	movs	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	4b67      	ldr	r3, [pc, #412]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001016:	430a      	orrs	r2, r1
 8001018:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800101a:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	0adb      	lsrs	r3, r3, #11
 8001020:	2207      	movs	r2, #7
 8001022:	4013      	ands	r3, r2
 8001024:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <HAL_RCC_OscConfig+0x340>)
 8001026:	40da      	lsrs	r2, r3
 8001028:	4b68      	ldr	r3, [pc, #416]	; (80011cc <HAL_RCC_OscConfig+0x344>)
 800102a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800102c:	4b68      	ldr	r3, [pc, #416]	; (80011d0 <HAL_RCC_OscConfig+0x348>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff fb3d 	bl	80006b0 <HAL_InitTick>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d051      	beq.n	80010de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e232      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d030      	beq.n	80010a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001046:	4b5b      	ldr	r3, [pc, #364]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a5e      	ldr	r2, [pc, #376]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 800104c:	4013      	ands	r3, r2
 800104e:	0019      	movs	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b55      	ldr	r3, [pc, #340]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0049      	lsls	r1, r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fb7e 	bl	8000768 <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fb79 	bl	8000768 <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e20f      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001084:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4013      	ands	r3, r2
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_RCC_OscConfig+0x338>)
 8001096:	4013      	ands	r3, r2
 8001098:	0019      	movs	r1, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	021a      	lsls	r2, r3, #8
 80010a0:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 80010a2:	430a      	orrs	r2, r1
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	e01b      	b.n	80010e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	4949      	ldr	r1, [pc, #292]	; (80011d4 <HAL_RCC_OscConfig+0x34c>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b4:	f7ff fb58 	bl	8000768 <HAL_GetTick>
 80010b8:	0003      	movs	r3, r0
 80010ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fb53 	bl	8000768 <HAL_GetTick>
 80010c2:	0002      	movs	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e1e9      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d0:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4013      	ands	r3, r2
 80010da:	d1f0      	bne.n	80010be <HAL_RCC_OscConfig+0x236>
 80010dc:	e000      	b.n	80010e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2208      	movs	r2, #8
 80010e6:	4013      	ands	r3, r2
 80010e8:	d047      	beq.n	800117a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2238      	movs	r2, #56	; 0x38
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b18      	cmp	r3, #24
 80010f4:	d10a      	bne.n	800110c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010f6:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	2202      	movs	r2, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	d03c      	beq.n	800117a <HAL_RCC_OscConfig+0x2f2>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d138      	bne.n	800117a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e1cb      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d019      	beq.n	8001148 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001116:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 800111a:	2101      	movs	r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fb22 	bl	8000768 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112a:	f7ff fb1d 	bl	8000768 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1b3      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 800113e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001140:	2202      	movs	r2, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d0f1      	beq.n	800112a <HAL_RCC_OscConfig+0x2a2>
 8001146:	e018      	b.n	800117a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 800114a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001154:	f7ff fb08 	bl	8000768 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff fb03 	bl	8000768 <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e199      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001174:	2202      	movs	r2, #2
 8001176:	4013      	ands	r3, r2
 8001178:	d1f1      	bne.n	800115e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2204      	movs	r2, #4
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x2fe>
 8001184:	e0c6      	b.n	8001314 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	231f      	movs	r3, #31
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2238      	movs	r2, #56	; 0x38
 8001194:	4013      	ands	r3, r2
 8001196:	2b20      	cmp	r3, #32
 8001198:	d11e      	bne.n	80011d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_RCC_OscConfig+0x32c>)
 800119c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d100      	bne.n	80011a6 <HAL_RCC_OscConfig+0x31e>
 80011a4:	e0b6      	b.n	8001314 <HAL_RCC_OscConfig+0x48c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d000      	beq.n	80011b0 <HAL_RCC_OscConfig+0x328>
 80011ae:	e0b1      	b.n	8001314 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e177      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
 80011b4:	40021000 	.word	0x40021000
 80011b8:	fffeffff 	.word	0xfffeffff
 80011bc:	fffbffff 	.word	0xfffbffff
 80011c0:	ffff80ff 	.word	0xffff80ff
 80011c4:	ffffc7ff 	.word	0xffffc7ff
 80011c8:	00f42400 	.word	0x00f42400
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004
 80011d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011d8:	4bb4      	ldr	r3, [pc, #720]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80011da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	055b      	lsls	r3, r3, #21
 80011e0:	4013      	ands	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_OscConfig+0x360>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x362>
 80011e8:	2300      	movs	r3, #0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d011      	beq.n	8001212 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4baf      	ldr	r3, [pc, #700]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80011f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011f2:	4bae      	ldr	r3, [pc, #696]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	0549      	lsls	r1, r1, #21
 80011f8:	430a      	orrs	r2, r1
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80011fc:	4bab      	ldr	r3, [pc, #684]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80011fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	055b      	lsls	r3, r3, #21
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800120a:	231f      	movs	r3, #31
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001212:	4ba7      	ldr	r3, [pc, #668]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4013      	ands	r3, r2
 800121c:	d11a      	bne.n	8001254 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800121e:	4ba4      	ldr	r3, [pc, #656]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4ba3      	ldr	r3, [pc, #652]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0049      	lsls	r1, r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800122c:	f7ff fa9c 	bl	8000768 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fa97 	bl	8000768 <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e12d      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001248:	4b99      	ldr	r3, [pc, #612]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4013      	ands	r3, r2
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x3e2>
 800125c:	4b93      	ldr	r3, [pc, #588]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800125e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001260:	4b92      	ldr	r3, [pc, #584]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	65da      	str	r2, [r3, #92]	; 0x5c
 8001268:	e01c      	b.n	80012a4 <HAL_RCC_OscConfig+0x41c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b05      	cmp	r3, #5
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x404>
 8001272:	4b8e      	ldr	r3, [pc, #568]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001276:	4b8d      	ldr	r3, [pc, #564]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001278:	2104      	movs	r1, #4
 800127a:	430a      	orrs	r2, r1
 800127c:	65da      	str	r2, [r3, #92]	; 0x5c
 800127e:	4b8b      	ldr	r3, [pc, #556]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001282:	4b8a      	ldr	r3, [pc, #552]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001284:	2101      	movs	r1, #1
 8001286:	430a      	orrs	r2, r1
 8001288:	65da      	str	r2, [r3, #92]	; 0x5c
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0x41c>
 800128c:	4b87      	ldr	r3, [pc, #540]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800128e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001290:	4b86      	ldr	r3, [pc, #536]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001292:	2101      	movs	r1, #1
 8001294:	438a      	bics	r2, r1
 8001296:	65da      	str	r2, [r3, #92]	; 0x5c
 8001298:	4b84      	ldr	r3, [pc, #528]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800129a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800129c:	4b83      	ldr	r3, [pc, #524]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800129e:	2104      	movs	r1, #4
 80012a0:	438a      	bics	r2, r1
 80012a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d014      	beq.n	80012d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fa5c 	bl	8000768 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b4:	e009      	b.n	80012ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b6:	f7ff fa57 	bl	8000768 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	4a7c      	ldr	r2, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x62c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e0ec      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ca:	4b78      	ldr	r3, [pc, #480]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	2202      	movs	r2, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x42e>
 80012d4:	e013      	b.n	80012fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fa47 	bl	8000768 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012de:	e009      	b.n	80012f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fa42 	bl	8000768 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4a72      	ldr	r2, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x62c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0d7      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012f4:	4b6d      	ldr	r3, [pc, #436]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	2202      	movs	r2, #2
 80012fa:	4013      	ands	r3, r2
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012fe:	231f      	movs	r3, #31
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001308:	4b68      	ldr	r3, [pc, #416]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800130a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800130c:	4b67      	ldr	r3, [pc, #412]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800130e:	496a      	ldr	r1, [pc, #424]	; (80014b8 <HAL_RCC_OscConfig+0x630>)
 8001310:	400a      	ands	r2, r1
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x496>
 800131c:	e0c1      	b.n	80014a2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2238      	movs	r2, #56	; 0x38
 8001324:	4013      	ands	r3, r2
 8001326:	2b10      	cmp	r3, #16
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x4a4>
 800132a:	e081      	b.n	8001430 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d156      	bne.n	80013e2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001334:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800133a:	4960      	ldr	r1, [pc, #384]	; (80014bc <HAL_RCC_OscConfig+0x634>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fa12 	bl	8000768 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134a:	f7ff fa0d 	bl	8000768 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0a3      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800135c:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	049b      	lsls	r3, r3, #18
 8001364:	4013      	ands	r3, r2
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4a54      	ldr	r2, [pc, #336]	; (80014c0 <HAL_RCC_OscConfig+0x638>)
 800136e:	4013      	ands	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1a      	ldr	r2, [r3, #32]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001394:	431a      	orrs	r2, r3
 8001396:	4b45      	ldr	r3, [pc, #276]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001398:	430a      	orrs	r2, r1
 800139a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	0449      	lsls	r1, r1, #17
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013aa:	4b40      	ldr	r3, [pc, #256]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0549      	lsls	r1, r1, #21
 80013b4:	430a      	orrs	r2, r1
 80013b6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff f9d6 	bl	8000768 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff f9d1 	bl	8000768 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e067      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	049b      	lsls	r3, r3, #18
 80013dc:	4013      	ands	r3, r2
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x53a>
 80013e0:	e05f      	b.n	80014a2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b32      	ldr	r3, [pc, #200]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013e8:	4934      	ldr	r1, [pc, #208]	; (80014bc <HAL_RCC_OscConfig+0x634>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013f4:	2103      	movs	r1, #3
 80013f6:	438a      	bics	r2, r1
 80013f8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001400:	4930      	ldr	r1, [pc, #192]	; (80014c4 <HAL_RCC_OscConfig+0x63c>)
 8001402:	400a      	ands	r2, r1
 8001404:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff f9af 	bl	8000768 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff f9aa 	bl	8000768 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e040      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	049b      	lsls	r3, r3, #18
 800142a:	4013      	ands	r3, r2
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x588>
 800142e:	e038      	b.n	80014a2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e033      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_RCC_OscConfig+0x624>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2203      	movs	r2, #3
 8001446:	401a      	ands	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	429a      	cmp	r2, r3
 800144e:	d126      	bne.n	800149e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2270      	movs	r2, #112	; 0x70
 8001454:	401a      	ands	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d11f      	bne.n	800149e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	23fe      	movs	r3, #254	; 0xfe
 8001462:	01db      	lsls	r3, r3, #7
 8001464:	401a      	ands	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d116      	bne.n	800149e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	23f8      	movs	r3, #248	; 0xf8
 8001474:	039b      	lsls	r3, r3, #14
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d10e      	bne.n	800149e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	23e0      	movs	r3, #224	; 0xe0
 8001484:	051b      	lsls	r3, r3, #20
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	0f5b      	lsrs	r3, r3, #29
 8001494:	075a      	lsls	r2, r3, #29
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800149a:	429a      	cmp	r2, r3
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b008      	add	sp, #32
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40007000 	.word	0x40007000
 80014b4:	00001388 	.word	0x00001388
 80014b8:	efffffff 	.word	0xefffffff
 80014bc:	feffffff 	.word	0xfeffffff
 80014c0:	11c1808c 	.word	0x11c1808c
 80014c4:	eefeffff 	.word	0xeefeffff

080014c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0e9      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_ClockConfig+0x1f0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2207      	movs	r2, #7
 80014e2:	4013      	ands	r3, r2
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d91e      	bls.n	8001528 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <HAL_RCC_ClockConfig+0x1f0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2207      	movs	r2, #7
 80014f0:	4393      	bics	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_RCC_ClockConfig+0x1f0>)
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014fc:	f7ff f934 	bl	8000768 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001504:	e009      	b.n	800151a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001506:	f7ff f92f 	bl	8000768 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	4a6a      	ldr	r2, [pc, #424]	; (80016bc <HAL_RCC_ClockConfig+0x1f4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0ca      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800151a:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2207      	movs	r2, #7
 8001520:	4013      	ands	r3, r2
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d1ee      	bne.n	8001506 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2202      	movs	r2, #2
 800152e:	4013      	ands	r3, r2
 8001530:	d015      	beq.n	800155e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2204      	movs	r2, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d006      	beq.n	800154a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800153c:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 8001542:	21e0      	movs	r1, #224	; 0xe0
 8001544:	01c9      	lsls	r1, r1, #7
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4a5d      	ldr	r2, [pc, #372]	; (80016c4 <HAL_RCC_ClockConfig+0x1fc>)
 8001550:	4013      	ands	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 800155a:	430a      	orrs	r2, r1
 800155c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	4013      	ands	r3, r2
 8001566:	d057      	beq.n	8001618 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	029b      	lsls	r3, r3, #10
 8001578:	4013      	ands	r3, r2
 800157a:	d12b      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e097      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d107      	bne.n	8001598 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001588:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	049b      	lsls	r3, r3, #18
 8001590:	4013      	ands	r3, r2
 8001592:	d11f      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e08b      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d107      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4013      	ands	r3, r2
 80015aa:	d113      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e07f      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b8:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 80015ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d108      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e074      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 80015c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ca:	2202      	movs	r2, #2
 80015cc:	4013      	ands	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e06d      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015d4:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2207      	movs	r2, #7
 80015da:	4393      	bics	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015e8:	f7ff f8be 	bl	8000768 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f0:	e009      	b.n	8001606 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f2:	f7ff f8b9 	bl	8000768 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_RCC_ClockConfig+0x1f4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e054      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2238      	movs	r2, #56	; 0x38
 800160c:	401a      	ands	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	429a      	cmp	r2, r3
 8001616:	d1ec      	bne.n	80015f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_ClockConfig+0x1f0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2207      	movs	r2, #7
 800161e:	4013      	ands	r3, r2
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d21e      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2207      	movs	r2, #7
 800162c:	4393      	bics	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001638:	f7ff f896 	bl	8000768 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001640:	e009      	b.n	8001656 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001642:	f7ff f891 	bl	8000768 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_RCC_ClockConfig+0x1f4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e02c      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2207      	movs	r2, #7
 800165c:	4013      	ands	r3, r2
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2204      	movs	r2, #4
 800166a:	4013      	ands	r3, r2
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <HAL_RCC_ClockConfig+0x200>)
 8001674:	4013      	ands	r3, r2
 8001676:	0019      	movs	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001682:	f000 f829 	bl	80016d8 <HAL_RCC_GetSysClockFreq>
 8001686:	0001      	movs	r1, r0
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_RCC_ClockConfig+0x1f8>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	220f      	movs	r2, #15
 8001690:	401a      	ands	r2, r3
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_RCC_ClockConfig+0x204>)
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	58d3      	ldr	r3, [r2, r3]
 8001698:	221f      	movs	r2, #31
 800169a:	4013      	ands	r3, r2
 800169c:	000a      	movs	r2, r1
 800169e:	40da      	lsrs	r2, r3
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 80016a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff f801 	bl	80006b0 <HAL_InitTick>
 80016ae:	0003      	movs	r3, r0
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40022000 	.word	0x40022000
 80016bc:	00001388 	.word	0x00001388
 80016c0:	40021000 	.word	0x40021000
 80016c4:	fffff0ff 	.word	0xfffff0ff
 80016c8:	ffff8fff 	.word	0xffff8fff
 80016cc:	080021dc 	.word	0x080021dc
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016de:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2238      	movs	r2, #56	; 0x38
 80016e4:	4013      	ands	r3, r2
 80016e6:	d10f      	bne.n	8001708 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0adb      	lsrs	r3, r3, #11
 80016ee:	2207      	movs	r2, #7
 80016f0:	4013      	ands	r3, r2
 80016f2:	2201      	movs	r2, #1
 80016f4:	409a      	lsls	r2, r3
 80016f6:	0013      	movs	r3, r2
 80016f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016fa:	6839      	ldr	r1, [r7, #0]
 80016fc:	4835      	ldr	r0, [pc, #212]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016fe:	f7fe fd03 	bl	8000108 <__udivsi3>
 8001702:	0003      	movs	r3, r0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	e05d      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2238      	movs	r2, #56	; 0x38
 800170e:	4013      	ands	r3, r2
 8001710:	2b08      	cmp	r3, #8
 8001712:	d102      	bne.n	800171a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	e054      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2238      	movs	r2, #56	; 0x38
 8001720:	4013      	ands	r3, r2
 8001722:	2b10      	cmp	r3, #16
 8001724:	d138      	bne.n	8001798 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2203      	movs	r2, #3
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	2207      	movs	r2, #7
 8001738:	4013      	ands	r3, r2
 800173a:	3301      	adds	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d10d      	bne.n	8001760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	4824      	ldr	r0, [pc, #144]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001748:	f7fe fcde 	bl	8000108 <__udivsi3>
 800174c:	0003      	movs	r3, r0
 800174e:	0019      	movs	r1, r3
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	227f      	movs	r2, #127	; 0x7f
 8001758:	4013      	ands	r3, r2
 800175a:	434b      	muls	r3, r1
 800175c:	617b      	str	r3, [r7, #20]
        break;
 800175e:	e00d      	b.n	800177c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	481c      	ldr	r0, [pc, #112]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001764:	f7fe fcd0 	bl	8000108 <__udivsi3>
 8001768:	0003      	movs	r3, r0
 800176a:	0019      	movs	r1, r3
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	227f      	movs	r2, #127	; 0x7f
 8001774:	4013      	ands	r3, r2
 8001776:	434b      	muls	r3, r1
 8001778:	617b      	str	r3, [r7, #20]
        break;
 800177a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0f5b      	lsrs	r3, r3, #29
 8001782:	2207      	movs	r2, #7
 8001784:	4013      	ands	r3, r2
 8001786:	3301      	adds	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	6978      	ldr	r0, [r7, #20]
 800178e:	f7fe fcbb 	bl	8000108 <__udivsi3>
 8001792:	0003      	movs	r3, r0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e015      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2238      	movs	r2, #56	; 0x38
 800179e:	4013      	ands	r3, r2
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d103      	bne.n	80017ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2238      	movs	r2, #56	; 0x38
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b18      	cmp	r3, #24
 80017b6:	d103      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017b8:	23fa      	movs	r3, #250	; 0xfa
 80017ba:	01db      	lsls	r3, r3, #7
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	e001      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017c4:	693b      	ldr	r3, [r7, #16]
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b006      	add	sp, #24
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40021000 	.word	0x40021000
 80017d4:	00f42400 	.word	0x00f42400
 80017d8:	007a1200 	.word	0x007a1200

080017dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e04a      	b.n	8001884 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	223d      	movs	r2, #61	; 0x3d
 80017f2:	5c9b      	ldrb	r3, [r3, r2]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d107      	bne.n	800180a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	223c      	movs	r2, #60	; 0x3c
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f7fe fe8d 	bl	8000524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	223d      	movs	r2, #61	; 0x3d
 800180e:	2102      	movs	r1, #2
 8001810:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3304      	adds	r3, #4
 800181a:	0019      	movs	r1, r3
 800181c:	0010      	movs	r0, r2
 800181e:	f000 f92b 	bl	8001a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2248      	movs	r2, #72	; 0x48
 8001826:	2101      	movs	r1, #1
 8001828:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	223e      	movs	r2, #62	; 0x3e
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	223f      	movs	r2, #63	; 0x3f
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2240      	movs	r2, #64	; 0x40
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2241      	movs	r2, #65	; 0x41
 8001846:	2101      	movs	r1, #1
 8001848:	5499      	strb	r1, [r3, r2]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2242      	movs	r2, #66	; 0x42
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2243      	movs	r2, #67	; 0x43
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2244      	movs	r2, #68	; 0x44
 800185e:	2101      	movs	r1, #1
 8001860:	5499      	strb	r1, [r3, r2]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2245      	movs	r2, #69	; 0x45
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2246      	movs	r2, #70	; 0x46
 800186e:	2101      	movs	r1, #1
 8001870:	5499      	strb	r1, [r3, r2]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2247      	movs	r2, #71	; 0x47
 8001876:	2101      	movs	r1, #1
 8001878:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	223d      	movs	r2, #61	; 0x3d
 800187e:	2101      	movs	r1, #1
 8001880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	223c      	movs	r2, #60	; 0x3c
 800189c:	5c9b      	ldrb	r3, [r3, r2]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0df      	b.n	8001a66 <HAL_TIM_PWM_ConfigChannel+0x1da>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	223c      	movs	r2, #60	; 0x3c
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b14      	cmp	r3, #20
 80018b2:	d900      	bls.n	80018b6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80018b4:	e0d1      	b.n	8001a5a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	009a      	lsls	r2, r3, #2
 80018ba:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80018bc:	18d3      	adds	r3, r2, r3
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	0011      	movs	r1, r2
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 f94a 	bl	8001b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2108      	movs	r1, #8
 80018dc:	430a      	orrs	r2, r1
 80018de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2104      	movs	r1, #4
 80018ec:	438a      	bics	r2, r1
 80018ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6999      	ldr	r1, [r3, #24]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	619a      	str	r2, [r3, #24]
      break;
 8001902:	e0ab      	b.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	0011      	movs	r1, r2
 800190c:	0018      	movs	r0, r3
 800190e:	f000 f9a9 	bl	8001c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	0109      	lsls	r1, r1, #4
 8001920:	430a      	orrs	r2, r1
 8001922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4951      	ldr	r1, [pc, #324]	; (8001a74 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001930:	400a      	ands	r2, r1
 8001932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6999      	ldr	r1, [r3, #24]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	619a      	str	r2, [r3, #24]
      break;
 8001948:	e088      	b.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	0011      	movs	r1, r2
 8001952:	0018      	movs	r0, r3
 8001954:	f000 fa04 	bl	8001d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2108      	movs	r1, #8
 8001964:	430a      	orrs	r2, r1
 8001966:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2104      	movs	r1, #4
 8001974:	438a      	bics	r2, r1
 8001976:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69d9      	ldr	r1, [r3, #28]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	61da      	str	r2, [r3, #28]
      break;
 800198a:	e067      	b.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f000 fa65 	bl	8001e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69da      	ldr	r2, [r3, #28]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0109      	lsls	r1, r1, #4
 80019a8:	430a      	orrs	r2, r1
 80019aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	492f      	ldr	r1, [pc, #188]	; (8001a74 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69d9      	ldr	r1, [r3, #28]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	021a      	lsls	r2, r3, #8
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	61da      	str	r2, [r3, #28]
      break;
 80019d0:	e044      	b.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	0011      	movs	r1, r2
 80019da:	0018      	movs	r0, r3
 80019dc:	f000 faa6 	bl	8001f2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2108      	movs	r1, #8
 80019ec:	430a      	orrs	r2, r1
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2104      	movs	r1, #4
 80019fc:	438a      	bics	r2, r1
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001a12:	e023      	b.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	0011      	movs	r1, r2
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f000 fadf 	bl	8001fe0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	0109      	lsls	r1, r1, #4
 8001a30:	430a      	orrs	r2, r1
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	490d      	ldr	r1, [pc, #52]	; (8001a74 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	021a      	lsls	r2, r3, #8
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001a58:	e000      	b.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8001a5a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	223c      	movs	r2, #60	; 0x3c
 8001a60:	2100      	movs	r1, #0
 8001a62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	0800221c 	.word	0x0800221c
 8001a74:	fffffbff 	.word	0xfffffbff

08001a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a30      	ldr	r2, [pc, #192]	; (8001b4c <TIM_Base_SetConfig+0xd4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d008      	beq.n	8001aa2 <TIM_Base_SetConfig+0x2a>
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	05db      	lsls	r3, r3, #23
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d003      	beq.n	8001aa2 <TIM_Base_SetConfig+0x2a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <TIM_Base_SetConfig+0xd8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d108      	bne.n	8001ab4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2270      	movs	r2, #112	; 0x70
 8001aa6:	4393      	bics	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <TIM_Base_SetConfig+0xd4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d014      	beq.n	8001ae6 <TIM_Base_SetConfig+0x6e>
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d00f      	beq.n	8001ae6 <TIM_Base_SetConfig+0x6e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <TIM_Base_SetConfig+0xd8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00b      	beq.n	8001ae6 <TIM_Base_SetConfig+0x6e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <TIM_Base_SetConfig+0xdc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d007      	beq.n	8001ae6 <TIM_Base_SetConfig+0x6e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <TIM_Base_SetConfig+0xe0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d003      	beq.n	8001ae6 <TIM_Base_SetConfig+0x6e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <TIM_Base_SetConfig+0xe4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d108      	bne.n	8001af8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <TIM_Base_SetConfig+0xe8>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	4393      	bics	r3, r2
 8001afe:	001a      	movs	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <TIM_Base_SetConfig+0xd4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <TIM_Base_SetConfig+0xbe>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <TIM_Base_SetConfig+0xe0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d003      	beq.n	8001b36 <TIM_Base_SetConfig+0xbe>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <TIM_Base_SetConfig+0xe4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d103      	bne.n	8001b3e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	615a      	str	r2, [r3, #20]
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40012c00 	.word	0x40012c00
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40002000 	.word	0x40002000
 8001b58:	40014400 	.word	0x40014400
 8001b5c:	40014800 	.word	0x40014800
 8001b60:	fffffcff 	.word	0xfffffcff

08001b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4393      	bics	r3, r2
 8001b76:	001a      	movs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a2e      	ldr	r2, [pc, #184]	; (8001c4c <TIM_OC1_SetConfig+0xe8>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2202      	movs	r2, #2
 8001bac:	4393      	bics	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <TIM_OC1_SetConfig+0xec>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <TIM_OC1_SetConfig+0x6e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <TIM_OC1_SetConfig+0xf0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d003      	beq.n	8001bd2 <TIM_OC1_SetConfig+0x6e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <TIM_OC1_SetConfig+0xf4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10c      	bne.n	8001bec <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2204      	movs	r2, #4
 8001be8:	4393      	bics	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <TIM_OC1_SetConfig+0xec>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <TIM_OC1_SetConfig+0xa0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <TIM_OC1_SetConfig+0xf0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d003      	beq.n	8001c04 <TIM_OC1_SetConfig+0xa0>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <TIM_OC1_SetConfig+0xf4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d111      	bne.n	8001c28 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <TIM_OC1_SetConfig+0xf8>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <TIM_OC1_SetConfig+0xfc>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	621a      	str	r2, [r3, #32]
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b006      	add	sp, #24
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	fffeff8f 	.word	0xfffeff8f
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40014400 	.word	0x40014400
 8001c58:	40014800 	.word	0x40014800
 8001c5c:	fffffeff 	.word	0xfffffeff
 8001c60:	fffffdff 	.word	0xfffffdff

08001c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	2210      	movs	r2, #16
 8001c74:	4393      	bics	r3, r2
 8001c76:	001a      	movs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <TIM_OC2_SetConfig+0xe0>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <TIM_OC2_SetConfig+0xe4>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2220      	movs	r2, #32
 8001cae:	4393      	bics	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <TIM_OC2_SetConfig+0xe8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10d      	bne.n	8001ce2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	4393      	bics	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	4393      	bics	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <TIM_OC2_SetConfig+0xe8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <TIM_OC2_SetConfig+0x96>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <TIM_OC2_SetConfig+0xec>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d003      	beq.n	8001cfa <TIM_OC2_SetConfig+0x96>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <TIM_OC2_SetConfig+0xf0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d113      	bne.n	8001d22 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <TIM_OC2_SetConfig+0xf4>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <TIM_OC2_SetConfig+0xf8>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	621a      	str	r2, [r3, #32]
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b006      	add	sp, #24
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	feff8fff 	.word	0xfeff8fff
 8001d48:	fffffcff 	.word	0xfffffcff
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40014400 	.word	0x40014400
 8001d54:	40014800 	.word	0x40014800
 8001d58:	fffffbff 	.word	0xfffffbff
 8001d5c:	fffff7ff 	.word	0xfffff7ff

08001d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <TIM_OC3_SetConfig+0xdc>)
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <TIM_OC3_SetConfig+0xe0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2203      	movs	r2, #3
 8001d94:	4393      	bics	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <TIM_OC3_SetConfig+0xe4>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <TIM_OC3_SetConfig+0xe8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10d      	bne.n	8001dda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <TIM_OC3_SetConfig+0xec>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <TIM_OC3_SetConfig+0xf0>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a1a      	ldr	r2, [pc, #104]	; (8001e48 <TIM_OC3_SetConfig+0xe8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <TIM_OC3_SetConfig+0x92>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <TIM_OC3_SetConfig+0xf4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d003      	beq.n	8001df2 <TIM_OC3_SetConfig+0x92>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <TIM_OC3_SetConfig+0xf8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d113      	bne.n	8001e1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <TIM_OC3_SetConfig+0xfc>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <TIM_OC3_SetConfig+0x100>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	621a      	str	r2, [r3, #32]
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b006      	add	sp, #24
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	fffffeff 	.word	0xfffffeff
 8001e40:	fffeff8f 	.word	0xfffeff8f
 8001e44:	fffffdff 	.word	0xfffffdff
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	fffff7ff 	.word	0xfffff7ff
 8001e50:	fffffbff 	.word	0xfffffbff
 8001e54:	40014400 	.word	0x40014400
 8001e58:	40014800 	.word	0x40014800
 8001e5c:	ffffefff 	.word	0xffffefff
 8001e60:	ffffdfff 	.word	0xffffdfff

08001e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <TIM_OC4_SetConfig+0xa8>)
 8001e74:	401a      	ands	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <TIM_OC4_SetConfig+0xac>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <TIM_OC4_SetConfig+0xb0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	; (8001f18 <TIM_OC4_SetConfig+0xb4>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	031b      	lsls	r3, r3, #12
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <TIM_OC4_SetConfig+0xb8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d007      	beq.n	8001ed4 <TIM_OC4_SetConfig+0x70>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <TIM_OC4_SetConfig+0xbc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d003      	beq.n	8001ed4 <TIM_OC4_SetConfig+0x70>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <TIM_OC4_SetConfig+0xc0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d109      	bne.n	8001ee8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <TIM_OC4_SetConfig+0xc4>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	621a      	str	r2, [r3, #32]
}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b006      	add	sp, #24
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	ffffefff 	.word	0xffffefff
 8001f10:	feff8fff 	.word	0xfeff8fff
 8001f14:	fffffcff 	.word	0xfffffcff
 8001f18:	ffffdfff 	.word	0xffffdfff
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40014400 	.word	0x40014400
 8001f24:	40014800 	.word	0x40014800
 8001f28:	ffffbfff 	.word	0xffffbfff

08001f2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <TIM_OC5_SetConfig+0x9c>)
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <TIM_OC5_SetConfig+0xa0>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <TIM_OC5_SetConfig+0xa4>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <TIM_OC5_SetConfig+0xa8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <TIM_OC5_SetConfig+0x66>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <TIM_OC5_SetConfig+0xac>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <TIM_OC5_SetConfig+0x66>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <TIM_OC5_SetConfig+0xb0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d109      	bne.n	8001fa6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <TIM_OC5_SetConfig+0x9c>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	621a      	str	r2, [r3, #32]
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b006      	add	sp, #24
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	fffeffff 	.word	0xfffeffff
 8001fcc:	fffeff8f 	.word	0xfffeff8f
 8001fd0:	fffdffff 	.word	0xfffdffff
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40014400 	.word	0x40014400
 8001fdc:	40014800 	.word	0x40014800

08001fe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a24      	ldr	r2, [pc, #144]	; (8002080 <TIM_OC6_SetConfig+0xa0>)
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <TIM_OC6_SetConfig+0xa4>)
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <TIM_OC6_SetConfig+0xa8>)
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	051b      	lsls	r3, r3, #20
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a16      	ldr	r2, [pc, #88]	; (800208c <TIM_OC6_SetConfig+0xac>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d007      	beq.n	8002048 <TIM_OC6_SetConfig+0x68>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a15      	ldr	r2, [pc, #84]	; (8002090 <TIM_OC6_SetConfig+0xb0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d003      	beq.n	8002048 <TIM_OC6_SetConfig+0x68>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <TIM_OC6_SetConfig+0xb4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d109      	bne.n	800205c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <TIM_OC6_SetConfig+0xb8>)
 800204c:	4013      	ands	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	621a      	str	r2, [r3, #32]
}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b006      	add	sp, #24
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	ffefffff 	.word	0xffefffff
 8002084:	feff8fff 	.word	0xfeff8fff
 8002088:	ffdfffff 	.word	0xffdfffff
 800208c:	40012c00 	.word	0x40012c00
 8002090:	40014400 	.word	0x40014400
 8002094:	40014800 	.word	0x40014800
 8002098:	fffbffff 	.word	0xfffbffff

0800209c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	223c      	movs	r2, #60	; 0x3c
 80020aa:	5c9b      	ldrb	r3, [r3, r2]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e050      	b.n	8002156 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	223c      	movs	r2, #60	; 0x3c
 80020b8:	2101      	movs	r1, #1
 80020ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	223d      	movs	r2, #61	; 0x3d
 80020c0:	2102      	movs	r1, #2
 80020c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2270      	movs	r2, #112	; 0x70
 80020f4:	4393      	bics	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a14      	ldr	r2, [pc, #80]	; (8002160 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00a      	beq.n	800212a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	05db      	lsls	r3, r3, #23
 800211c:	429a      	cmp	r2, r3
 800211e:	d004      	beq.n	800212a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10c      	bne.n	8002144 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	4393      	bics	r3, r2
 8002130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	4313      	orrs	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	223d      	movs	r2, #61	; 0x3d
 8002148:	2101      	movs	r1, #1
 800214a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	223c      	movs	r2, #60	; 0x3c
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	40012c00 	.word	0x40012c00
 8002164:	ff0fffff 	.word	0xff0fffff
 8002168:	40000400 	.word	0x40000400

0800216c <__libc_init_array>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2600      	movs	r6, #0
 8002170:	4d0c      	ldr	r5, [pc, #48]	; (80021a4 <__libc_init_array+0x38>)
 8002172:	4c0d      	ldr	r4, [pc, #52]	; (80021a8 <__libc_init_array+0x3c>)
 8002174:	1b64      	subs	r4, r4, r5
 8002176:	10a4      	asrs	r4, r4, #2
 8002178:	42a6      	cmp	r6, r4
 800217a:	d109      	bne.n	8002190 <__libc_init_array+0x24>
 800217c:	2600      	movs	r6, #0
 800217e:	f000 f821 	bl	80021c4 <_init>
 8002182:	4d0a      	ldr	r5, [pc, #40]	; (80021ac <__libc_init_array+0x40>)
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <__libc_init_array+0x44>)
 8002186:	1b64      	subs	r4, r4, r5
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	42a6      	cmp	r6, r4
 800218c:	d105      	bne.n	800219a <__libc_init_array+0x2e>
 800218e:	bd70      	pop	{r4, r5, r6, pc}
 8002190:	00b3      	lsls	r3, r6, #2
 8002192:	58eb      	ldr	r3, [r5, r3]
 8002194:	4798      	blx	r3
 8002196:	3601      	adds	r6, #1
 8002198:	e7ee      	b.n	8002178 <__libc_init_array+0xc>
 800219a:	00b3      	lsls	r3, r6, #2
 800219c:	58eb      	ldr	r3, [r5, r3]
 800219e:	4798      	blx	r3
 80021a0:	3601      	adds	r6, #1
 80021a2:	e7f2      	b.n	800218a <__libc_init_array+0x1e>
 80021a4:	08002270 	.word	0x08002270
 80021a8:	08002270 	.word	0x08002270
 80021ac:	08002270 	.word	0x08002270
 80021b0:	08002274 	.word	0x08002274

080021b4 <memset>:
 80021b4:	0003      	movs	r3, r0
 80021b6:	1882      	adds	r2, r0, r2
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d100      	bne.n	80021be <memset+0xa>
 80021bc:	4770      	bx	lr
 80021be:	7019      	strb	r1, [r3, #0]
 80021c0:	3301      	adds	r3, #1
 80021c2:	e7f9      	b.n	80021b8 <memset+0x4>

080021c4 <_init>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr

080021d0 <_fini>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr
