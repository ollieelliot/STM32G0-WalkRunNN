
STM32G0_WALKRUN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b08  08002b08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b08  08002b08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b08  08002b08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b0c  08002b0c  00012b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002b1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002b1c  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c71  00000000  00000000  0002d806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0002f478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  000301e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f2a  00000000  00000000  00030e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff14  00000000  00000000  00035d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc5d  00000000  00000000  00045cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d390b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b8  00000000  00000000  000d3960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a5c 	.word	0x08002a5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002a5c 	.word	0x08002a5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fab0 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f936 	bl	800049c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000230:	f000 f874 	bl	800031c <MX_I2C2_Init>
  MX_TIM2_Init();
 8000234:	f000 f8b2 	bl	800039c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4807      	ldr	r0, [pc, #28]	; (800025c <main+0x3c>)
 800023e:	2200      	movs	r2, #0
 8000240:	0019      	movs	r1, r3
 8000242:	f000 fd8d 	bl	8000d60 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4a04      	ldr	r2, [pc, #16]	; (800025c <main+0x3c>)
 800024c:	0019      	movs	r1, r3
 800024e:	0010      	movs	r0, r2
 8000250:	f000 fda3 	bl	8000d9a <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000254:	20c8      	movs	r0, #200	; 0xc8
 8000256:	f000 fb1d 	bl	8000894 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 800025a:	e7f4      	b.n	8000246 <main+0x26>
 800025c:	50000400 	.word	0x50000400

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b093      	sub	sp, #76	; 0x4c
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2410      	movs	r4, #16
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2338      	movs	r3, #56	; 0x38
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 fbeb 	bl	8002a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2310      	movs	r3, #16
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 fbe4 	bl	8002a4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fecf 	bl	800102c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	193b      	adds	r3, r7, r4
 8000290:	2202      	movs	r2, #2
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0052      	lsls	r2, r2, #1
 800029a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800029c:	0021      	movs	r1, r4
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2240      	movs	r2, #64	; 0x40
 80002a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2202      	movs	r2, #2
 80002ae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2202      	movs	r2, #2
 80002b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2208      	movs	r2, #8
 80002c0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	0292      	lsls	r2, r2, #10
 80002c8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0492      	lsls	r2, r2, #18
 80002d0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	0592      	lsls	r2, r2, #22
 80002d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fee5 	bl	80010ac <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002e6:	f000 f91f 	bl	8000528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	003b      	movs	r3, r7
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2202      	movs	r2, #2
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000302:	003b      	movs	r3, r7
 8000304:	2102      	movs	r1, #2
 8000306:	0018      	movs	r0, r3
 8000308:	f001 f9f0 	bl	80016ec <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000310:	f000 f90a 	bl	8000528 <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b013      	add	sp, #76	; 0x4c
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <MX_I2C2_Init+0x74>)
 8000322:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <MX_I2C2_Init+0x78>)
 8000324:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <MX_I2C2_Init+0x74>)
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <MX_I2C2_Init+0x7c>)
 800032a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_I2C2_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_I2C2_Init+0x74>)
 8000334:	2201      	movs	r2, #1
 8000336:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_I2C2_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_I2C2_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_I2C2_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_I2C2_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_I2C2_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MX_I2C2_Init+0x74>)
 8000358:	0018      	movs	r0, r3
 800035a:	f000 fd39 	bl	8000dd0 <HAL_I2C_Init>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000362:	f000 f8e1 	bl	8000528 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <MX_I2C2_Init+0x74>)
 8000368:	2100      	movs	r1, #0
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fdc6 	bl	8000efc <HAL_I2CEx_ConfigAnalogFilter>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000374:	f000 f8d8 	bl	8000528 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <MX_I2C2_Init+0x74>)
 800037a:	2100      	movs	r1, #0
 800037c:	0018      	movs	r0, r3
 800037e:	f000 fe09 	bl	8000f94 <HAL_I2CEx_ConfigDigitalFilter>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000386:	f000 f8cf 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000028 	.word	0x20000028
 8000394:	40005800 	.word	0x40005800
 8000398:	10707dbc 	.word	0x10707dbc

0800039c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08e      	sub	sp, #56	; 0x38
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a2:	2328      	movs	r3, #40	; 0x28
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	0018      	movs	r0, r3
 80003a8:	2310      	movs	r3, #16
 80003aa:	001a      	movs	r2, r3
 80003ac:	2100      	movs	r1, #0
 80003ae:	f002 fb4d 	bl	8002a4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b2:	231c      	movs	r3, #28
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	0018      	movs	r0, r3
 80003b8:	230c      	movs	r3, #12
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f002 fb45 	bl	8002a4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c2:	003b      	movs	r3, r7
 80003c4:	0018      	movs	r0, r3
 80003c6:	231c      	movs	r3, #28
 80003c8:	001a      	movs	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	f002 fb3e 	bl	8002a4c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d0:	4b30      	ldr	r3, [pc, #192]	; (8000494 <MX_TIM2_Init+0xf8>)
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	05d2      	lsls	r2, r2, #23
 80003d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <MX_TIM2_Init+0xf8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <MX_TIM2_Init+0xf8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003e4:	4b2b      	ldr	r3, [pc, #172]	; (8000494 <MX_TIM2_Init+0xf8>)
 80003e6:	4a2c      	ldr	r2, [pc, #176]	; (8000498 <MX_TIM2_Init+0xfc>)
 80003e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ea:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <MX_TIM2_Init+0xf8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f0:	4b28      	ldr	r3, [pc, #160]	; (8000494 <MX_TIM2_Init+0xf8>)
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003f6:	4b27      	ldr	r3, [pc, #156]	; (8000494 <MX_TIM2_Init+0xf8>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 fb01 	bl	8001a00 <HAL_TIM_Base_Init>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000402:	f000 f891 	bl	8000528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000406:	2128      	movs	r1, #40	; 0x28
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2280      	movs	r2, #128	; 0x80
 800040c:	0152      	lsls	r2, r2, #5
 800040e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000410:	187a      	adds	r2, r7, r1
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <MX_TIM2_Init+0xf8>)
 8000414:	0011      	movs	r1, r2
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fdd2 	bl	8001fc0 <HAL_TIM_ConfigClockSource>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000420:	f000 f882 	bl	8000528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_TIM2_Init+0xf8>)
 8000426:	0018      	movs	r0, r3
 8000428:	f001 fb42 	bl	8001ab0 <HAL_TIM_PWM_Init>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000430:	f000 f87a 	bl	8000528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	211c      	movs	r1, #28
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000442:	187a      	adds	r2, r7, r1
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_TIM2_Init+0xf8>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f002 fa5b 	bl	8002904 <HAL_TIMEx_MasterConfigSynchronization>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000452:	f000 f869 	bl	8000528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000456:	003b      	movs	r3, r7
 8000458:	2260      	movs	r2, #96	; 0x60
 800045a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800045c:	003b      	movs	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000462:	003b      	movs	r3, r7
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000468:	003b      	movs	r3, r7
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800046e:	0039      	movs	r1, r7
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_TIM2_Init+0xf8>)
 8000472:	2208      	movs	r2, #8
 8000474:	0018      	movs	r0, r3
 8000476:	f001 fcad 	bl	8001dd4 <HAL_TIM_PWM_ConfigChannel>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800047e:	f000 f853 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <MX_TIM2_Init+0xf8>)
 8000484:	0018      	movs	r0, r3
 8000486:	f000 f8e9 	bl	800065c <HAL_TIM_MspPostInit>

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b00e      	add	sp, #56	; 0x38
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	20000074 	.word	0x20000074
 8000498:	0000ffff 	.word	0x0000ffff

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b089      	sub	sp, #36	; 0x24
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	240c      	movs	r4, #12
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2314      	movs	r3, #20
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f002 facd 	bl	8002a4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_GPIO_Init+0x84>)
 80004b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_GPIO_Init+0x84>)
 80004b8:	2102      	movs	r1, #2
 80004ba:	430a      	orrs	r2, r1
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
 80004be:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_GPIO_Init+0x84>)
 80004c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c2:	2202      	movs	r2, #2
 80004c4:	4013      	ands	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_GPIO_Init+0x84>)
 80004cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_GPIO_Init+0x84>)
 80004d0:	2101      	movs	r1, #1
 80004d2:	430a      	orrs	r2, r1
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_GPIO_Init+0x84>)
 80004d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004da:	2201      	movs	r2, #1
 80004dc:	4013      	ands	r3, r2
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	480f      	ldr	r0, [pc, #60]	; (8000524 <MX_GPIO_Init+0x88>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	0019      	movs	r1, r3
 80004ec:	f000 fc38 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	0092      	lsls	r2, r2, #2
 80004f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2201      	movs	r2, #1
 80004fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 800050a:	193b      	adds	r3, r7, r4
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <MX_GPIO_Init+0x88>)
 800050e:	0019      	movs	r1, r3
 8000510:	0010      	movs	r0, r2
 8000512:	f000 fac1 	bl	8000a98 <HAL_GPIO_Init>

}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b009      	add	sp, #36	; 0x24
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40021000 	.word	0x40021000
 8000524:	50000400 	.word	0x50000400

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x44>)
 800053c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_MspInit+0x44>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	641a      	str	r2, [r3, #64]	; 0x40
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x44>)
 8000548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x44>)
 8000554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <HAL_MspInit+0x44>)
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0549      	lsls	r1, r1, #21
 800055c:	430a      	orrs	r2, r1
 800055e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_MspInit+0x44>)
 8000562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	055b      	lsls	r3, r3, #21
 8000568:	4013      	ands	r3, r2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b08b      	sub	sp, #44	; 0x2c
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	2414      	movs	r4, #20
 8000586:	193b      	adds	r3, r7, r4
 8000588:	0018      	movs	r0, r3
 800058a:	2314      	movs	r3, #20
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f002 fa5c 	bl	8002a4c <memset>
  if(hi2c->Instance==I2C2)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a1c      	ldr	r2, [pc, #112]	; (800060c <HAL_I2C_MspInit+0x90>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d131      	bne.n	8000602 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <HAL_I2C_MspInit+0x94>)
 80005a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <HAL_I2C_MspInit+0x94>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	430a      	orrs	r2, r1
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <HAL_I2C_MspInit+0x94>)
 80005ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	22c0      	movs	r2, #192	; 0xc0
 80005ba:	0152      	lsls	r2, r2, #5
 80005bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2212      	movs	r2, #18
 80005c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2206      	movs	r2, #6
 80005d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	187a      	adds	r2, r7, r1
 80005da:	23a0      	movs	r3, #160	; 0xa0
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fa59 	bl	8000a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_I2C_MspInit+0x94>)
 80005e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_I2C_MspInit+0x94>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	03c9      	lsls	r1, r1, #15
 80005f0:	430a      	orrs	r2, r1
 80005f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_I2C_MspInit+0x94>)
 80005f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	03db      	lsls	r3, r3, #15
 80005fc:	4013      	ands	r3, r2
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b00b      	add	sp, #44	; 0x2c
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40005800 	.word	0x40005800
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	429a      	cmp	r2, r3
 8000626:	d113      	bne.n	8000650 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <HAL_TIM_Base_MspInit+0x44>)
 800062a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_TIM_Base_MspInit+0x44>)
 800062e:	2101      	movs	r1, #1
 8000630:	430a      	orrs	r2, r1
 8000632:	63da      	str	r2, [r3, #60]	; 0x3c
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_TIM_Base_MspInit+0x44>)
 8000636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000638:	2201      	movs	r2, #1
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	200f      	movs	r0, #15
 8000646:	f000 f9f5 	bl	8000a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800064a:	200f      	movs	r0, #15
 800064c:	f000 fa07 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b004      	add	sp, #16
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	240c      	movs	r4, #12
 8000666:	193b      	adds	r3, r7, r4
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 f9ec 	bl	8002a4c <memset>
  if(htim->Instance==TIM2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	429a      	cmp	r2, r3
 800067e:	d122      	bne.n	80006c6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_TIM_MspPostInit+0x74>)
 8000682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_TIM_MspPostInit+0x74>)
 8000686:	2101      	movs	r1, #1
 8000688:	430a      	orrs	r2, r1
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_TIM_MspPostInit+0x74>)
 800068e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000690:	2201      	movs	r2, #1
 8000692:	4013      	ands	r3, r2
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000698:	0021      	movs	r1, r4
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2204      	movs	r2, #4
 800069e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2202      	movs	r2, #2
 80006a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	23a0      	movs	r3, #160	; 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 f9e9 	bl	8000a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b009      	add	sp, #36	; 0x24
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	40021000 	.word	0x40021000

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <NMI_Handler+0x4>

080006da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <HardFault_Handler+0x4>

080006e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f8:	f000 f8b0 	bl	800085c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <TIM2_IRQHandler+0x14>)
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fa30 	bl	8001b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000074 	.word	0x20000074

0800071c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <SystemInit+0x14>)
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	0512      	lsls	r2, r2, #20
 8000726:	609a      	str	r2, [r3, #8]
#endif
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000736:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000738:	f7ff fff0 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopForever+0x6>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopForever+0xe>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopForever+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000762:	f002 f94f 	bl	8002a04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000766:	f7ff fd5b 	bl	8000220 <main>

0800076a <LoopForever>:

LoopForever:
  b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
  ldr   r0, =_estack
 800076c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000778:	08002b10 	.word	0x08002b10
  ldr r2, =_sbss
 800077c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000780:	200000c4 	.word	0x200000c4

08000784 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_IRQHandler>
	...

08000788 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_Init+0x3c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_Init+0x3c>)
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	0049      	lsls	r1, r1, #1
 800079e:	430a      	orrs	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f810 	bl	80007c8 <HAL_InitTick>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d003      	beq.n	80007b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e001      	b.n	80007b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007b4:	f7ff febe 	bl	8000534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d0:	230f      	movs	r3, #15
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_InitTick+0x88>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d02b      	beq.n	8000838 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <HAL_InitTick+0x8c>)
 80007e2:	681c      	ldr	r4, [r3, #0]
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <HAL_InitTick+0x88>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	0019      	movs	r1, r3
 80007ea:	23fa      	movs	r3, #250	; 0xfa
 80007ec:	0098      	lsls	r0, r3, #2
 80007ee:	f7ff fc8b 	bl	8000108 <__udivsi3>
 80007f2:	0003      	movs	r3, r0
 80007f4:	0019      	movs	r1, r3
 80007f6:	0020      	movs	r0, r4
 80007f8:	f7ff fc86 	bl	8000108 <__udivsi3>
 80007fc:	0003      	movs	r3, r0
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f93d 	bl	8000a7e <HAL_SYSTICK_Config>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d112      	bne.n	800082e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b03      	cmp	r3, #3
 800080c:	d80a      	bhi.n	8000824 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	2301      	movs	r3, #1
 8000812:	425b      	negs	r3, r3
 8000814:	2200      	movs	r2, #0
 8000816:	0018      	movs	r0, r3
 8000818:	f000 f90c 	bl	8000a34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_InitTick+0x90>)
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e00d      	b.n	8000840 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e008      	b.n	8000840 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800082e:	230f      	movs	r3, #15
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e003      	b.n	8000840 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000838:	230f      	movs	r3, #15
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000840:	230f      	movs	r3, #15
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b005      	add	sp, #20
 800084c:	bd90      	pop	{r4, r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	20000008 	.word	0x20000008
 8000854:	20000000 	.word	0x20000000
 8000858:	20000004 	.word	0x20000004

0800085c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_IncTick+0x1c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001a      	movs	r2, r3
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_IncTick+0x20>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	18d2      	adds	r2, r2, r3
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <HAL_IncTick+0x20>)
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	20000008 	.word	0x20000008
 800087c:	200000c0 	.word	0x200000c0

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <HAL_GetTick+0x10>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	200000c0 	.word	0x200000c0

08000894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800089c:	f7ff fff0 	bl	8000880 <HAL_GetTick>
 80008a0:	0003      	movs	r3, r0
 80008a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	d005      	beq.n	80008ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_Delay+0x44>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	001a      	movs	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	189b      	adds	r3, r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	f7ff ffe0 	bl	8000880 <HAL_GetTick>
 80008c0:	0002      	movs	r2, r0
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d8f7      	bhi.n	80008bc <HAL_Delay+0x28>
  {
  }
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000008 	.word	0x20000008

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	0002      	movs	r2, r0
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b7f      	cmp	r3, #127	; 0x7f
 80008ee:	d809      	bhi.n	8000904 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	231f      	movs	r3, #31
 80008f8:	401a      	ands	r2, r3
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <__NVIC_EnableIRQ+0x30>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	4091      	lsls	r1, r2
 8000900:	000a      	movs	r2, r1
 8000902:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b7f      	cmp	r3, #127	; 0x7f
 8000924:	d828      	bhi.n	8000978 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000926:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <__NVIC_SetPriority+0xd4>)
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b25b      	sxtb	r3, r3
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	33c0      	adds	r3, #192	; 0xc0
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	589b      	ldr	r3, [r3, r2]
 8000936:	1dfa      	adds	r2, r7, #7
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	0011      	movs	r1, r2
 800093c:	2203      	movs	r2, #3
 800093e:	400a      	ands	r2, r1
 8000940:	00d2      	lsls	r2, r2, #3
 8000942:	21ff      	movs	r1, #255	; 0xff
 8000944:	4091      	lsls	r1, r2
 8000946:	000a      	movs	r2, r1
 8000948:	43d2      	mvns	r2, r2
 800094a:	401a      	ands	r2, r3
 800094c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	019b      	lsls	r3, r3, #6
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	401a      	ands	r2, r3
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	0018      	movs	r0, r3
 800095c:	2303      	movs	r3, #3
 800095e:	4003      	ands	r3, r0
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000964:	481f      	ldr	r0, [pc, #124]	; (80009e4 <__NVIC_SetPriority+0xd4>)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b25b      	sxtb	r3, r3
 800096c:	089b      	lsrs	r3, r3, #2
 800096e:	430a      	orrs	r2, r1
 8000970:	33c0      	adds	r3, #192	; 0xc0
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000976:	e031      	b.n	80009dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <__NVIC_SetPriority+0xd8>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	0019      	movs	r1, r3
 8000980:	230f      	movs	r3, #15
 8000982:	400b      	ands	r3, r1
 8000984:	3b08      	subs	r3, #8
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3306      	adds	r3, #6
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	3304      	adds	r3, #4
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1dfa      	adds	r2, r7, #7
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	0011      	movs	r1, r2
 8000998:	2203      	movs	r2, #3
 800099a:	400a      	ands	r2, r1
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	21ff      	movs	r1, #255	; 0xff
 80009a0:	4091      	lsls	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	401a      	ands	r2, r3
 80009a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	22ff      	movs	r2, #255	; 0xff
 80009b0:	401a      	ands	r2, r3
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0018      	movs	r0, r3
 80009b8:	2303      	movs	r3, #3
 80009ba:	4003      	ands	r3, r0
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <__NVIC_SetPriority+0xd8>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	001c      	movs	r4, r3
 80009c8:	230f      	movs	r3, #15
 80009ca:	4023      	ands	r3, r4
 80009cc:	3b08      	subs	r3, #8
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	430a      	orrs	r2, r1
 80009d2:	3306      	adds	r3, #6
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	18c3      	adds	r3, r0, r3
 80009d8:	3304      	adds	r3, #4
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b003      	add	sp, #12
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	e000e100 	.word	0xe000e100
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1e5a      	subs	r2, r3, #1
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	045b      	lsls	r3, r3, #17
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d301      	bcc.n	8000a04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a00:	2301      	movs	r3, #1
 8000a02:	e010      	b.n	8000a26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <SysTick_Config+0x44>)
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	425b      	negs	r3, r3
 8000a10:	2103      	movs	r1, #3
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff ff7c 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SysTick_Config+0x44>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SysTick_Config+0x44>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	0018      	movs	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	210f      	movs	r1, #15
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	1c02      	adds	r2, r0, #0
 8000a44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ff5d 	bl	8000910 <__NVIC_SetPriority>
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	0002      	movs	r2, r0
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ff33 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff ffaf 	bl	80009ec <SysTick_Config>
 8000a8e:	0003      	movs	r3, r0
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa6:	e147      	b.n	8000d38 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d100      	bne.n	8000ac0 <HAL_GPIO_Init+0x28>
 8000abe:	e138      	b.n	8000d32 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d005      	beq.n	8000ad8 <HAL_GPIO_Init+0x40>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d130      	bne.n	8000b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	0013      	movs	r3, r2
 8000ae8:	43da      	mvns	r2, r3
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b0e:	2201      	movs	r2, #1
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	2201      	movs	r2, #1
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2203      	movs	r2, #3
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	d017      	beq.n	8000b76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	409a      	lsls	r2, r3
 8000b54:	0013      	movs	r3, r2
 8000b56:	43da      	mvns	r2, r3
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d123      	bne.n	8000bca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	08da      	lsrs	r2, r3, #3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3208      	adds	r2, #8
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	58d3      	ldr	r3, [r2, r3]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2207      	movs	r2, #7
 8000b94:	4013      	ands	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	220f      	movs	r2, #15
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	2107      	movs	r1, #7
 8000bae:	400b      	ands	r3, r1
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	08da      	lsrs	r2, r3, #3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3208      	adds	r2, #8
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	6939      	ldr	r1, [r7, #16]
 8000bc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2203      	movs	r2, #3
 8000be8:	401a      	ands	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	23c0      	movs	r3, #192	; 0xc0
 8000c04:	029b      	lsls	r3, r3, #10
 8000c06:	4013      	ands	r3, r2
 8000c08:	d100      	bne.n	8000c0c <HAL_GPIO_Init+0x174>
 8000c0a:	e092      	b.n	8000d32 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c0c:	4a50      	ldr	r2, [pc, #320]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3318      	adds	r3, #24
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	589b      	ldr	r3, [r3, r2]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4013      	ands	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	220f      	movs	r2, #15
 8000c24:	409a      	lsls	r2, r3
 8000c26:	0013      	movs	r3, r2
 8000c28:	43da      	mvns	r2, r3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d013      	beq.n	8000c62 <HAL_GPIO_Init+0x1ca>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a45      	ldr	r2, [pc, #276]	; (8000d54 <HAL_GPIO_Init+0x2bc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d00d      	beq.n	8000c5e <HAL_GPIO_Init+0x1c6>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a44      	ldr	r2, [pc, #272]	; (8000d58 <HAL_GPIO_Init+0x2c0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d007      	beq.n	8000c5a <HAL_GPIO_Init+0x1c2>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a43      	ldr	r2, [pc, #268]	; (8000d5c <HAL_GPIO_Init+0x2c4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_GPIO_Init+0x1be>
 8000c52:	2303      	movs	r3, #3
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x1cc>
 8000c56:	2305      	movs	r3, #5
 8000c58:	e004      	b.n	8000c64 <HAL_GPIO_Init+0x1cc>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e002      	b.n	8000c64 <HAL_GPIO_Init+0x1cc>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <HAL_GPIO_Init+0x1cc>
 8000c62:	2300      	movs	r3, #0
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	2103      	movs	r1, #3
 8000c68:	400a      	ands	r2, r1
 8000c6a:	00d2      	lsls	r2, r2, #3
 8000c6c:	4093      	lsls	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c74:	4936      	ldr	r1, [pc, #216]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c82:	4a33      	ldr	r2, [pc, #204]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	58d3      	ldr	r3, [r2, r3]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	025b      	lsls	r3, r3, #9
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ca8:	4929      	ldr	r1, [pc, #164]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000cb2:	2384      	movs	r3, #132	; 0x84
 8000cb4:	58d3      	ldr	r3, [r2, r3]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	029b      	lsls	r3, r3, #10
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cd6:	491e      	ldr	r1, [pc, #120]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000cd8:	2284      	movs	r2, #132	; 0x84
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	035b      	lsls	r3, r3, #13
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43da      	mvns	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	039b      	lsls	r3, r3, #14
 8000d20:	4013      	ands	r3, r2
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	40da      	lsrs	r2, r3
 8000d40:	1e13      	subs	r3, r2, #0
 8000d42:	d000      	beq.n	8000d46 <HAL_GPIO_Init+0x2ae>
 8000d44:	e6b0      	b.n	8000aa8 <HAL_GPIO_Init+0x10>
  }
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b006      	add	sp, #24
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40021800 	.word	0x40021800
 8000d54:	50000400 	.word	0x50000400
 8000d58:	50000800 	.word	0x50000800
 8000d5c:	50000c00 	.word	0x50000c00

08000d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	0008      	movs	r0, r1
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	1cbb      	adds	r3, r7, #2
 8000d6e:	1c02      	adds	r2, r0, #0
 8000d70:	801a      	strh	r2, [r3, #0]
 8000d72:	1c7b      	adds	r3, r7, #1
 8000d74:	1c0a      	adds	r2, r1, #0
 8000d76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d78:	1c7b      	adds	r3, r7, #1
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d80:	1cbb      	adds	r3, r7, #2
 8000d82:	881a      	ldrh	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e003      	b.n	8000d92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8a:	1cbb      	adds	r3, r7, #2
 8000d8c:	881a      	ldrh	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	000a      	movs	r2, r1
 8000da4:	1cbb      	adds	r3, r7, #2
 8000da6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dae:	1cbb      	adds	r3, r7, #2
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4013      	ands	r3, r2
 8000db6:	041a      	lsls	r2, r3, #16
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	1cb9      	adds	r1, r7, #2
 8000dbe:	8809      	ldrh	r1, [r1, #0]
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b004      	add	sp, #16
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e082      	b.n	8000ee8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2241      	movs	r2, #65	; 0x41
 8000de6:	5c9b      	ldrb	r3, [r3, r2]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d107      	bne.n	8000dfe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2240      	movs	r2, #64	; 0x40
 8000df2:	2100      	movs	r1, #0
 8000df4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff fbbf 	bl	800057c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2241      	movs	r2, #65	; 0x41
 8000e02:	2124      	movs	r1, #36	; 0x24
 8000e04:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	438a      	bics	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4934      	ldr	r1, [pc, #208]	; (8000ef0 <HAL_I2C_Init+0x120>)
 8000e20:	400a      	ands	r2, r1
 8000e22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4931      	ldr	r1, [pc, #196]	; (8000ef4 <HAL_I2C_Init+0x124>)
 8000e30:	400a      	ands	r2, r1
 8000e32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d108      	bne.n	8000e4e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	0209      	lsls	r1, r1, #8
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	e007      	b.n	8000e5e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2184      	movs	r1, #132	; 0x84
 8000e58:	0209      	lsls	r1, r1, #8
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d104      	bne.n	8000e70 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	491f      	ldr	r1, [pc, #124]	; (8000ef8 <HAL_I2C_Init+0x128>)
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	491a      	ldr	r1, [pc, #104]	; (8000ef4 <HAL_I2C_Init+0x124>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69d9      	ldr	r1, [r3, #28]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a1a      	ldr	r2, [r3, #32]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2241      	movs	r2, #65	; 0x41
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2242      	movs	r2, #66	; 0x42
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	f0ffffff 	.word	0xf0ffffff
 8000ef4:	ffff7fff 	.word	0xffff7fff
 8000ef8:	02008000 	.word	0x02008000

08000efc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2241      	movs	r2, #65	; 0x41
 8000f0a:	5c9b      	ldrb	r3, [r3, r2]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b20      	cmp	r3, #32
 8000f10:	d138      	bne.n	8000f84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2240      	movs	r2, #64	; 0x40
 8000f16:	5c9b      	ldrb	r3, [r3, r2]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e032      	b.n	8000f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2240      	movs	r2, #64	; 0x40
 8000f24:	2101      	movs	r1, #1
 8000f26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2241      	movs	r2, #65	; 0x41
 8000f2c:	2124      	movs	r1, #36	; 0x24
 8000f2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4911      	ldr	r1, [pc, #68]	; (8000f90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2241      	movs	r2, #65	; 0x41
 8000f74:	2120      	movs	r1, #32
 8000f76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e000      	b.n	8000f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f84:	2302      	movs	r3, #2
  }
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	ffffefff 	.word	0xffffefff

08000f94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2241      	movs	r2, #65	; 0x41
 8000fa2:	5c9b      	ldrb	r3, [r3, r2]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b20      	cmp	r3, #32
 8000fa8:	d139      	bne.n	800101e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	5c9b      	ldrb	r3, [r3, r2]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e033      	b.n	8001020 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2240      	movs	r2, #64	; 0x40
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2241      	movs	r2, #65	; 0x41
 8000fc4:	2124      	movs	r1, #36	; 0x24
 8000fc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	438a      	bics	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2241      	movs	r2, #65	; 0x41
 800100e:	2120      	movs	r1, #32
 8001010:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2240      	movs	r2, #64	; 0x40
 8001016:	2100      	movs	r1, #0
 8001018:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800101e:	2302      	movs	r3, #2
  }
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b004      	add	sp, #16
 8001026:	bd80      	pop	{r7, pc}
 8001028:	fffff0ff 	.word	0xfffff0ff

0800102c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800103a:	4013      	ands	r3, r2
 800103c:	0019      	movs	r1, r3
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	430a      	orrs	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	429a      	cmp	r2, r3
 800104e:	d11f      	bne.n	8001090 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	0013      	movs	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	189b      	adds	r3, r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4912      	ldr	r1, [pc, #72]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff f852 	bl	8000108 <__udivsi3>
 8001064:	0003      	movs	r3, r0
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800106a:	e008      	b.n	800107e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3b01      	subs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e001      	b.n	800107e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e009      	b.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	401a      	ands	r2, r3
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	429a      	cmp	r2, r3
 800108e:	d0ed      	beq.n	800106c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	40007000 	.word	0x40007000
 80010a0:	fffff9ff 	.word	0xfffff9ff
 80010a4:	20000000 	.word	0x20000000
 80010a8:	000f4240 	.word	0x000f4240

080010ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e304      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	d100      	bne.n	80010ca <HAL_RCC_OscConfig+0x1e>
 80010c8:	e07c      	b.n	80011c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ca:	4bc3      	ldr	r3, [pc, #780]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2238      	movs	r2, #56	; 0x38
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010d4:	4bc0      	ldr	r3, [pc, #768]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
 80010dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d102      	bne.n	80010ea <HAL_RCC_OscConfig+0x3e>
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d002      	beq.n	80010f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d10b      	bne.n	8001108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	4bb9      	ldr	r3, [pc, #740]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	d062      	beq.n	80011c2 <HAL_RCC_OscConfig+0x116>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d15e      	bne.n	80011c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e2df      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	025b      	lsls	r3, r3, #9
 8001110:	429a      	cmp	r2, r3
 8001112:	d107      	bne.n	8001124 <HAL_RCC_OscConfig+0x78>
 8001114:	4bb0      	ldr	r3, [pc, #704]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4baf      	ldr	r3, [pc, #700]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	0249      	lsls	r1, r1, #9
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e020      	b.n	8001166 <HAL_RCC_OscConfig+0xba>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	23a0      	movs	r3, #160	; 0xa0
 800112a:	02db      	lsls	r3, r3, #11
 800112c:	429a      	cmp	r2, r3
 800112e:	d10e      	bne.n	800114e <HAL_RCC_OscConfig+0xa2>
 8001130:	4ba9      	ldr	r3, [pc, #676]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4ba8      	ldr	r3, [pc, #672]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	02c9      	lsls	r1, r1, #11
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	4ba6      	ldr	r3, [pc, #664]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4ba5      	ldr	r3, [pc, #660]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	0249      	lsls	r1, r1, #9
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e00b      	b.n	8001166 <HAL_RCC_OscConfig+0xba>
 800114e:	4ba2      	ldr	r3, [pc, #648]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4ba1      	ldr	r3, [pc, #644]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001154:	49a1      	ldr	r1, [pc, #644]	; (80013dc <HAL_RCC_OscConfig+0x330>)
 8001156:	400a      	ands	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001160:	499f      	ldr	r1, [pc, #636]	; (80013e0 <HAL_RCC_OscConfig+0x334>)
 8001162:	400a      	ands	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d014      	beq.n	8001198 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff fb87 	bl	8000880 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fb82 	bl	8000880 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e29e      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800118a:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	029b      	lsls	r3, r3, #10
 8001192:	4013      	ands	r3, r2
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0xcc>
 8001196:	e015      	b.n	80011c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001198:	f7ff fb72 	bl	8000880 <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a2:	f7ff fb6d 	bl	8000880 <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b64      	cmp	r3, #100	; 0x64
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e289      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011b4:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	029b      	lsls	r3, r3, #10
 80011bc:	4013      	ands	r3, r2
 80011be:	d1f0      	bne.n	80011a2 <HAL_RCC_OscConfig+0xf6>
 80011c0:	e000      	b.n	80011c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2202      	movs	r2, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d100      	bne.n	80011d0 <HAL_RCC_OscConfig+0x124>
 80011ce:	e099      	b.n	8001304 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d0:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2238      	movs	r2, #56	; 0x38
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011da:	4b7f      	ldr	r3, [pc, #508]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2203      	movs	r2, #3
 80011e0:	4013      	ands	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b10      	cmp	r3, #16
 80011e8:	d102      	bne.n	80011f0 <HAL_RCC_OscConfig+0x144>
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d002      	beq.n	80011f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d135      	bne.n	8001262 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f6:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4013      	ands	r3, r2
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x162>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e25c      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4b72      	ldr	r3, [pc, #456]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a74      	ldr	r2, [pc, #464]	; (80013e4 <HAL_RCC_OscConfig+0x338>)
 8001214:	4013      	ands	r3, r2
 8001216:	0019      	movs	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	021a      	lsls	r2, r3, #8
 800121e:	4b6e      	ldr	r3, [pc, #440]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001220:	430a      	orrs	r2, r1
 8001222:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d112      	bne.n	8001250 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800122a:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6e      	ldr	r2, [pc, #440]	; (80013e8 <HAL_RCC_OscConfig+0x33c>)
 8001230:	4013      	ands	r3, r2
 8001232:	0019      	movs	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800123e:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0adb      	lsrs	r3, r3, #11
 8001244:	2207      	movs	r2, #7
 8001246:	4013      	ands	r3, r2
 8001248:	4a68      	ldr	r2, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x340>)
 800124a:	40da      	lsrs	r2, r3
 800124c:	4b68      	ldr	r3, [pc, #416]	; (80013f0 <HAL_RCC_OscConfig+0x344>)
 800124e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001250:	4b68      	ldr	r3, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x348>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fab7 	bl	80007c8 <HAL_InitTick>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d051      	beq.n	8001302 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e232      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d030      	beq.n	80012cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800126a:	4b5b      	ldr	r3, [pc, #364]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a5e      	ldr	r2, [pc, #376]	; (80013e8 <HAL_RCC_OscConfig+0x33c>)
 8001270:	4013      	ands	r3, r2
 8001272:	0019      	movs	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	0049      	lsls	r1, r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff faf8 	bl	8000880 <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff faf3 	bl	8000880 <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e20f      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4013      	ands	r3, r2
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a4a      	ldr	r2, [pc, #296]	; (80013e4 <HAL_RCC_OscConfig+0x338>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	021a      	lsls	r2, r3, #8
 80012c4:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	430a      	orrs	r2, r1
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	e01b      	b.n	8001304 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	4949      	ldr	r1, [pc, #292]	; (80013f8 <HAL_RCC_OscConfig+0x34c>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fad2 	bl	8000880 <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff facd 	bl	8000880 <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1e9      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f4:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x236>
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001302:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2208      	movs	r2, #8
 800130a:	4013      	ands	r3, r2
 800130c:	d047      	beq.n	800139e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2238      	movs	r2, #56	; 0x38
 8001314:	4013      	ands	r3, r2
 8001316:	2b18      	cmp	r3, #24
 8001318:	d10a      	bne.n	8001330 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d03c      	beq.n	800139e <HAL_RCC_OscConfig+0x2f2>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d138      	bne.n	800139e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e1cb      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d019      	beq.n	800136c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800133a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fa9c 	bl	8000880 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff fa97 	bl	8000880 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1b3      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d0f1      	beq.n	800134e <HAL_RCC_OscConfig+0x2a2>
 800136a:	e018      	b.n	800139e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 800136e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001372:	2101      	movs	r1, #1
 8001374:	438a      	bics	r2, r1
 8001376:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fa82 	bl	8000880 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff fa7d 	bl	8000880 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e199      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d1f1      	bne.n	8001382 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2204      	movs	r2, #4
 80013a4:	4013      	ands	r3, r2
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x2fe>
 80013a8:	e0c6      	b.n	8001538 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013aa:	231f      	movs	r3, #31
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2238      	movs	r2, #56	; 0x38
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b20      	cmp	r3, #32
 80013bc:	d11e      	bne.n	80013fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c2:	2202      	movs	r2, #2
 80013c4:	4013      	ands	r3, r2
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x31e>
 80013c8:	e0b6      	b.n	8001538 <HAL_RCC_OscConfig+0x48c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d000      	beq.n	80013d4 <HAL_RCC_OscConfig+0x328>
 80013d2:	e0b1      	b.n	8001538 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e177      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
 80013d8:	40021000 	.word	0x40021000
 80013dc:	fffeffff 	.word	0xfffeffff
 80013e0:	fffbffff 	.word	0xfffbffff
 80013e4:	ffff80ff 	.word	0xffff80ff
 80013e8:	ffffc7ff 	.word	0xffffc7ff
 80013ec:	00f42400 	.word	0x00f42400
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004
 80013f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013fc:	4bb4      	ldr	r3, [pc, #720]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80013fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	055b      	lsls	r3, r3, #21
 8001404:	4013      	ands	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_RCC_OscConfig+0x360>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x362>
 800140c:	2300      	movs	r3, #0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d011      	beq.n	8001436 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4baf      	ldr	r3, [pc, #700]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001416:	4bae      	ldr	r3, [pc, #696]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	0549      	lsls	r1, r1, #21
 800141c:	430a      	orrs	r2, r1
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001420:	4bab      	ldr	r3, [pc, #684]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	055b      	lsls	r3, r3, #21
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800142e:	231f      	movs	r3, #31
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001436:	4ba7      	ldr	r3, [pc, #668]	; (80016d4 <HAL_RCC_OscConfig+0x628>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4013      	ands	r3, r2
 8001440:	d11a      	bne.n	8001478 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001442:	4ba4      	ldr	r3, [pc, #656]	; (80016d4 <HAL_RCC_OscConfig+0x628>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4ba3      	ldr	r3, [pc, #652]	; (80016d4 <HAL_RCC_OscConfig+0x628>)
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	0049      	lsls	r1, r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001450:	f7ff fa16 	bl	8000880 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145a:	f7ff fa11 	bl	8000880 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e12d      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146c:	4b99      	ldr	r3, [pc, #612]	; (80016d4 <HAL_RCC_OscConfig+0x628>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4013      	ands	r3, r2
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x3e2>
 8001480:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001482:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	65da      	str	r2, [r3, #92]	; 0x5c
 800148c:	e01c      	b.n	80014c8 <HAL_RCC_OscConfig+0x41c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x404>
 8001496:	4b8e      	ldr	r3, [pc, #568]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001498:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800149a:	4b8d      	ldr	r3, [pc, #564]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 800149c:	2104      	movs	r1, #4
 800149e:	430a      	orrs	r2, r1
 80014a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80014a2:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80014a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014a6:	4b8a      	ldr	r3, [pc, #552]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0x41c>
 80014b0:	4b87      	ldr	r3, [pc, #540]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80014b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014b4:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	438a      	bics	r2, r1
 80014ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80014bc:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80014be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014c0:	4b83      	ldr	r3, [pc, #524]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80014c2:	2104      	movs	r1, #4
 80014c4:	438a      	bics	r2, r1
 80014c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d014      	beq.n	80014fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff f9d6 	bl	8000880 <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014d8:	e009      	b.n	80014ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff f9d1 	bl	8000880 <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a7c      	ldr	r2, [pc, #496]	; (80016d8 <HAL_RCC_OscConfig+0x62c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e0ec      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x42e>
 80014f8:	e013      	b.n	8001522 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff f9c1 	bl	8000880 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001502:	e009      	b.n	8001518 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff f9bc 	bl	8000880 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4a72      	ldr	r2, [pc, #456]	; (80016d8 <HAL_RCC_OscConfig+0x62c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0d7      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001518:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001522:	231f      	movs	r3, #31
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 800152e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001530:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001532:	496a      	ldr	r1, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x630>)
 8001534:	400a      	ands	r2, r1
 8001536:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d100      	bne.n	8001542 <HAL_RCC_OscConfig+0x496>
 8001540:	e0c1      	b.n	80016c6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001542:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2238      	movs	r2, #56	; 0x38
 8001548:	4013      	ands	r3, r2
 800154a:	2b10      	cmp	r3, #16
 800154c:	d100      	bne.n	8001550 <HAL_RCC_OscConfig+0x4a4>
 800154e:	e081      	b.n	8001654 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d156      	bne.n	8001606 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 800155e:	4960      	ldr	r1, [pc, #384]	; (80016e0 <HAL_RCC_OscConfig+0x634>)
 8001560:	400a      	ands	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff f98c 	bl	8000880 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff f987 	bl	8000880 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0a3      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	049b      	lsls	r3, r3, #18
 8001588:	4013      	ands	r3, r2
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4a54      	ldr	r2, [pc, #336]	; (80016e4 <HAL_RCC_OscConfig+0x638>)
 8001592:	4013      	ands	r3, r2
 8001594:	0019      	movs	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	431a      	orrs	r2, r3
 80015ba:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	0449      	lsls	r1, r1, #17
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015ce:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0549      	lsls	r1, r1, #21
 80015d8:	430a      	orrs	r2, r1
 80015da:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff f950 	bl	8000880 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff f94b 	bl	8000880 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e067      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f8:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	049b      	lsls	r3, r3, #18
 8001600:	4013      	ands	r3, r2
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x53a>
 8001604:	e05f      	b.n	80016c6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 800160c:	4934      	ldr	r1, [pc, #208]	; (80016e0 <HAL_RCC_OscConfig+0x634>)
 800160e:	400a      	ands	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001618:	2103      	movs	r1, #3
 800161a:	438a      	bics	r2, r1
 800161c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001624:	4930      	ldr	r1, [pc, #192]	; (80016e8 <HAL_RCC_OscConfig+0x63c>)
 8001626:	400a      	ands	r2, r1
 8001628:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff f929 	bl	8000880 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff f924 	bl	8000880 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e040      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	049b      	lsls	r3, r3, #18
 800164e:	4013      	ands	r3, r2
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x588>
 8001652:	e038      	b.n	80016c6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e033      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x624>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2203      	movs	r2, #3
 800166a:	401a      	ands	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	429a      	cmp	r2, r3
 8001672:	d126      	bne.n	80016c2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2270      	movs	r2, #112	; 0x70
 8001678:	401a      	ands	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d11f      	bne.n	80016c2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	23fe      	movs	r3, #254	; 0xfe
 8001686:	01db      	lsls	r3, r3, #7
 8001688:	401a      	ands	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d116      	bne.n	80016c2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	23f8      	movs	r3, #248	; 0xf8
 8001698:	039b      	lsls	r3, r3, #14
 800169a:	401a      	ands	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d10e      	bne.n	80016c2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	23e0      	movs	r3, #224	; 0xe0
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	401a      	ands	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	0f5b      	lsrs	r3, r3, #29
 80016b8:	075a      	lsls	r2, r3, #29
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b008      	add	sp, #32
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40007000 	.word	0x40007000
 80016d8:	00001388 	.word	0x00001388
 80016dc:	efffffff 	.word	0xefffffff
 80016e0:	feffffff 	.word	0xfeffffff
 80016e4:	11c1808c 	.word	0x11c1808c
 80016e8:	eefeffff 	.word	0xeefeffff

080016ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0e9      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b76      	ldr	r3, [pc, #472]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2207      	movs	r2, #7
 8001706:	4013      	ands	r3, r2
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d91e      	bls.n	800174c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b73      	ldr	r3, [pc, #460]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2207      	movs	r2, #7
 8001714:	4393      	bics	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	4b70      	ldr	r3, [pc, #448]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001720:	f7ff f8ae 	bl	8000880 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001728:	e009      	b.n	800173e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172a:	f7ff f8a9 	bl	8000880 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a6a      	ldr	r2, [pc, #424]	; (80018e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0ca      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2207      	movs	r2, #7
 8001744:	4013      	ands	r3, r2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d1ee      	bne.n	800172a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d015      	beq.n	8001782 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d006      	beq.n	800176e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001760:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001766:	21e0      	movs	r1, #224	; 0xe0
 8001768:	01c9      	lsls	r1, r1, #7
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176e:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4a5d      	ldr	r2, [pc, #372]	; (80018e8 <HAL_RCC_ClockConfig+0x1fc>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	4013      	ands	r3, r2
 800178a:	d057      	beq.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d12b      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e097      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	049b      	lsls	r3, r3, #18
 80017b4:	4013      	ands	r3, r2
 80017b6:	d11f      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e08b      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4013      	ands	r3, r2
 80017ce:	d113      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e07f      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d106      	bne.n	80017ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d108      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e074      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e06d      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2207      	movs	r2, #7
 80017fe:	4393      	bics	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800180c:	f7ff f838 	bl	8000880 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001814:	e009      	b.n	800182a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001816:	f7ff f833 	bl	8000880 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4a2f      	ldr	r2, [pc, #188]	; (80018e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e054      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2238      	movs	r2, #56	; 0x38
 8001830:	401a      	ands	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	429a      	cmp	r2, r3
 800183a:	d1ec      	bne.n	8001816 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2207      	movs	r2, #7
 8001842:	4013      	ands	r3, r2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d21e      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2207      	movs	r2, #7
 8001850:	4393      	bics	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800185c:	f7ff f810 	bl	8000880 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001864:	e009      	b.n	800187a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001866:	f7ff f80b 	bl	8000880 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e02c      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2207      	movs	r2, #7
 8001880:	4013      	ands	r3, r2
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2204      	movs	r2, #4
 800188e:	4013      	ands	r3, r2
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	4a15      	ldr	r2, [pc, #84]	; (80018ec <HAL_RCC_ClockConfig+0x200>)
 8001898:	4013      	ands	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018a6:	f000 f829 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018aa:	0001      	movs	r1, r0
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	220f      	movs	r2, #15
 80018b4:	401a      	ands	r2, r3
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x204>)
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	58d3      	ldr	r3, [r2, r3]
 80018bc:	221f      	movs	r2, #31
 80018be:	4013      	ands	r3, r2
 80018c0:	000a      	movs	r2, r1
 80018c2:	40da      	lsrs	r2, r3
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_ClockConfig+0x208>)
 80018c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x20c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7fe ff7b 	bl	80007c8 <HAL_InitTick>
 80018d2:	0003      	movs	r3, r0
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40022000 	.word	0x40022000
 80018e0:	00001388 	.word	0x00001388
 80018e4:	40021000 	.word	0x40021000
 80018e8:	fffff0ff 	.word	0xfffff0ff
 80018ec:	ffff8fff 	.word	0xffff8fff
 80018f0:	08002a74 	.word	0x08002a74
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2238      	movs	r2, #56	; 0x38
 8001908:	4013      	ands	r3, r2
 800190a:	d10f      	bne.n	800192c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0adb      	lsrs	r3, r3, #11
 8001912:	2207      	movs	r2, #7
 8001914:	4013      	ands	r3, r2
 8001916:	2201      	movs	r2, #1
 8001918:	409a      	lsls	r2, r3
 800191a:	0013      	movs	r3, r2
 800191c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	4835      	ldr	r0, [pc, #212]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001922:	f7fe fbf1 	bl	8000108 <__udivsi3>
 8001926:	0003      	movs	r3, r0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	e05d      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800192c:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2238      	movs	r2, #56	; 0x38
 8001932:	4013      	ands	r3, r2
 8001934:	2b08      	cmp	r3, #8
 8001936:	d102      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_RCC_GetSysClockFreq+0x100>)
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	e054      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2238      	movs	r2, #56	; 0x38
 8001944:	4013      	ands	r3, r2
 8001946:	2b10      	cmp	r3, #16
 8001948:	d138      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2203      	movs	r2, #3
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	2207      	movs	r2, #7
 800195c:	4013      	ands	r3, r2
 800195e:	3301      	adds	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d10d      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	4824      	ldr	r0, [pc, #144]	; (80019fc <HAL_RCC_GetSysClockFreq+0x100>)
 800196c:	f7fe fbcc 	bl	8000108 <__udivsi3>
 8001970:	0003      	movs	r3, r0
 8001972:	0019      	movs	r1, r3
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	227f      	movs	r2, #127	; 0x7f
 800197c:	4013      	ands	r3, r2
 800197e:	434b      	muls	r3, r1
 8001980:	617b      	str	r3, [r7, #20]
        break;
 8001982:	e00d      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	481c      	ldr	r0, [pc, #112]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001988:	f7fe fbbe 	bl	8000108 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	0019      	movs	r1, r3
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	227f      	movs	r2, #127	; 0x7f
 8001998:	4013      	ands	r3, r2
 800199a:	434b      	muls	r3, r1
 800199c:	617b      	str	r3, [r7, #20]
        break;
 800199e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0f5b      	lsrs	r3, r3, #29
 80019a6:	2207      	movs	r2, #7
 80019a8:	4013      	ands	r3, r2
 80019aa:	3301      	adds	r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	6978      	ldr	r0, [r7, #20]
 80019b2:	f7fe fba9 	bl	8000108 <__udivsi3>
 80019b6:	0003      	movs	r3, r0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	e015      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2238      	movs	r2, #56	; 0x38
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d103      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2238      	movs	r2, #56	; 0x38
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b18      	cmp	r3, #24
 80019da:	d103      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019dc:	23fa      	movs	r3, #250	; 0xfa
 80019de:	01db      	lsls	r3, r3, #7
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e001      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019e8:	693b      	ldr	r3, [r7, #16]
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b006      	add	sp, #24
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40021000 	.word	0x40021000
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e04a      	b.n	8001aa8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	223d      	movs	r2, #61	; 0x3d
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	223c      	movs	r2, #60	; 0x3c
 8001a22:	2100      	movs	r1, #0
 8001a24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7fe fdf3 	bl	8000614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	223d      	movs	r2, #61	; 0x3d
 8001a32:	2102      	movs	r1, #2
 8001a34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	0019      	movs	r1, r3
 8001a40:	0010      	movs	r0, r2
 8001a42:	f000 fbb1 	bl	80021a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2248      	movs	r2, #72	; 0x48
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	223e      	movs	r2, #62	; 0x3e
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	223f      	movs	r2, #63	; 0x3f
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2241      	movs	r2, #65	; 0x41
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	5499      	strb	r1, [r3, r2]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2242      	movs	r2, #66	; 0x42
 8001a72:	2101      	movs	r1, #1
 8001a74:	5499      	strb	r1, [r3, r2]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2243      	movs	r2, #67	; 0x43
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2244      	movs	r2, #68	; 0x44
 8001a82:	2101      	movs	r1, #1
 8001a84:	5499      	strb	r1, [r3, r2]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2245      	movs	r2, #69	; 0x45
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2246      	movs	r2, #70	; 0x46
 8001a92:	2101      	movs	r1, #1
 8001a94:	5499      	strb	r1, [r3, r2]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2247      	movs	r2, #71	; 0x47
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	223d      	movs	r2, #61	; 0x3d
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e04a      	b.n	8001b58 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	223d      	movs	r2, #61	; 0x3d
 8001ac6:	5c9b      	ldrb	r3, [r3, r2]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	223c      	movs	r2, #60	; 0x3c
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 f841 	bl	8001b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	223d      	movs	r2, #61	; 0x3d
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3304      	adds	r3, #4
 8001aee:	0019      	movs	r1, r3
 8001af0:	0010      	movs	r0, r2
 8001af2:	f000 fb59 	bl	80021a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2248      	movs	r2, #72	; 0x48
 8001afa:	2101      	movs	r1, #1
 8001afc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	223e      	movs	r2, #62	; 0x3e
 8001b02:	2101      	movs	r1, #1
 8001b04:	5499      	strb	r1, [r3, r2]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	223f      	movs	r2, #63	; 0x3f
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	5499      	strb	r1, [r3, r2]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2240      	movs	r2, #64	; 0x40
 8001b12:	2101      	movs	r1, #1
 8001b14:	5499      	strb	r1, [r3, r2]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2241      	movs	r2, #65	; 0x41
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2242      	movs	r2, #66	; 0x42
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2243      	movs	r2, #67	; 0x43
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2244      	movs	r2, #68	; 0x44
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2245      	movs	r2, #69	; 0x45
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2246      	movs	r2, #70	; 0x46
 8001b42:	2101      	movs	r1, #1
 8001b44:	5499      	strb	r1, [r3, r2]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2247      	movs	r2, #71	; 0x47
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	223d      	movs	r2, #61	; 0x3d
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d124      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d11d      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4252      	negs	r2, r2
 8001b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2203      	movs	r2, #3
 8001bac:	4013      	ands	r3, r2
 8001bae:	d004      	beq.n	8001bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 fae0 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e007      	b.n	8001bca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 fad3 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 fadf 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d125      	bne.n	8001c2a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2204      	movs	r2, #4
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d11e      	bne.n	8001c2a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	23c0      	movs	r3, #192	; 0xc0
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4013      	ands	r3, r2
 8001c08:	d004      	beq.n	8001c14 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 fab3 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8001c12:	e007      	b.n	8001c24 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 faa6 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 fab2 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2208      	movs	r2, #8
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d124      	bne.n	8001c82 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2208      	movs	r2, #8
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d11d      	bne.n	8001c82 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2209      	movs	r2, #9
 8001c4c:	4252      	negs	r2, r2
 8001c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2204      	movs	r2, #4
 8001c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 fa87 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8001c6a:	e007      	b.n	8001c7c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 fa7a 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 fa86 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	2210      	movs	r2, #16
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d125      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2210      	movs	r2, #16
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d11e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2211      	movs	r2, #17
 8001ca4:	4252      	negs	r2, r2
 8001ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2208      	movs	r2, #8
 8001cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	23c0      	movs	r3, #192	; 0xc0
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d004      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 fa5a 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8001cc4:	e007      	b.n	8001cd6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 fa4d 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f000 fa59 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10f      	bne.n	8001d0a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	4252      	negs	r2, r2
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 fa27 	bl	8002158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b80      	cmp	r3, #128	; 0x80
 8001d16:	d10f      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b80      	cmp	r3, #128	; 0x80
 8001d24:	d108      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2281      	movs	r2, #129	; 0x81
 8001d2c:	4252      	negs	r2, r2
 8001d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 fe56 	bl	80029e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	401a      	ands	r2, r3
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10e      	bne.n	8001d6a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b80      	cmp	r3, #128	; 0x80
 8001d58:	d107      	bne.n	8001d6a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_TIM_IRQHandler+0x260>)
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f000 fe45 	bl	80029f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2240      	movs	r2, #64	; 0x40
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d10f      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2240      	movs	r2, #64	; 0x40
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b40      	cmp	r3, #64	; 0x40
 8001d84:	d108      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2241      	movs	r2, #65	; 0x41
 8001d8c:	4252      	negs	r2, r2
 8001d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 fa00 	bl	8002198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d10f      	bne.n	8001dc6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d108      	bne.n	8001dc6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2221      	movs	r2, #33	; 0x21
 8001dba:	4252      	negs	r2, r2
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 fe07 	bl	80029d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	fffffeff 	.word	0xfffffeff

08001dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	223c      	movs	r2, #60	; 0x3c
 8001de4:	5c9b      	ldrb	r3, [r3, r2]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e0df      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	223c      	movs	r2, #60	; 0x3c
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b14      	cmp	r3, #20
 8001dfa:	d900      	bls.n	8001dfe <HAL_TIM_PWM_ConfigChannel+0x2a>
 8001dfc:	e0d1      	b.n	8001fa2 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 fa3e 	bl	8002294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2108      	movs	r1, #8
 8001e24:	430a      	orrs	r2, r1
 8001e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2104      	movs	r1, #4
 8001e34:	438a      	bics	r2, r1
 8001e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6999      	ldr	r1, [r3, #24]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	619a      	str	r2, [r3, #24]
      break;
 8001e4a:	e0ab      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	0011      	movs	r1, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 fa9d 	bl	8002394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699a      	ldr	r2, [r3, #24]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0109      	lsls	r1, r1, #4
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4951      	ldr	r1, [pc, #324]	; (8001fbc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6999      	ldr	r1, [r3, #24]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	021a      	lsls	r2, r3, #8
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	619a      	str	r2, [r3, #24]
      break;
 8001e90:	e088      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	0011      	movs	r1, r2
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 faf8 	bl	8002490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2108      	movs	r1, #8
 8001eac:	430a      	orrs	r2, r1
 8001eae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2104      	movs	r1, #4
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69d9      	ldr	r1, [r3, #28]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	61da      	str	r2, [r3, #28]
      break;
 8001ed2:	e067      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	0011      	movs	r1, r2
 8001edc:	0018      	movs	r0, r3
 8001ede:	f000 fb59 	bl	8002594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	0109      	lsls	r1, r1, #4
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	492f      	ldr	r1, [pc, #188]	; (8001fbc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69d9      	ldr	r1, [r3, #28]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	021a      	lsls	r2, r3, #8
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	61da      	str	r2, [r3, #28]
      break;
 8001f18:	e044      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	0011      	movs	r1, r2
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 fb9a 	bl	800265c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2108      	movs	r1, #8
 8001f34:	430a      	orrs	r2, r1
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2104      	movs	r1, #4
 8001f44:	438a      	bics	r2, r1
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f5a:	e023      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	0011      	movs	r1, r2
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fbd3 	bl	8002710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0109      	lsls	r1, r1, #4
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	490d      	ldr	r1, [pc, #52]	; (8001fbc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	021a      	lsls	r2, r3, #8
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001fa0:	e000      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8001fa2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	223c      	movs	r2, #60	; 0x3c
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	08002ab4 	.word	0x08002ab4
 8001fbc:	fffffbff 	.word	0xfffffbff

08001fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	223c      	movs	r2, #60	; 0x3c
 8001fce:	5c9b      	ldrb	r3, [r3, r2]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_TIM_ConfigClockSource+0x18>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e0b7      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x188>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	223c      	movs	r2, #60	; 0x3c
 8001fdc:	2101      	movs	r1, #1
 8001fde:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	223d      	movs	r2, #61	; 0x3d
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a57      	ldr	r2, [pc, #348]	; (8002150 <HAL_TIM_ConfigClockSource+0x190>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_TIM_ConfigClockSource+0x194>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	0192      	lsls	r2, r2, #6
 8002010:	4293      	cmp	r3, r2
 8002012:	d040      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0xd6>
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	0192      	lsls	r2, r2, #6
 8002018:	4293      	cmp	r3, r2
 800201a:	d900      	bls.n	800201e <HAL_TIM_ConfigClockSource+0x5e>
 800201c:	e088      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	0152      	lsls	r2, r2, #5
 8002022:	4293      	cmp	r3, r2
 8002024:	d100      	bne.n	8002028 <HAL_TIM_ConfigClockSource+0x68>
 8002026:	e085      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	0152      	lsls	r2, r2, #5
 800202c:	4293      	cmp	r3, r2
 800202e:	d900      	bls.n	8002032 <HAL_TIM_ConfigClockSource+0x72>
 8002030:	e07e      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
 8002032:	2b70      	cmp	r3, #112	; 0x70
 8002034:	d018      	beq.n	8002068 <HAL_TIM_ConfigClockSource+0xa8>
 8002036:	d900      	bls.n	800203a <HAL_TIM_ConfigClockSource+0x7a>
 8002038:	e07a      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
 800203a:	2b60      	cmp	r3, #96	; 0x60
 800203c:	d04f      	beq.n	80020de <HAL_TIM_ConfigClockSource+0x11e>
 800203e:	d900      	bls.n	8002042 <HAL_TIM_ConfigClockSource+0x82>
 8002040:	e076      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
 8002042:	2b50      	cmp	r3, #80	; 0x50
 8002044:	d03b      	beq.n	80020be <HAL_TIM_ConfigClockSource+0xfe>
 8002046:	d900      	bls.n	800204a <HAL_TIM_ConfigClockSource+0x8a>
 8002048:	e072      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d057      	beq.n	80020fe <HAL_TIM_ConfigClockSource+0x13e>
 800204e:	d900      	bls.n	8002052 <HAL_TIM_ConfigClockSource+0x92>
 8002050:	e06e      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
 8002052:	2b30      	cmp	r3, #48	; 0x30
 8002054:	d063      	beq.n	800211e <HAL_TIM_ConfigClockSource+0x15e>
 8002056:	d86b      	bhi.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
 8002058:	2b20      	cmp	r3, #32
 800205a:	d060      	beq.n	800211e <HAL_TIM_ConfigClockSource+0x15e>
 800205c:	d868      	bhi.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
 800205e:	2b00      	cmp	r3, #0
 8002060:	d05d      	beq.n	800211e <HAL_TIM_ConfigClockSource+0x15e>
 8002062:	2b10      	cmp	r3, #16
 8002064:	d05b      	beq.n	800211e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002066:	e063      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6899      	ldr	r1, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f000 fc24 	bl	80028c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2277      	movs	r2, #119	; 0x77
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	609a      	str	r2, [r3, #8]
      break;
 8002094:	e04f      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f000 fc0d 	bl	80028c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	01c9      	lsls	r1, r1, #7
 80020b8:	430a      	orrs	r2, r1
 80020ba:	609a      	str	r2, [r3, #8]
      break;
 80020bc:	e03b      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	001a      	movs	r2, r3
 80020cc:	f000 fb7e 	bl	80027cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2150      	movs	r1, #80	; 0x50
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 fbd8 	bl	800288c <TIM_ITRx_SetConfig>
      break;
 80020dc:	e02b      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	001a      	movs	r2, r3
 80020ec:	f000 fb9c 	bl	8002828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2160      	movs	r1, #96	; 0x60
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 fbc8 	bl	800288c <TIM_ITRx_SetConfig>
      break;
 80020fc:	e01b      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	001a      	movs	r2, r3
 800210c:	f000 fb5e 	bl	80027cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2140      	movs	r1, #64	; 0x40
 8002116:	0018      	movs	r0, r3
 8002118:	f000 fbb8 	bl	800288c <TIM_ITRx_SetConfig>
      break;
 800211c:	e00b      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0019      	movs	r1, r3
 8002128:	0010      	movs	r0, r2
 800212a:	f000 fbaf 	bl	800288c <TIM_ITRx_SetConfig>
        break;
 800212e:	e002      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	e000      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002134:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223d      	movs	r2, #61	; 0x3d
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	223c      	movs	r2, #60	; 0x3c
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b004      	add	sp, #16
 800214e:	bd80      	pop	{r7, pc}
 8002150:	ffceff88 	.word	0xffceff88
 8002154:	ffff00ff 	.word	0xffff00ff

08002158 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b002      	add	sp, #8
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002180:	46c0      	nop			; (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a30      	ldr	r2, [pc, #192]	; (800227c <TIM_Base_SetConfig+0xd4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d008      	beq.n	80021d2 <TIM_Base_SetConfig+0x2a>
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	05db      	lsls	r3, r3, #23
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0x2a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <TIM_Base_SetConfig+0xd8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2270      	movs	r2, #112	; 0x70
 80021d6:	4393      	bics	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <TIM_Base_SetConfig+0xd4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d014      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	05db      	lsls	r3, r3, #23
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d00f      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <TIM_Base_SetConfig+0xd8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00b      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a20      	ldr	r2, [pc, #128]	; (8002284 <TIM_Base_SetConfig+0xdc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <TIM_Base_SetConfig+0xe0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d003      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1e      	ldr	r2, [pc, #120]	; (800228c <TIM_Base_SetConfig+0xe4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d108      	bne.n	8002228 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <TIM_Base_SetConfig+0xe8>)
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	4393      	bics	r3, r2
 800222e:	001a      	movs	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <TIM_Base_SetConfig+0xd4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0xbe>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <TIM_Base_SetConfig+0xe0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0xbe>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <TIM_Base_SetConfig+0xe4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d103      	bne.n	800226e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	615a      	str	r2, [r3, #20]
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40012c00 	.word	0x40012c00
 8002280:	40000400 	.word	0x40000400
 8002284:	40002000 	.word	0x40002000
 8002288:	40014400 	.word	0x40014400
 800228c:	40014800 	.word	0x40014800
 8002290:	fffffcff 	.word	0xfffffcff

08002294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4393      	bics	r3, r2
 80022a6:	001a      	movs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a2e      	ldr	r2, [pc, #184]	; (800237c <TIM_OC1_SetConfig+0xe8>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2203      	movs	r2, #3
 80022ca:	4393      	bics	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2202      	movs	r2, #2
 80022dc:	4393      	bics	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a24      	ldr	r2, [pc, #144]	; (8002380 <TIM_OC1_SetConfig+0xec>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <TIM_OC1_SetConfig+0x6e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a23      	ldr	r2, [pc, #140]	; (8002384 <TIM_OC1_SetConfig+0xf0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d003      	beq.n	8002302 <TIM_OC1_SetConfig+0x6e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <TIM_OC1_SetConfig+0xf4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10c      	bne.n	800231c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2208      	movs	r2, #8
 8002306:	4393      	bics	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2204      	movs	r2, #4
 8002318:	4393      	bics	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a18      	ldr	r2, [pc, #96]	; (8002380 <TIM_OC1_SetConfig+0xec>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <TIM_OC1_SetConfig+0xa0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <TIM_OC1_SetConfig+0xf0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_OC1_SetConfig+0xa0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a16      	ldr	r2, [pc, #88]	; (8002388 <TIM_OC1_SetConfig+0xf4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d111      	bne.n	8002358 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4a15      	ldr	r2, [pc, #84]	; (800238c <TIM_OC1_SetConfig+0xf8>)
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4a14      	ldr	r2, [pc, #80]	; (8002390 <TIM_OC1_SetConfig+0xfc>)
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	621a      	str	r2, [r3, #32]
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b006      	add	sp, #24
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	fffeff8f 	.word	0xfffeff8f
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40014400 	.word	0x40014400
 8002388:	40014800 	.word	0x40014800
 800238c:	fffffeff 	.word	0xfffffeff
 8002390:	fffffdff 	.word	0xfffffdff

08002394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2210      	movs	r2, #16
 80023a4:	4393      	bics	r3, r2
 80023a6:	001a      	movs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a2c      	ldr	r2, [pc, #176]	; (8002474 <TIM_OC2_SetConfig+0xe0>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <TIM_OC2_SetConfig+0xe4>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2220      	movs	r2, #32
 80023de:	4393      	bics	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <TIM_OC2_SetConfig+0xe8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10d      	bne.n	8002412 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	4393      	bics	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	4393      	bics	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <TIM_OC2_SetConfig+0xe8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <TIM_OC2_SetConfig+0x96>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a18      	ldr	r2, [pc, #96]	; (8002480 <TIM_OC2_SetConfig+0xec>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d003      	beq.n	800242a <TIM_OC2_SetConfig+0x96>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <TIM_OC2_SetConfig+0xf0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d113      	bne.n	8002452 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <TIM_OC2_SetConfig+0xf4>)
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4a15      	ldr	r2, [pc, #84]	; (800248c <TIM_OC2_SetConfig+0xf8>)
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	621a      	str	r2, [r3, #32]
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b006      	add	sp, #24
 8002472:	bd80      	pop	{r7, pc}
 8002474:	feff8fff 	.word	0xfeff8fff
 8002478:	fffffcff 	.word	0xfffffcff
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40014400 	.word	0x40014400
 8002484:	40014800 	.word	0x40014800
 8002488:	fffffbff 	.word	0xfffffbff
 800248c:	fffff7ff 	.word	0xfffff7ff

08002490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a33      	ldr	r2, [pc, #204]	; (800256c <TIM_OC3_SetConfig+0xdc>)
 80024a0:	401a      	ands	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a2d      	ldr	r2, [pc, #180]	; (8002570 <TIM_OC3_SetConfig+0xe0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2203      	movs	r2, #3
 80024c4:	4393      	bics	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <TIM_OC3_SetConfig+0xe4>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a23      	ldr	r2, [pc, #140]	; (8002578 <TIM_OC3_SetConfig+0xe8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10d      	bne.n	800250a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	4a22      	ldr	r2, [pc, #136]	; (800257c <TIM_OC3_SetConfig+0xec>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <TIM_OC3_SetConfig+0xf0>)
 8002506:	4013      	ands	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <TIM_OC3_SetConfig+0xe8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <TIM_OC3_SetConfig+0x92>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <TIM_OC3_SetConfig+0xf4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d003      	beq.n	8002522 <TIM_OC3_SetConfig+0x92>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <TIM_OC3_SetConfig+0xf8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d113      	bne.n	800254a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4a19      	ldr	r2, [pc, #100]	; (800258c <TIM_OC3_SetConfig+0xfc>)
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4a18      	ldr	r2, [pc, #96]	; (8002590 <TIM_OC3_SetConfig+0x100>)
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	621a      	str	r2, [r3, #32]
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b006      	add	sp, #24
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fffffeff 	.word	0xfffffeff
 8002570:	fffeff8f 	.word	0xfffeff8f
 8002574:	fffffdff 	.word	0xfffffdff
 8002578:	40012c00 	.word	0x40012c00
 800257c:	fffff7ff 	.word	0xfffff7ff
 8002580:	fffffbff 	.word	0xfffffbff
 8002584:	40014400 	.word	0x40014400
 8002588:	40014800 	.word	0x40014800
 800258c:	ffffefff 	.word	0xffffefff
 8002590:	ffffdfff 	.word	0xffffdfff

08002594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a26      	ldr	r2, [pc, #152]	; (800263c <TIM_OC4_SetConfig+0xa8>)
 80025a4:	401a      	ands	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a20      	ldr	r2, [pc, #128]	; (8002640 <TIM_OC4_SetConfig+0xac>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <TIM_OC4_SetConfig+0xb0>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <TIM_OC4_SetConfig+0xb4>)
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	031b      	lsls	r3, r3, #12
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <TIM_OC4_SetConfig+0xb8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <TIM_OC4_SetConfig+0x70>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <TIM_OC4_SetConfig+0xbc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_OC4_SetConfig+0x70>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <TIM_OC4_SetConfig+0xc0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d109      	bne.n	8002618 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	4a14      	ldr	r2, [pc, #80]	; (8002658 <TIM_OC4_SetConfig+0xc4>)
 8002608:	4013      	ands	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	019b      	lsls	r3, r3, #6
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	621a      	str	r2, [r3, #32]
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b006      	add	sp, #24
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	ffffefff 	.word	0xffffefff
 8002640:	feff8fff 	.word	0xfeff8fff
 8002644:	fffffcff 	.word	0xfffffcff
 8002648:	ffffdfff 	.word	0xffffdfff
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40014400 	.word	0x40014400
 8002654:	40014800 	.word	0x40014800
 8002658:	ffffbfff 	.word	0xffffbfff

0800265c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <TIM_OC5_SetConfig+0x9c>)
 800266c:	401a      	ands	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <TIM_OC5_SetConfig+0xa0>)
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <TIM_OC5_SetConfig+0xa4>)
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a15      	ldr	r2, [pc, #84]	; (8002704 <TIM_OC5_SetConfig+0xa8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <TIM_OC5_SetConfig+0x66>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <TIM_OC5_SetConfig+0xac>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <TIM_OC5_SetConfig+0x66>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <TIM_OC5_SetConfig+0xb0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d109      	bne.n	80026d6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <TIM_OC5_SetConfig+0x9c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	621a      	str	r2, [r3, #32]
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b006      	add	sp, #24
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	fffeffff 	.word	0xfffeffff
 80026fc:	fffeff8f 	.word	0xfffeff8f
 8002700:	fffdffff 	.word	0xfffdffff
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800

08002710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <TIM_OC6_SetConfig+0xa0>)
 8002720:	401a      	ands	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <TIM_OC6_SetConfig+0xa4>)
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <TIM_OC6_SetConfig+0xa8>)
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <TIM_OC6_SetConfig+0xac>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_OC6_SetConfig+0x68>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <TIM_OC6_SetConfig+0xb0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_OC6_SetConfig+0x68>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <TIM_OC6_SetConfig+0xb4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d109      	bne.n	800278c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <TIM_OC6_SetConfig+0xb8>)
 800277c:	4013      	ands	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b006      	add	sp, #24
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	ffefffff 	.word	0xffefffff
 80027b4:	feff8fff 	.word	0xfeff8fff
 80027b8:	ffdfffff 	.word	0xffdfffff
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40014400 	.word	0x40014400
 80027c4:	40014800 	.word	0x40014800
 80027c8:	fffbffff 	.word	0xfffbffff

080027cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4393      	bics	r3, r2
 80027e6:	001a      	movs	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	22f0      	movs	r2, #240	; 0xf0
 80027f6:	4393      	bics	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	220a      	movs	r2, #10
 8002808:	4393      	bics	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	621a      	str	r2, [r3, #32]
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b006      	add	sp, #24
 8002826:	bd80      	pop	{r7, pc}

08002828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	2210      	movs	r2, #16
 800283a:	4393      	bics	r3, r2
 800283c:	001a      	movs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <TIM_TI2_ConfigInputStage+0x60>)
 8002852:	4013      	ands	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	031b      	lsls	r3, r3, #12
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	22a0      	movs	r2, #160	; 0xa0
 8002864:	4393      	bics	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b006      	add	sp, #24
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	ffff0fff 	.word	0xffff0fff

0800288c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <TIM_ITRx_SetConfig+0x34>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	2207      	movs	r2, #7
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	609a      	str	r2, [r3, #8]
}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	ffcfff8f 	.word	0xffcfff8f

080028c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <TIM_ETR_SetConfig+0x3c>)
 80028dc:	4013      	ands	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	021a      	lsls	r2, r3, #8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b006      	add	sp, #24
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	ffff00ff 	.word	0xffff00ff

08002904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	223c      	movs	r2, #60	; 0x3c
 8002912:	5c9b      	ldrb	r3, [r3, r2]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002918:	2302      	movs	r3, #2
 800291a:	e050      	b.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	223c      	movs	r2, #60	; 0x3c
 8002920:	2101      	movs	r1, #1
 8002922:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	223d      	movs	r2, #61	; 0x3d
 8002928:	2102      	movs	r1, #2
 800292a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2270      	movs	r2, #112	; 0x70
 800295c:	4393      	bics	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00a      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	05db      	lsls	r3, r3, #23
 8002984:	429a      	cmp	r2, r3
 8002986:	d004      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10c      	bne.n	80029ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	4393      	bics	r3, r2
 8002998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	223d      	movs	r2, #61	; 0x3d
 80029b0:	2101      	movs	r1, #1
 80029b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	223c      	movs	r2, #60	; 0x3c
 80029b8:	2100      	movs	r1, #0
 80029ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b004      	add	sp, #16
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	ff0fffff 	.word	0xff0fffff
 80029d0:	40000400 	.word	0x40000400

080029d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <__libc_init_array>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	2600      	movs	r6, #0
 8002a08:	4d0c      	ldr	r5, [pc, #48]	; (8002a3c <__libc_init_array+0x38>)
 8002a0a:	4c0d      	ldr	r4, [pc, #52]	; (8002a40 <__libc_init_array+0x3c>)
 8002a0c:	1b64      	subs	r4, r4, r5
 8002a0e:	10a4      	asrs	r4, r4, #2
 8002a10:	42a6      	cmp	r6, r4
 8002a12:	d109      	bne.n	8002a28 <__libc_init_array+0x24>
 8002a14:	2600      	movs	r6, #0
 8002a16:	f000 f821 	bl	8002a5c <_init>
 8002a1a:	4d0a      	ldr	r5, [pc, #40]	; (8002a44 <__libc_init_array+0x40>)
 8002a1c:	4c0a      	ldr	r4, [pc, #40]	; (8002a48 <__libc_init_array+0x44>)
 8002a1e:	1b64      	subs	r4, r4, r5
 8002a20:	10a4      	asrs	r4, r4, #2
 8002a22:	42a6      	cmp	r6, r4
 8002a24:	d105      	bne.n	8002a32 <__libc_init_array+0x2e>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	00b3      	lsls	r3, r6, #2
 8002a2a:	58eb      	ldr	r3, [r5, r3]
 8002a2c:	4798      	blx	r3
 8002a2e:	3601      	adds	r6, #1
 8002a30:	e7ee      	b.n	8002a10 <__libc_init_array+0xc>
 8002a32:	00b3      	lsls	r3, r6, #2
 8002a34:	58eb      	ldr	r3, [r5, r3]
 8002a36:	4798      	blx	r3
 8002a38:	3601      	adds	r6, #1
 8002a3a:	e7f2      	b.n	8002a22 <__libc_init_array+0x1e>
 8002a3c:	08002b08 	.word	0x08002b08
 8002a40:	08002b08 	.word	0x08002b08
 8002a44:	08002b08 	.word	0x08002b08
 8002a48:	08002b0c 	.word	0x08002b0c

08002a4c <memset>:
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	1882      	adds	r2, r0, r2
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d100      	bne.n	8002a56 <memset+0xa>
 8002a54:	4770      	bx	lr
 8002a56:	7019      	strb	r1, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	e7f9      	b.n	8002a50 <memset+0x4>

08002a5c <_init>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr

08002a68 <_fini>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6e:	bc08      	pop	{r3}
 8002a70:	469e      	mov	lr, r3
 8002a72:	4770      	bx	lr
