
STM32G0_WALKRUN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08002d80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002d80  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1df  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed1  00000000  00000000  0002f213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  000310e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00031ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016963  00000000  00000000  00032bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d62  00000000  00000000  00049533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c21  00000000  00000000  0005a295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ebeb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  000ebf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cc0 	.word	0x08002cc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002cc0 	.word	0x08002cc0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <MPU6050_Init+0x1c>)
 800022c:	224c      	movs	r2, #76	; 0x4c
 800022e:	0018      	movs	r0, r3
 8000230:	f002 fd34 	bl	8002c9c <memcpy>
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000028 	.word	0x20000028

08000240 <I2C_Write8>:
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
}

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af02      	add	r7, sp, #8
 8000246:	0002      	movs	r2, r0
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	701a      	strb	r2, [r3, #0]
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	1c0a      	adds	r2, r1, #0
 8000250:	701a      	strb	r2, [r3, #0]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000252:	200c      	movs	r0, #12
 8000254:	183b      	adds	r3, r7, r0
 8000256:	1dfa      	adds	r2, r7, #7
 8000258:	7812      	ldrb	r2, [r2, #0]
 800025a:	701a      	strb	r2, [r3, #0]
	i2cData[1] = data;
 800025c:	183b      	adds	r3, r7, r0
 800025e:	1dba      	adds	r2, r7, #6
 8000260:	7812      	ldrb	r2, [r2, #0]
 8000262:	705a      	strb	r2, [r3, #1]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000264:	210f      	movs	r1, #15
 8000266:	187b      	adds	r3, r7, r1
 8000268:	22d0      	movs	r2, #208	; 0xd0
 800026a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 800026c:	187b      	adds	r3, r7, r1
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b299      	uxth	r1, r3
 8000272:	183a      	adds	r2, r7, r0
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <I2C_Write8+0x48>)
 8000276:	2364      	movs	r3, #100	; 0x64
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	2302      	movs	r3, #2
 800027c:	f000 ff0a 	bl	8001094 <HAL_I2C_Master_Transmit>
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b004      	add	sp, #16
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028

0800028c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000294:	240f      	movs	r4, #15
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 800029c:	2180      	movs	r1, #128	; 0x80
 800029e:	206b      	movs	r0, #107	; 0x6b
 80002a0:	f7ff ffce 	bl	8000240 <I2C_Write8>
	HAL_Delay(100);
 80002a4:	2064      	movs	r0, #100	; 0x64
 80002a6:	f000 fc05 	bl	8000ab4 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	781a      	ldrb	r2, [r3, #0]
 80002ae:	0020      	movs	r0, r4
 80002b0:	183b      	adds	r3, r7, r0
 80002b2:	2107      	movs	r1, #7
 80002b4:	400a      	ands	r2, r1
 80002b6:	701a      	strb	r2, [r3, #0]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	2240      	movs	r2, #64	; 0x40
 80002c2:	4013      	ands	r3, r2
 80002c4:	b25a      	sxtb	r2, r3
 80002c6:	183b      	adds	r3, r7, r0
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	4313      	orrs	r3, r2
 80002ce:	b25a      	sxtb	r2, r3
 80002d0:	183b      	adds	r3, r7, r0
 80002d2:	701a      	strb	r2, [r3, #0]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80002d4:	0004      	movs	r4, r0
 80002d6:	183b      	adds	r3, r7, r0
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	0019      	movs	r1, r3
 80002dc:	206b      	movs	r0, #107	; 0x6b
 80002de:	f7ff ffaf 	bl	8000240 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80002e2:	2064      	movs	r0, #100	; 0x64
 80002e4:	f000 fbe6 	bl	8000ab4 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80002e8:	0021      	movs	r1, r4
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
	Buffer = config->CONFIG_DLPF & 0x07;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	78da      	ldrb	r2, [r3, #3]
 80002f4:	0008      	movs	r0, r1
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2107      	movs	r1, #7
 80002fa:	400a      	ands	r2, r1
 80002fc:	701a      	strb	r2, [r3, #0]
	I2C_Write8(CONFIG_REG, Buffer);
 80002fe:	0004      	movs	r4, r0
 8000300:	183b      	adds	r3, r7, r0
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0019      	movs	r1, r3
 8000306:	201a      	movs	r0, #26
 8000308:	f7ff ff9a 	bl	8000240 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	785b      	ldrb	r3, [r3, #1]
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	b2da      	uxtb	r2, r3
 800031c:	0008      	movs	r0, r1
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2118      	movs	r1, #24
 8000322:	400a      	ands	r2, r1
 8000324:	701a      	strb	r2, [r3, #0]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000326:	0004      	movs	r4, r0
 8000328:	183b      	adds	r3, r7, r0
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	0019      	movs	r1, r3
 800032e:	201b      	movs	r0, #27
 8000330:	f7ff ff86 	bl	8000240 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8000334:	0021      	movs	r1, r4
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	789b      	ldrb	r3, [r3, #2]
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	b2da      	uxtb	r2, r3
 8000344:	0008      	movs	r0, r1
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2118      	movs	r1, #24
 800034a:	400a      	ands	r2, r1
 800034c:	701a      	strb	r2, [r3, #0]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800034e:	183b      	adds	r3, r7, r0
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	0019      	movs	r1, r3
 8000354:	201c      	movs	r0, #28
 8000356:	f7ff ff73 	bl	8000240 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 800035a:	2004      	movs	r0, #4
 800035c:	f000 f852 	bl	8000404 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	789b      	ldrb	r3, [r3, #2]
 8000364:	2b03      	cmp	r3, #3
 8000366:	d014      	beq.n	8000392 <MPU6050_Config+0x106>
 8000368:	dc17      	bgt.n	800039a <MPU6050_Config+0x10e>
 800036a:	2b02      	cmp	r3, #2
 800036c:	d00d      	beq.n	800038a <MPU6050_Config+0xfe>
 800036e:	dc14      	bgt.n	800039a <MPU6050_Config+0x10e>
 8000370:	2b00      	cmp	r3, #0
 8000372:	d002      	beq.n	800037a <MPU6050_Config+0xee>
 8000374:	2b01      	cmp	r3, #1
 8000376:	d004      	beq.n	8000382 <MPU6050_Config+0xf6>
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
			break;
		
		default:
			break;
 8000378:	e00f      	b.n	800039a <MPU6050_Config+0x10e>
			accelScalingFactor = (2000.0f/32768.0f);
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <MPU6050_Config+0x154>)
 800037c:	4a19      	ldr	r2, [pc, #100]	; (80003e4 <MPU6050_Config+0x158>)
 800037e:	601a      	str	r2, [r3, #0]
			break;
 8000380:	e00c      	b.n	800039c <MPU6050_Config+0x110>
			accelScalingFactor = (4000.0f/32768.0f);
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <MPU6050_Config+0x154>)
 8000384:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <MPU6050_Config+0x15c>)
 8000386:	601a      	str	r2, [r3, #0]
				break;
 8000388:	e008      	b.n	800039c <MPU6050_Config+0x110>
			accelScalingFactor = (8000.0f/32768.0f);
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MPU6050_Config+0x154>)
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <MPU6050_Config+0x160>)
 800038e:	601a      	str	r2, [r3, #0]
			break;
 8000390:	e004      	b.n	800039c <MPU6050_Config+0x110>
			accelScalingFactor = (16000.0f/32768.0f);
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MPU6050_Config+0x154>)
 8000394:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <MPU6050_Config+0x164>)
 8000396:	601a      	str	r2, [r3, #0]
			break;
 8000398:	e000      	b.n	800039c <MPU6050_Config+0x110>
			break;
 800039a:	46c0      	nop			; (mov r8, r8)
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	785b      	ldrb	r3, [r3, #1]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d014      	beq.n	80003ce <MPU6050_Config+0x142>
 80003a4:	dc17      	bgt.n	80003d6 <MPU6050_Config+0x14a>
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d00d      	beq.n	80003c6 <MPU6050_Config+0x13a>
 80003aa:	dc14      	bgt.n	80003d6 <MPU6050_Config+0x14a>
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <MPU6050_Config+0x12a>
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d004      	beq.n	80003be <MPU6050_Config+0x132>
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
			break;
		
		default:
			break;
 80003b4:	e00f      	b.n	80003d6 <MPU6050_Config+0x14a>
			gyroScalingFactor = 250.0f/32768.0f;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MPU6050_Config+0x168>)
 80003b8:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <MPU6050_Config+0x16c>)
 80003ba:	601a      	str	r2, [r3, #0]
			break;
 80003bc:	e00c      	b.n	80003d8 <MPU6050_Config+0x14c>
				gyroScalingFactor = 500.0f/32768.0f;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <MPU6050_Config+0x168>)
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <MPU6050_Config+0x170>)
 80003c2:	601a      	str	r2, [r3, #0]
				break;
 80003c4:	e008      	b.n	80003d8 <MPU6050_Config+0x14c>
			gyroScalingFactor = 1000.0f/32768.0f;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MPU6050_Config+0x168>)
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <MPU6050_Config+0x174>)
 80003ca:	601a      	str	r2, [r3, #0]
			break;
 80003cc:	e004      	b.n	80003d8 <MPU6050_Config+0x14c>
			gyroScalingFactor = 2000.0f/32768.0f;
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MPU6050_Config+0x168>)
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <MPU6050_Config+0x158>)
 80003d2:	601a      	str	r2, [r3, #0]
			break;
 80003d4:	e000      	b.n	80003d8 <MPU6050_Config+0x14c>
			break;
 80003d6:	46c0      	nop			; (mov r8, r8)
	}
	
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b005      	add	sp, #20
 80003de:	bd90      	pop	{r4, r7, pc}
 80003e0:	20000074 	.word	0x20000074
 80003e4:	3d7a0000 	.word	0x3d7a0000
 80003e8:	3dfa0000 	.word	0x3dfa0000
 80003ec:	3e7a0000 	.word	0x3e7a0000
 80003f0:	3efa0000 	.word	0x3efa0000
 80003f4:	20000078 	.word	0x20000078
 80003f8:	3bfa0000 	.word	0x3bfa0000
 80003fc:	3c7a0000 	.word	0x3c7a0000
 8000400:	3cfa0000 	.word	0x3cfa0000

08000404 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	0019      	movs	r1, r3
 8000416:	2019      	movs	r0, #25
 8000418:	f7ff ff12 	bl	8000240 <I2C_Write8>
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042a:	f000 fabd 	bl	80009a8 <HAL_Init>

  /* USER CODE BEGIN Init */


  MPU6050_Init(&hi2c2);
 800042e:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <main+0xb8>)
 8000430:	0018      	movs	r0, r3
 8000432:	f7ff fef5 	bl	8000220 <MPU6050_Init>
  //2. Configure Accel and Gyro parameters
  MpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	709a      	strb	r2, [r3, #2]
  MpuConfig.ClockSource = Internal_8MHz;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
  MpuConfig.CONFIG_DLPF = DLPF_5_Hz;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2206      	movs	r2, #6
 8000446:	70da      	strb	r2, [r3, #3]
  MpuConfig.Gyro_Full_Scale = FS_SEL_250;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	705a      	strb	r2, [r3, #1]
  MpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2200      	movs	r2, #0
 8000452:	711a      	strb	r2, [r3, #4]
  MPU6050_Config(&MpuConfig);
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff ff18 	bl	800028c <MPU6050_Config>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f846 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f000 f942 	bl	80006e8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000464:	f000 f8a0 	bl	80005a8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000468:	f000 f8de 	bl	8000628 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <main+0xbc>)
 800046e:	2200      	movs	r2, #0
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fd5a 	bl	8000f2c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(STATUS2_GPIO_Port, STATUS2_Pin, GPIO_PIN_RESET);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <main+0xc0>)
 800047a:	2108      	movs	r1, #8
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fe77 	bl	8002170 <HAL_TIM_PWM_Start>
  int32_t CH3_DC = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		  while(CH3_DC < 65535)
 8000486:	e00f      	b.n	80004a8 <main+0x84>
		  {
			  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET);
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <main+0xbc>)
 800048a:	2201      	movs	r2, #1
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fd4c 	bl	8000f2c <HAL_GPIO_WritePin>
			  TIM2->CCR3 = CH3_DC;
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	63da      	str	r2, [r3, #60]	; 0x3c
			  CH3_DC += 250;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	33fa      	adds	r3, #250	; 0xfa
 80004a0:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fb06 	bl	8000ab4 <HAL_Delay>
		  while(CH3_DC < 65535)
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <main+0xc4>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	ddeb      	ble.n	8000488 <main+0x64>
		  }
		  while(CH3_DC > 0)
 80004b0:	e00f      	b.n	80004d2 <main+0xae>
		  {
			  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <main+0xbc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	2180      	movs	r1, #128	; 0x80
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fd37 	bl	8000f2c <HAL_GPIO_WritePin>
			  TIM2->CCR3 = CH3_DC;
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	63da      	str	r2, [r3, #60]	; 0x3c
			  CH3_DC -= 250;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3bfa      	subs	r3, #250	; 0xfa
 80004ca:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f000 faf1 	bl	8000ab4 <HAL_Delay>
		  while(CH3_DC > 0)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	dcec      	bgt.n	80004b2 <main+0x8e>
		  while(CH3_DC < 65535)
 80004d8:	e7e6      	b.n	80004a8 <main+0x84>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	2000007c 	.word	0x2000007c
 80004e0:	50000400 	.word	0x50000400
 80004e4:	200000f0 	.word	0x200000f0
 80004e8:	0000fffe 	.word	0x0000fffe

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b093      	sub	sp, #76	; 0x4c
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	2410      	movs	r4, #16
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2338      	movs	r3, #56	; 0x38
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f002 fbd6 	bl	8002cae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	003b      	movs	r3, r7
 8000504:	0018      	movs	r0, r3
 8000506:	2310      	movs	r3, #16
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f002 fbcf 	bl	8002cae <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	0018      	movs	r0, r3
 8000516:	f001 f8e9 	bl	80016ec <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2202      	movs	r2, #2
 800051e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	0052      	lsls	r2, r2, #1
 8000526:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000528:	0021      	movs	r1, r4
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2240      	movs	r2, #64	; 0x40
 8000534:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2202      	movs	r2, #2
 800053a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2202      	movs	r2, #2
 8000540:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2208      	movs	r2, #8
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	0292      	lsls	r2, r2, #10
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	0492      	lsls	r2, r2, #18
 800055c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	0592      	lsls	r2, r2, #22
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	187b      	adds	r3, r7, r1
 8000568:	0018      	movs	r0, r3
 800056a:	f001 f8ff 	bl	800176c <HAL_RCC_OscConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000572:	f000 f8fd 	bl	8000770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	003b      	movs	r3, r7
 8000578:	2207      	movs	r2, #7
 800057a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	003b      	movs	r3, r7
 800057e:	2202      	movs	r2, #2
 8000580:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058e:	003b      	movs	r3, r7
 8000590:	2102      	movs	r1, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f001 fc0a 	bl	8001dac <HAL_RCC_ClockConfig>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800059c:	f000 f8e8 	bl	8000770 <Error_Handler>
  }
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b013      	add	sp, #76	; 0x4c
 80005a6:	bd90      	pop	{r4, r7, pc}

080005a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_I2C2_Init+0x74>)
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <MX_I2C2_Init+0x78>)
 80005b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_I2C2_Init+0x74>)
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <MX_I2C2_Init+0x7c>)
 80005b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_I2C2_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_I2C2_Init+0x74>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_I2C2_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_I2C2_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2C2_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_I2C2_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_I2C2_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_I2C2_Init+0x74>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 fcbf 	bl	8000f68 <HAL_I2C_Init>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005ee:	f000 f8bf 	bl	8000770 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_I2C2_Init+0x74>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 ffe0 	bl	80015bc <HAL_I2CEx_ConfigAnalogFilter>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000600:	f000 f8b6 	bl	8000770 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_I2C2_Init+0x74>)
 8000606:	2100      	movs	r1, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 f823 	bl	8001654 <HAL_I2CEx_ConfigDigitalFilter>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000612:	f000 f8ad 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000007c 	.word	0x2000007c
 8000620:	40005800 	.word	0x40005800
 8000624:	10707dbc 	.word	0x10707dbc

08000628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062e:	231c      	movs	r3, #28
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	0018      	movs	r0, r3
 8000634:	230c      	movs	r3, #12
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f002 fb38 	bl	8002cae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063e:	003b      	movs	r3, r7
 8000640:	0018      	movs	r0, r3
 8000642:	231c      	movs	r3, #28
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 fb31 	bl	8002cae <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_TIM2_Init+0xb8>)
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	05d2      	lsls	r2, r2, #23
 8000652:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <MX_TIM2_Init+0xb8>)
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_TIM2_Init+0xb8>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_TIM2_Init+0xb8>)
 8000662:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <MX_TIM2_Init+0xbc>)
 8000664:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_TIM2_Init+0xb8>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_TIM2_Init+0xb8>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_TIM2_Init+0xb8>)
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fd23 	bl	80020c0 <HAL_TIM_PWM_Init>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800067e:	f000 f877 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000682:	211c      	movs	r1, #28
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000690:	187a      	adds	r2, r7, r1
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_TIM2_Init+0xb8>)
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f002 fa74 	bl	8002b84 <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80006a0:	f000 f866 	bl	8000770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2260      	movs	r2, #96	; 0x60
 80006a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006bc:	0039      	movs	r1, r7
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_TIM2_Init+0xb8>)
 80006c0:	2208      	movs	r2, #8
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fe32 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80006cc:	f000 f850 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <MX_TIM2_Init+0xb8>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f8de 	bl	8000894 <HAL_TIM_MspPostInit>

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b00a      	add	sp, #40	; 0x28
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000f0 	.word	0x200000f0
 80006e4:	0000ffff 	.word	0x0000ffff

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	240c      	movs	r4, #12
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	0018      	movs	r0, r3
 80006f4:	2314      	movs	r3, #20
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f002 fad8 	bl	8002cae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_GPIO_Init+0x80>)
 8000700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_GPIO_Init+0x80>)
 8000704:	2102      	movs	r1, #2
 8000706:	430a      	orrs	r2, r1
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_GPIO_Init+0x80>)
 800070c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070e:	2202      	movs	r2, #2
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_GPIO_Init+0x80>)
 8000718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_GPIO_Init+0x80>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_GPIO_Init+0x80>)
 8000724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_GPIO_Init+0x84>)
 8000730:	2200      	movs	r2, #0
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fbf9 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 800073a:	0021      	movs	r1, r4
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2201      	movs	r2, #1
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8000754:	187b      	adds	r3, r7, r1
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <MX_GPIO_Init+0x84>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f000 fa82 	bl	8000c64 <HAL_GPIO_Init>

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b009      	add	sp, #36	; 0x24
 8000766:	bd90      	pop	{r4, r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	50000400 	.word	0x50000400

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	2101      	movs	r1, #1
 800078a:	430a      	orrs	r2, r1
 800078c:	641a      	str	r2, [r3, #64]	; 0x40
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	2201      	movs	r2, #1
 8000794:	4013      	ands	r3, r2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0549      	lsls	r1, r1, #21
 80007a4:	430a      	orrs	r2, r1
 80007a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_MspInit+0x44>)
 80007aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	055b      	lsls	r3, r3, #21
 80007b0:	4013      	ands	r3, r2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	2414      	movs	r4, #20
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0018      	movs	r0, r3
 80007d2:	2314      	movs	r3, #20
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f002 fa69 	bl	8002cae <memset>
  if(hi2c->Instance==I2C2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <HAL_I2C_MspInit+0x90>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d131      	bne.n	800084a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_I2C_MspInit+0x94>)
 80007e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_I2C_MspInit+0x94>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <HAL_I2C_MspInit+0x94>)
 80007f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	22c0      	movs	r2, #192	; 0xc0
 8000802:	0152      	lsls	r2, r2, #5
 8000804:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000806:	0021      	movs	r1, r4
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2212      	movs	r2, #18
 800080c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2206      	movs	r2, #6
 800081e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	187a      	adds	r2, r7, r1
 8000822:	23a0      	movs	r3, #160	; 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fa1b 	bl	8000c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_I2C_MspInit+0x94>)
 8000830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_I2C_MspInit+0x94>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	03c9      	lsls	r1, r1, #15
 8000838:	430a      	orrs	r2, r1
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_I2C_MspInit+0x94>)
 800083e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	03db      	lsls	r3, r3, #15
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b00b      	add	sp, #44	; 0x2c
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40005800 	.word	0x40005800
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	429a      	cmp	r2, r3
 800086e:	d10b      	bne.n	8000888 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_TIM_PWM_MspInit+0x34>)
 8000872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_TIM_PWM_MspInit+0x34>)
 8000876:	2101      	movs	r1, #1
 8000878:	430a      	orrs	r2, r1
 800087a:	63da      	str	r2, [r3, #60]	; 0x3c
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <HAL_TIM_PWM_MspInit+0x34>)
 800087e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000880:	2201      	movs	r2, #1
 8000882:	4013      	ands	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b004      	add	sp, #16
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	240c      	movs	r4, #12
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	0018      	movs	r0, r3
 80008a2:	2314      	movs	r3, #20
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f002 fa01 	bl	8002cae <memset>
  if(htim->Instance==TIM2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d122      	bne.n	80008fe <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_TIM_MspPostInit+0x74>)
 80008ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_TIM_MspPostInit+0x74>)
 80008be:	2101      	movs	r1, #1
 80008c0:	430a      	orrs	r2, r1
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_TIM_MspPostInit+0x74>)
 80008c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c8:	2201      	movs	r2, #1
 80008ca:	4013      	ands	r3, r2
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_LED_Pin;
 80008d0:	0021      	movs	r1, r4
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2204      	movs	r2, #4
 80008d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2202      	movs	r2, #2
 80008dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2202      	movs	r2, #2
 80008ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_LED_GPIO_Port, &GPIO_InitStruct);
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 f9b3 	bl	8000c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b009      	add	sp, #36	; 0x24
 8000904:	bd90      	pop	{r4, r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f8a4 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <SystemInit+0x14>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	0512      	lsls	r2, r2, #20
 8000946:	609a      	str	r2, [r3, #8]
#endif
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000956:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000958:	f7ff fff0 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	; (8000994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	; (80009a0 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000982:	f002 f967 	bl	8002c54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000986:	f7ff fd4d 	bl	8000424 <main>

0800098a <LoopForever>:

LoopForever:
  b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   r0, =_estack
 800098c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000998:	08002d74 	.word	0x08002d74
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a0:	2000014c 	.word	0x2000014c

080009a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_Init+0x3c>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_Init+0x3c>)
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	0049      	lsls	r1, r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f810 	bl	80009e8 <HAL_InitTick>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e001      	b.n	80009d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fed2 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_InitTick+0x88>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d02b      	beq.n	8000a58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_InitTick+0x8c>)
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_InitTick+0x88>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	0019      	movs	r1, r3
 8000a0a:	23fa      	movs	r3, #250	; 0xfa
 8000a0c:	0098      	lsls	r0, r3, #2
 8000a0e:	f7ff fb7b 	bl	8000108 <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	0019      	movs	r1, r3
 8000a16:	0020      	movs	r0, r4
 8000a18:	f7ff fb76 	bl	8000108 <__udivsi3>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f913 	bl	8000c4a <HAL_SYSTICK_Config>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d112      	bne.n	8000a4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d80a      	bhi.n	8000a44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 f8f2 	bl	8000c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_InitTick+0x90>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e00d      	b.n	8000a60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a44:	230f      	movs	r3, #15
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e008      	b.n	8000a60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e003      	b.n	8000a60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a58:	230f      	movs	r3, #15
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a60:	230f      	movs	r3, #15
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	781b      	ldrb	r3, [r3, #0]
}
 8000a66:	0018      	movs	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b005      	add	sp, #20
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	001a      	movs	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	18d2      	adds	r2, r2, r3
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000148 	.word	0x20000148

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000148 	.word	0x20000148

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff fff0 	bl	8000aa0 <HAL_GetTick>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3301      	adds	r3, #1
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	189b      	adds	r3, r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	f7ff ffe0 	bl	8000aa0 <HAL_GetTick>
 8000ae0:	0002      	movs	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	0002      	movs	r2, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d828      	bhi.n	8000b64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b12:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <__NVIC_SetPriority+0xd4>)
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	089b      	lsrs	r3, r3, #2
 8000b1c:	33c0      	adds	r3, #192	; 0xc0
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	589b      	ldr	r3, [r3, r2]
 8000b22:	1dfa      	adds	r2, r7, #7
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	0011      	movs	r1, r2
 8000b28:	2203      	movs	r2, #3
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	00d2      	lsls	r2, r2, #3
 8000b2e:	21ff      	movs	r1, #255	; 0xff
 8000b30:	4091      	lsls	r1, r2
 8000b32:	000a      	movs	r2, r1
 8000b34:	43d2      	mvns	r2, r2
 8000b36:	401a      	ands	r2, r3
 8000b38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	22ff      	movs	r2, #255	; 0xff
 8000b40:	401a      	ands	r2, r3
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	0018      	movs	r0, r3
 8000b48:	2303      	movs	r3, #3
 8000b4a:	4003      	ands	r3, r0
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b50:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <__NVIC_SetPriority+0xd4>)
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b25b      	sxtb	r3, r3
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	33c0      	adds	r3, #192	; 0xc0
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b62:	e031      	b.n	8000bc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <__NVIC_SetPriority+0xd8>)
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	400b      	ands	r3, r1
 8000b70:	3b08      	subs	r3, #8
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3306      	adds	r3, #6
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	18d3      	adds	r3, r2, r3
 8000b7a:	3304      	adds	r3, #4
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1dfa      	adds	r2, r7, #7
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	0011      	movs	r1, r2
 8000b84:	2203      	movs	r2, #3
 8000b86:	400a      	ands	r2, r1
 8000b88:	00d2      	lsls	r2, r2, #3
 8000b8a:	21ff      	movs	r1, #255	; 0xff
 8000b8c:	4091      	lsls	r1, r2
 8000b8e:	000a      	movs	r2, r1
 8000b90:	43d2      	mvns	r2, r2
 8000b92:	401a      	ands	r2, r3
 8000b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	019b      	lsls	r3, r3, #6
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	4003      	ands	r3, r0
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <__NVIC_SetPriority+0xd8>)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	001c      	movs	r4, r3
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	4023      	ands	r3, r4
 8000bb8:	3b08      	subs	r3, #8
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	18c3      	adds	r3, r0, r3
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b003      	add	sp, #12
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1e5a      	subs	r2, r3, #1
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	045b      	lsls	r3, r3, #17
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d301      	bcc.n	8000bf0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bec:	2301      	movs	r3, #1
 8000bee:	e010      	b.n	8000c12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <SysTick_Config+0x44>)
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	2103      	movs	r1, #3
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff ff7c 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x44>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x44>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	1c02      	adds	r2, r0, #0
 8000c30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff5d 	bl	8000afc <__NVIC_SetPriority>
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b004      	add	sp, #16
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ffbf 	bl	8000bd8 <SysTick_Config>
 8000c5a:	0003      	movs	r3, r0
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	e147      	b.n	8000f04 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d100      	bne.n	8000c8c <HAL_GPIO_Init+0x28>
 8000c8a:	e138      	b.n	8000efe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2203      	movs	r2, #3
 8000c92:	4013      	ands	r3, r2
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d005      	beq.n	8000ca4 <HAL_GPIO_Init+0x40>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d130      	bne.n	8000d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	43da      	mvns	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d017      	beq.n	8000d42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	43da      	mvns	r2, r3
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2203      	movs	r2, #3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d123      	bne.n	8000d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	58d3      	ldr	r3, [r2, r3]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2207      	movs	r2, #7
 8000d60:	4013      	ands	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	2107      	movs	r1, #7
 8000d7a:	400b      	ands	r3, r1
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	6939      	ldr	r1, [r7, #16]
 8000d94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	43da      	mvns	r2, r3
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	401a      	ands	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	23c0      	movs	r3, #192	; 0xc0
 8000dd0:	029b      	lsls	r3, r3, #10
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d100      	bne.n	8000dd8 <HAL_GPIO_Init+0x174>
 8000dd6:	e092      	b.n	8000efe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dd8:	4a50      	ldr	r2, [pc, #320]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3318      	adds	r3, #24
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	589b      	ldr	r3, [r3, r2]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	220f      	movs	r2, #15
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x1ca>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_GPIO_Init+0x2bc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x1c6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <HAL_GPIO_Init+0x2c0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x1c2>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a43      	ldr	r2, [pc, #268]	; (8000f28 <HAL_GPIO_Init+0x2c4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x1be>
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x1cc>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e004      	b.n	8000e30 <HAL_GPIO_Init+0x1cc>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_Init+0x1cc>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x1cc>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	2103      	movs	r1, #3
 8000e34:	400a      	ands	r2, r1
 8000e36:	00d2      	lsls	r2, r2, #3
 8000e38:	4093      	lsls	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e40:	4936      	ldr	r1, [pc, #216]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3318      	adds	r3, #24
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e4e:	4a33      	ldr	r2, [pc, #204]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	58d3      	ldr	r3, [r2, r3]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	025b      	lsls	r3, r3, #9
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e74:	4929      	ldr	r1, [pc, #164]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000e7c:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000e7e:	2384      	movs	r3, #132	; 0x84
 8000e80:	58d3      	ldr	r3, [r2, r3]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	029b      	lsls	r3, r3, #10
 8000e96:	4013      	ands	r3, r2
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ea2:	491e      	ldr	r1, [pc, #120]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000ea4:	2284      	movs	r2, #132	; 0x84
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	035b      	lsls	r3, r3, #13
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43da      	mvns	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	039b      	lsls	r3, r3, #14
 8000eec:	4013      	ands	r3, r2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	40da      	lsrs	r2, r3
 8000f0c:	1e13      	subs	r3, r2, #0
 8000f0e:	d000      	beq.n	8000f12 <HAL_GPIO_Init+0x2ae>
 8000f10:	e6b0      	b.n	8000c74 <HAL_GPIO_Init+0x10>
  }
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b006      	add	sp, #24
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	50000400 	.word	0x50000400
 8000f24:	50000800 	.word	0x50000800
 8000f28:	50000c00 	.word	0x50000c00

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	0008      	movs	r0, r1
 8000f36:	0011      	movs	r1, r2
 8000f38:	1cbb      	adds	r3, r7, #2
 8000f3a:	1c02      	adds	r2, r0, #0
 8000f3c:	801a      	strh	r2, [r3, #0]
 8000f3e:	1c7b      	adds	r3, r7, #1
 8000f40:	1c0a      	adds	r2, r1, #0
 8000f42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f44:	1c7b      	adds	r3, r7, #1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f4c:	1cbb      	adds	r3, r7, #2
 8000f4e:	881a      	ldrh	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f56:	1cbb      	adds	r3, r7, #2
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e082      	b.n	8001080 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2241      	movs	r2, #65	; 0x41
 8000f7e:	5c9b      	ldrb	r3, [r3, r2]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d107      	bne.n	8000f96 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2240      	movs	r2, #64	; 0x40
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff fc17 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2241      	movs	r2, #65	; 0x41
 8000f9a:	2124      	movs	r1, #36	; 0x24
 8000f9c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	438a      	bics	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4934      	ldr	r1, [pc, #208]	; (8001088 <HAL_I2C_Init+0x120>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4931      	ldr	r1, [pc, #196]	; (800108c <HAL_I2C_Init+0x124>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d108      	bne.n	8000fe6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	0209      	lsls	r1, r1, #8
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	e007      	b.n	8000ff6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2184      	movs	r1, #132	; 0x84
 8000ff0:	0209      	lsls	r1, r1, #8
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d104      	bne.n	8001008 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	491f      	ldr	r1, [pc, #124]	; (8001090 <HAL_I2C_Init+0x128>)
 8001014:	430a      	orrs	r2, r1
 8001016:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	491a      	ldr	r1, [pc, #104]	; (800108c <HAL_I2C_Init+0x124>)
 8001024:	400a      	ands	r2, r1
 8001026:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	431a      	orrs	r2, r3
 8001032:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69d9      	ldr	r1, [r3, #28]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a1a      	ldr	r2, [r3, #32]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2241      	movs	r2, #65	; 0x41
 800106c:	2120      	movs	r1, #32
 800106e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2242      	movs	r2, #66	; 0x42
 800107a:	2100      	movs	r1, #0
 800107c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	f0ffffff 	.word	0xf0ffffff
 800108c:	ffff7fff 	.word	0xffff7fff
 8001090:	02008000 	.word	0x02008000

08001094 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af02      	add	r7, sp, #8
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	0008      	movs	r0, r1
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	0019      	movs	r1, r3
 80010a2:	230a      	movs	r3, #10
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	1c02      	adds	r2, r0, #0
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	2308      	movs	r3, #8
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	1c0a      	adds	r2, r1, #0
 80010b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2241      	movs	r2, #65	; 0x41
 80010b6:	5c9b      	ldrb	r3, [r3, r2]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	d000      	beq.n	80010c0 <HAL_I2C_Master_Transmit+0x2c>
 80010be:	e0e7      	b.n	8001290 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2240      	movs	r2, #64	; 0x40
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_I2C_Master_Transmit+0x3a>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e0e1      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1fe>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2240      	movs	r2, #64	; 0x40
 80010d2:	2101      	movs	r1, #1
 80010d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010d6:	f7ff fce3 	bl	8000aa0 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	0219      	lsls	r1, r3, #8
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2319      	movs	r3, #25
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f8fc 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0cc      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2241      	movs	r2, #65	; 0x41
 80010fc:	2121      	movs	r1, #33	; 0x21
 80010fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2242      	movs	r2, #66	; 0x42
 8001104:	2110      	movs	r1, #16
 8001106:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2208      	movs	r2, #8
 8001118:	18ba      	adds	r2, r7, r2
 800111a:	8812      	ldrh	r2, [r2, #0]
 800111c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001128:	b29b      	uxth	r3, r3
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d911      	bls.n	8001152 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001138:	b2da      	uxtb	r2, r3
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	045c      	lsls	r4, r3, #17
 800113e:	230a      	movs	r3, #10
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	8819      	ldrh	r1, [r3, #0]
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	4b55      	ldr	r3, [pc, #340]	; (800129c <HAL_I2C_Master_Transmit+0x208>)
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	0023      	movs	r3, r4
 800114c:	f000 fa00 	bl	8001550 <I2C_TransferConfig>
 8001150:	e075      	b.n	800123e <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001156:	b29a      	uxth	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001160:	b2da      	uxtb	r2, r3
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	049c      	lsls	r4, r3, #18
 8001166:	230a      	movs	r3, #10
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	8819      	ldrh	r1, [r3, #0]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	4b4b      	ldr	r3, [pc, #300]	; (800129c <HAL_I2C_Master_Transmit+0x208>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	0023      	movs	r3, r4
 8001174:	f000 f9ec 	bl	8001550 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001178:	e061      	b.n	800123e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	0018      	movs	r0, r3
 8001182:	f000 f8f0 	bl	8001366 <I2C_WaitOnTXISFlagUntilTimeout>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e081      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d03a      	beq.n	800123e <HAL_I2C_Master_Transmit+0x1aa>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d136      	bne.n	800123e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	0013      	movs	r3, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	f000 f883 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e053      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d911      	bls.n	8001218 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	045c      	lsls	r4, r3, #17
 8001204:	230a      	movs	r3, #10
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	8819      	ldrh	r1, [r3, #0]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	0023      	movs	r3, r4
 8001212:	f000 f99d 	bl	8001550 <I2C_TransferConfig>
 8001216:	e012      	b.n	800123e <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121c:	b29a      	uxth	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001226:	b2da      	uxtb	r2, r3
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	049c      	lsls	r4, r3, #18
 800122c:	230a      	movs	r3, #10
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	8819      	ldrh	r1, [r3, #0]
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	2300      	movs	r3, #0
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	0023      	movs	r3, r4
 800123a:	f000 f989 	bl	8001550 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001242:	b29b      	uxth	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d198      	bne.n	800117a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f8c8 	bl	80013e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e01a      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2220      	movs	r2, #32
 8001262:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	490c      	ldr	r1, [pc, #48]	; (80012a0 <HAL_I2C_Master_Transmit+0x20c>)
 8001270:	400a      	ands	r2, r1
 8001272:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2241      	movs	r2, #65	; 0x41
 8001278:	2120      	movs	r1, #32
 800127a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2242      	movs	r2, #66	; 0x42
 8001280:	2100      	movs	r1, #0
 8001282:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2240      	movs	r2, #64	; 0x40
 8001288:	2100      	movs	r1, #0
 800128a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	e000      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001290:	2302      	movs	r3, #2
  }
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b007      	add	sp, #28
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	80002000 	.word	0x80002000
 80012a0:	fe00e800 	.word	0xfe00e800

080012a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2202      	movs	r2, #2
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d103      	bne.n	80012c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d007      	beq.n	80012e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	430a      	orrs	r2, r1
 80012de:	619a      	str	r2, [r3, #24]
  }
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012f8:	e021      	b.n	800133e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	d01e      	beq.n	800133e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001300:	f7ff fbce 	bl	8000aa0 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d302      	bcc.n	8001316 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d113      	bne.n	800133e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	2220      	movs	r2, #32
 800131c:	431a      	orrs	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2241      	movs	r2, #65	; 0x41
 8001326:	2120      	movs	r1, #32
 8001328:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2242      	movs	r2, #66	; 0x42
 800132e:	2100      	movs	r1, #0
 8001330:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	2100      	movs	r1, #0
 8001338:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4013      	ands	r3, r2
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	425a      	negs	r2, r3
 800134e:	4153      	adcs	r3, r2
 8001350:	b2db      	uxtb	r3, r3
 8001352:	001a      	movs	r2, r3
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d0ce      	beq.n	80012fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}

08001366 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001372:	e02b      	b.n	80013cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f86e 	bl	800145c <I2C_IsAcknowledgeFailed>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d001      	beq.n	8001388 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e029      	b.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3301      	adds	r3, #1
 800138c:	d01e      	beq.n	80013cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800138e:	f7ff fb87 	bl	8000aa0 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	429a      	cmp	r2, r3
 800139c:	d302      	bcc.n	80013a4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d113      	bne.n	80013cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	2220      	movs	r2, #32
 80013aa:	431a      	orrs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2241      	movs	r2, #65	; 0x41
 80013b4:	2120      	movs	r1, #32
 80013b6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2242      	movs	r2, #66	; 0x42
 80013bc:	2100      	movs	r1, #0
 80013be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	2100      	movs	r1, #0
 80013c6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e007      	b.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2202      	movs	r2, #2
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d1cc      	bne.n	8001374 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b004      	add	sp, #16
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013f0:	e028      	b.n	8001444 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f000 f82f 	bl	800145c <I2C_IsAcknowledgeFailed>
 80013fe:	1e03      	subs	r3, r0, #0
 8001400:	d001      	beq.n	8001406 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e026      	b.n	8001454 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001406:	f7ff fb4b 	bl	8000aa0 <HAL_GetTick>
 800140a:	0002      	movs	r2, r0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	429a      	cmp	r2, r3
 8001414:	d302      	bcc.n	800141c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d113      	bne.n	8001444 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	2220      	movs	r2, #32
 8001422:	431a      	orrs	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2241      	movs	r2, #65	; 0x41
 800142c:	2120      	movs	r1, #32
 800142e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2242      	movs	r2, #66	; 0x42
 8001434:	2100      	movs	r1, #0
 8001436:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	2100      	movs	r1, #0
 800143e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e007      	b.n	8001454 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2220      	movs	r2, #32
 800144c:	4013      	ands	r3, r2
 800144e:	2b20      	cmp	r3, #32
 8001450:	d1cf      	bne.n	80013f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b004      	add	sp, #16
 800145a:	bd80      	pop	{r7, pc}

0800145c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2210      	movs	r2, #16
 8001470:	4013      	ands	r3, r2
 8001472:	2b10      	cmp	r3, #16
 8001474:	d164      	bne.n	8001540 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	049b      	lsls	r3, r3, #18
 8001480:	401a      	ands	r2, r3
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	049b      	lsls	r3, r3, #18
 8001486:	429a      	cmp	r2, r3
 8001488:	d02b      	beq.n	80014e2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	01c9      	lsls	r1, r1, #7
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800149c:	e021      	b.n	80014e2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3301      	adds	r3, #1
 80014a2:	d01e      	beq.n	80014e2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a4:	f7ff fafc 	bl	8000aa0 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d302      	bcc.n	80014ba <I2C_IsAcknowledgeFailed+0x5e>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d113      	bne.n	80014e2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	2220      	movs	r2, #32
 80014c0:	431a      	orrs	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2241      	movs	r2, #65	; 0x41
 80014ca:	2120      	movs	r1, #32
 80014cc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2242      	movs	r2, #66	; 0x42
 80014d2:	2100      	movs	r1, #0
 80014d4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2240      	movs	r2, #64	; 0x40
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e02f      	b.n	8001542 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2220      	movs	r2, #32
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b20      	cmp	r3, #32
 80014ee:	d1d6      	bne.n	800149e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2210      	movs	r2, #16
 80014f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2220      	movs	r2, #32
 80014fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff fece 	bl	80012a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <I2C_IsAcknowledgeFailed+0xf0>)
 8001514:	400a      	ands	r2, r1
 8001516:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	2204      	movs	r2, #4
 800151e:	431a      	orrs	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2241      	movs	r2, #65	; 0x41
 8001528:	2120      	movs	r1, #32
 800152a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2242      	movs	r2, #66	; 0x42
 8001530:	2100      	movs	r1, #0
 8001532:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	2100      	movs	r1, #0
 800153a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b004      	add	sp, #16
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	fe00e800 	.word	0xfe00e800

08001550 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	0008      	movs	r0, r1
 800155a:	0011      	movs	r1, r2
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	240a      	movs	r4, #10
 8001560:	193b      	adds	r3, r7, r4
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	801a      	strh	r2, [r3, #0]
 8001566:	2009      	movs	r0, #9
 8001568:	183b      	adds	r3, r7, r0
 800156a:	1c0a      	adds	r2, r1, #0
 800156c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	6a3a      	ldr	r2, [r7, #32]
 8001576:	0d51      	lsrs	r1, r2, #21
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	00d2      	lsls	r2, r2, #3
 800157c:	400a      	ands	r2, r1
 800157e:	490e      	ldr	r1, [pc, #56]	; (80015b8 <I2C_TransferConfig+0x68>)
 8001580:	430a      	orrs	r2, r1
 8001582:	43d2      	mvns	r2, r2
 8001584:	401a      	ands	r2, r3
 8001586:	0011      	movs	r1, r2
 8001588:	193b      	adds	r3, r7, r4
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	059b      	lsls	r3, r3, #22
 800158e:	0d9a      	lsrs	r2, r3, #22
 8001590:	183b      	adds	r3, r7, r0
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	0418      	lsls	r0, r3, #16
 8001596:	23ff      	movs	r3, #255	; 0xff
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	4003      	ands	r3, r0
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b005      	add	sp, #20
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	03ff63ff 	.word	0x03ff63ff

080015bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2241      	movs	r2, #65	; 0x41
 80015ca:	5c9b      	ldrb	r3, [r3, r2]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d138      	bne.n	8001644 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2240      	movs	r2, #64	; 0x40
 80015d6:	5c9b      	ldrb	r3, [r3, r2]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015dc:	2302      	movs	r3, #2
 80015de:	e032      	b.n	8001646 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2240      	movs	r2, #64	; 0x40
 80015e4:	2101      	movs	r1, #1
 80015e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2241      	movs	r2, #65	; 0x41
 80015ec:	2124      	movs	r1, #36	; 0x24
 80015ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2101      	movs	r1, #1
 80015fc:	438a      	bics	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4911      	ldr	r1, [pc, #68]	; (8001650 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800160c:	400a      	ands	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2101      	movs	r1, #1
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2241      	movs	r2, #65	; 0x41
 8001634:	2120      	movs	r1, #32
 8001636:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2240      	movs	r2, #64	; 0x40
 800163c:	2100      	movs	r1, #0
 800163e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e000      	b.n	8001646 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001644:	2302      	movs	r3, #2
  }
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	ffffefff 	.word	0xffffefff

08001654 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2241      	movs	r2, #65	; 0x41
 8001662:	5c9b      	ldrb	r3, [r3, r2]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b20      	cmp	r3, #32
 8001668:	d139      	bne.n	80016de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001674:	2302      	movs	r3, #2
 8001676:	e033      	b.n	80016e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2241      	movs	r2, #65	; 0x41
 8001684:	2124      	movs	r1, #36	; 0x24
 8001686:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2101      	movs	r1, #1
 8001694:	438a      	bics	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2241      	movs	r2, #65	; 0x41
 80016ce:	2120      	movs	r1, #32
 80016d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	2100      	movs	r1, #0
 80016d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016de:	2302      	movs	r3, #2
  }
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b004      	add	sp, #16
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	fffff0ff 	.word	0xfffff0ff

080016ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	0019      	movs	r1, r3
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d11f      	bne.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	0013      	movs	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	189b      	adds	r3, r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4912      	ldr	r1, [pc, #72]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800171e:	0018      	movs	r0, r3
 8001720:	f7fe fcf2 	bl	8000108 <__udivsi3>
 8001724:	0003      	movs	r3, r0
 8001726:	3301      	adds	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800172a:	e008      	b.n	800173e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b01      	subs	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e001      	b.n	800173e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e009      	b.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	401a      	ands	r2, r3
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	429a      	cmp	r2, r3
 800174e:	d0ed      	beq.n	800172c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b004      	add	sp, #16
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	40007000 	.word	0x40007000
 8001760:	fffff9ff 	.word	0xfffff9ff
 8001764:	20000000 	.word	0x20000000
 8001768:	000f4240 	.word	0x000f4240

0800176c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e304      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2201      	movs	r2, #1
 8001784:	4013      	ands	r3, r2
 8001786:	d100      	bne.n	800178a <HAL_RCC_OscConfig+0x1e>
 8001788:	e07c      	b.n	8001884 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178a:	4bc3      	ldr	r3, [pc, #780]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2238      	movs	r2, #56	; 0x38
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001794:	4bc0      	ldr	r3, [pc, #768]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2203      	movs	r2, #3
 800179a:	4013      	ands	r3, r2
 800179c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d102      	bne.n	80017aa <HAL_RCC_OscConfig+0x3e>
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d10b      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	4bb9      	ldr	r3, [pc, #740]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	4013      	ands	r3, r2
 80017ba:	d062      	beq.n	8001882 <HAL_RCC_OscConfig+0x116>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d15e      	bne.n	8001882 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e2df      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	025b      	lsls	r3, r3, #9
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_OscConfig+0x78>
 80017d4:	4bb0      	ldr	r3, [pc, #704]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4baf      	ldr	r3, [pc, #700]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	0249      	lsls	r1, r1, #9
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e020      	b.n	8001826 <HAL_RCC_OscConfig+0xba>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	23a0      	movs	r3, #160	; 0xa0
 80017ea:	02db      	lsls	r3, r3, #11
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d10e      	bne.n	800180e <HAL_RCC_OscConfig+0xa2>
 80017f0:	4ba9      	ldr	r3, [pc, #676]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4ba8      	ldr	r3, [pc, #672]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	02c9      	lsls	r1, r1, #11
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	4ba6      	ldr	r3, [pc, #664]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4ba5      	ldr	r3, [pc, #660]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	0249      	lsls	r1, r1, #9
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e00b      	b.n	8001826 <HAL_RCC_OscConfig+0xba>
 800180e:	4ba2      	ldr	r3, [pc, #648]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4ba1      	ldr	r3, [pc, #644]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001814:	49a1      	ldr	r1, [pc, #644]	; (8001a9c <HAL_RCC_OscConfig+0x330>)
 8001816:	400a      	ands	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	4b9f      	ldr	r3, [pc, #636]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b9e      	ldr	r3, [pc, #632]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001820:	499f      	ldr	r1, [pc, #636]	; (8001aa0 <HAL_RCC_OscConfig+0x334>)
 8001822:	400a      	ands	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d014      	beq.n	8001858 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182e:	f7ff f937 	bl	8000aa0 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff f932 	bl	8000aa0 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	; 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e29e      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184a:	4b93      	ldr	r3, [pc, #588]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	029b      	lsls	r3, r3, #10
 8001852:	4013      	ands	r3, r2
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0xcc>
 8001856:	e015      	b.n	8001884 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f922 	bl	8000aa0 <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001862:	f7ff f91d 	bl	8000aa0 <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b64      	cmp	r3, #100	; 0x64
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e289      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001874:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	029b      	lsls	r3, r3, #10
 800187c:	4013      	ands	r3, r2
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0xf6>
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001882:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d100      	bne.n	8001890 <HAL_RCC_OscConfig+0x124>
 800188e:	e099      	b.n	80019c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001890:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2238      	movs	r2, #56	; 0x38
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800189a:	4b7f      	ldr	r3, [pc, #508]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2203      	movs	r2, #3
 80018a0:	4013      	ands	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0x144>
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d002      	beq.n	80018b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d135      	bne.n	8001922 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b6:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4013      	ands	r3, r2
 80018c0:	d005      	beq.n	80018ce <HAL_RCC_OscConfig+0x162>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e25c      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	4b72      	ldr	r3, [pc, #456]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x338>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	021a      	lsls	r2, r3, #8
 80018de:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d112      	bne.n	8001910 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018ea:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x33c>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018fe:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0adb      	lsrs	r3, r3, #11
 8001904:	2207      	movs	r2, #7
 8001906:	4013      	ands	r3, r2
 8001908:	4a68      	ldr	r2, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x340>)
 800190a:	40da      	lsrs	r2, r3
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x344>)
 800190e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_OscConfig+0x348>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff f867 	bl	80009e8 <HAL_InitTick>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d051      	beq.n	80019c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e232      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d030      	beq.n	800198c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800192a:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5e      	ldr	r2, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x33c>)
 8001930:	4013      	ands	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	0049      	lsls	r1, r1, #1
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f8a8 	bl	8000aa0 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff f8a3 	bl	8000aa0 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e20f      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4013      	ands	r3, r2
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_RCC_OscConfig+0x338>)
 800197a:	4013      	ands	r3, r2
 800197c:	0019      	movs	r1, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	021a      	lsls	r2, r3, #8
 8001984:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	e01b      	b.n	80019c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800198c:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001992:	4949      	ldr	r1, [pc, #292]	; (8001ab8 <HAL_RCC_OscConfig+0x34c>)
 8001994:	400a      	ands	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f882 	bl	8000aa0 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff f87d 	bl	8000aa0 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1e9      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4013      	ands	r3, r2
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x236>
 80019c0:	e000      	b.n	80019c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2208      	movs	r2, #8
 80019ca:	4013      	ands	r3, r2
 80019cc:	d047      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2238      	movs	r2, #56	; 0x38
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b18      	cmp	r3, #24
 80019d8:	d10a      	bne.n	80019f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d03c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d138      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e1cb      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d019      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f84c 	bl	8000aa0 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f847 	bl	8000aa0 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e1b3      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d0f1      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2a2>
 8001a2a:	e018      	b.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	438a      	bics	r2, r1
 8001a36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f832 	bl	8000aa0 <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff f82d 	bl	8000aa0 <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e199      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d1f1      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2fe>
 8001a68:	e0c6      	b.n	8001bf8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6a:	231f      	movs	r3, #31
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2238      	movs	r2, #56	; 0x38
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d11e      	bne.n	8001abc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x32c>)
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d100      	bne.n	8001a8a <HAL_RCC_OscConfig+0x31e>
 8001a88:	e0b6      	b.n	8001bf8 <HAL_RCC_OscConfig+0x48c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d000      	beq.n	8001a94 <HAL_RCC_OscConfig+0x328>
 8001a92:	e0b1      	b.n	8001bf8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e177      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	fffeffff 	.word	0xfffeffff
 8001aa0:	fffbffff 	.word	0xfffbffff
 8001aa4:	ffff80ff 	.word	0xffff80ff
 8001aa8:	ffffc7ff 	.word	0xffffc7ff
 8001aac:	00f42400 	.word	0x00f42400
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001abc:	4bb4      	ldr	r3, [pc, #720]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	055b      	lsls	r3, r3, #21
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_OscConfig+0x360>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x362>
 8001acc:	2300      	movs	r3, #0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d011      	beq.n	8001af6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4baf      	ldr	r3, [pc, #700]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad6:	4bae      	ldr	r3, [pc, #696]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	0549      	lsls	r1, r1, #21
 8001adc:	430a      	orrs	r2, r1
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ae0:	4bab      	ldr	r3, [pc, #684]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	055b      	lsls	r3, r3, #21
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001aee:	231f      	movs	r3, #31
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af6:	4ba7      	ldr	r3, [pc, #668]	; (8001d94 <HAL_RCC_OscConfig+0x628>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	d11a      	bne.n	8001b38 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b02:	4ba4      	ldr	r3, [pc, #656]	; (8001d94 <HAL_RCC_OscConfig+0x628>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4ba3      	ldr	r3, [pc, #652]	; (8001d94 <HAL_RCC_OscConfig+0x628>)
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	0049      	lsls	r1, r1, #1
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b10:	f7fe ffc6 	bl	8000aa0 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7fe ffc1 	bl	8000aa0 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e12d      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2c:	4b99      	ldr	r3, [pc, #612]	; (8001d94 <HAL_RCC_OscConfig+0x628>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4013      	ands	r3, r2
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3e2>
 8001b40:	4b93      	ldr	r3, [pc, #588]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b44:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x41c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x404>
 8001b56:	4b8e      	ldr	r3, [pc, #568]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b5a:	4b8d      	ldr	r3, [pc, #564]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b66:	4b8a      	ldr	r3, [pc, #552]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b68:	2101      	movs	r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0x41c>
 8001b70:	4b87      	ldr	r3, [pc, #540]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b74:	4b86      	ldr	r3, [pc, #536]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	438a      	bics	r2, r1
 8001b7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b80:	4b83      	ldr	r3, [pc, #524]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001b82:	2104      	movs	r1, #4
 8001b84:	438a      	bics	r2, r1
 8001b86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d014      	beq.n	8001bba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe ff86 	bl	8000aa0 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7fe ff81 	bl	8000aa0 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4a7c      	ldr	r2, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x62c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0ec      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bae:	4b78      	ldr	r3, [pc, #480]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x42e>
 8001bb8:	e013      	b.n	8001be2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7fe ff71 	bl	8000aa0 <HAL_GetTick>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc2:	e009      	b.n	8001bd8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7fe ff6c 	bl	8000aa0 <HAL_GetTick>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	4a72      	ldr	r2, [pc, #456]	; (8001d98 <HAL_RCC_OscConfig+0x62c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0d7      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd8:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001be2:	231f      	movs	r3, #31
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bf0:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001bf2:	496a      	ldr	r1, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x630>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x496>
 8001c00:	e0c1      	b.n	8001d86 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2238      	movs	r2, #56	; 0x38
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d100      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4a4>
 8001c0e:	e081      	b.n	8001d14 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d156      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c18:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c1e:	4960      	ldr	r1, [pc, #384]	; (8001da0 <HAL_RCC_OscConfig+0x634>)
 8001c20:	400a      	ands	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7fe ff3c 	bl	8000aa0 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7fe ff37 	bl	8000aa0 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0a3      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	049b      	lsls	r3, r3, #18
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_RCC_OscConfig+0x638>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	4b45      	ldr	r3, [pc, #276]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0449      	lsls	r1, r1, #17
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c8e:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0549      	lsls	r1, r1, #21
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ff00 	bl	8000aa0 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe fefb 	bl	8000aa0 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e067      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	049b      	lsls	r3, r3, #18
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x53a>
 8001cc4:	e05f      	b.n	8001d86 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001ccc:	4934      	ldr	r1, [pc, #208]	; (8001da0 <HAL_RCC_OscConfig+0x634>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001cd8:	2103      	movs	r1, #3
 8001cda:	438a      	bics	r2, r1
 8001cdc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001ce4:	4930      	ldr	r1, [pc, #192]	; (8001da8 <HAL_RCC_OscConfig+0x63c>)
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7fe fed9 	bl	8000aa0 <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe fed4 	bl	8000aa0 <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e040      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	049b      	lsls	r3, r3, #18
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x588>
 8001d12:	e038      	b.n	8001d86 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e033      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x624>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d126      	bne.n	8001d82 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2270      	movs	r2, #112	; 0x70
 8001d38:	401a      	ands	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d11f      	bne.n	8001d82 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	23fe      	movs	r3, #254	; 0xfe
 8001d46:	01db      	lsls	r3, r3, #7
 8001d48:	401a      	ands	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d116      	bne.n	8001d82 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	23f8      	movs	r3, #248	; 0xf8
 8001d58:	039b      	lsls	r3, r3, #14
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d10e      	bne.n	8001d82 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	23e0      	movs	r3, #224	; 0xe0
 8001d68:	051b      	lsls	r3, r3, #20
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	0f5b      	lsrs	r3, r3, #29
 8001d78:	075a      	lsls	r2, r3, #29
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b008      	add	sp, #32
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
 8001d98:	00001388 	.word	0x00001388
 8001d9c:	efffffff 	.word	0xefffffff
 8001da0:	feffffff 	.word	0xfeffffff
 8001da4:	11c1808c 	.word	0x11c1808c
 8001da8:	eefeffff 	.word	0xeefeffff

08001dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0e9      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b76      	ldr	r3, [pc, #472]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d91e      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b73      	ldr	r3, [pc, #460]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	4b70      	ldr	r3, [pc, #448]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001de0:	f7fe fe5e 	bl	8000aa0 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001de8:	e009      	b.n	8001dfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dea:	f7fe fe59 	bl	8000aa0 <HAL_GetTick>
 8001dee:	0002      	movs	r2, r0
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	4a6a      	ldr	r2, [pc, #424]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e0ca      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2207      	movs	r2, #7
 8001e04:	4013      	ands	r3, r2
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1ee      	bne.n	8001dea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2202      	movs	r2, #2
 8001e12:	4013      	ands	r3, r2
 8001e14:	d015      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d006      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e20:	4b60      	ldr	r3, [pc, #384]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e26:	21e0      	movs	r1, #224	; 0xe0
 8001e28:	01c9      	lsls	r1, r1, #7
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a5d      	ldr	r2, [pc, #372]	; (8001fa8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d057      	beq.n	8001efc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	029b      	lsls	r3, r3, #10
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d12b      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e097      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6c:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	049b      	lsls	r3, r3, #18
 8001e74:	4013      	ands	r3, r2
 8001e76:	d11f      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e08b      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d113      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e07f      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9c:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d108      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e074      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e06d      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	4393      	bics	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fde8 	bl	8000aa0 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed4:	e009      	b.n	8001eea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed6:	f7fe fde3 	bl	8000aa0 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e054      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2238      	movs	r2, #56	; 0x38
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1ec      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2207      	movs	r2, #7
 8001f02:	4013      	ands	r3, r2
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d21e      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2207      	movs	r2, #7
 8001f10:	4393      	bics	r3, r2
 8001f12:	0019      	movs	r1, r3
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f1c:	f7fe fdc0 	bl	8000aa0 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f24:	e009      	b.n	8001f3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f26:	f7fe fdbb 	bl	8000aa0 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e02c      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2207      	movs	r2, #7
 8001f40:	4013      	ands	r3, r2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1ee      	bne.n	8001f26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_RCC_ClockConfig+0x200>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f66:	f000 f829 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f6a:	0001      	movs	r1, r0
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	220f      	movs	r2, #15
 8001f74:	401a      	ands	r2, r3
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x204>)
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	58d3      	ldr	r3, [r2, r3]
 8001f7c:	221f      	movs	r2, #31
 8001f7e:	4013      	ands	r3, r2
 8001f80:	000a      	movs	r2, r1
 8001f82:	40da      	lsrs	r2, r3
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x208>)
 8001f86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_ClockConfig+0x20c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe fd2b 	bl	80009e8 <HAL_InitTick>
 8001f92:	0003      	movs	r3, r0
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b004      	add	sp, #16
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	00001388 	.word	0x00001388
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	fffff0ff 	.word	0xfffff0ff
 8001fac:	ffff8fff 	.word	0xffff8fff
 8001fb0:	08002cd8 	.word	0x08002cd8
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc2:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2238      	movs	r2, #56	; 0x38
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d10f      	bne.n	8001fec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0adb      	lsrs	r3, r3, #11
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	0013      	movs	r3, r2
 8001fdc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	4835      	ldr	r0, [pc, #212]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fe2:	f7fe f891 	bl	8000108 <__udivsi3>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	e05d      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2238      	movs	r2, #56	; 0x38
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d102      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_GetSysClockFreq+0x100>)
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	e054      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2238      	movs	r2, #56	; 0x38
 8002004:	4013      	ands	r3, r2
 8002006:	2b10      	cmp	r3, #16
 8002008:	d138      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2203      	movs	r2, #3
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	2207      	movs	r2, #7
 800201c:	4013      	ands	r3, r2
 800201e:	3301      	adds	r3, #1
 8002020:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d10d      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	4824      	ldr	r0, [pc, #144]	; (80020bc <HAL_RCC_GetSysClockFreq+0x100>)
 800202c:	f7fe f86c 	bl	8000108 <__udivsi3>
 8002030:	0003      	movs	r3, r0
 8002032:	0019      	movs	r1, r3
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	227f      	movs	r2, #127	; 0x7f
 800203c:	4013      	ands	r3, r2
 800203e:	434b      	muls	r3, r1
 8002040:	617b      	str	r3, [r7, #20]
        break;
 8002042:	e00d      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	481c      	ldr	r0, [pc, #112]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002048:	f7fe f85e 	bl	8000108 <__udivsi3>
 800204c:	0003      	movs	r3, r0
 800204e:	0019      	movs	r1, r3
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	227f      	movs	r2, #127	; 0x7f
 8002058:	4013      	ands	r3, r2
 800205a:	434b      	muls	r3, r1
 800205c:	617b      	str	r3, [r7, #20]
        break;
 800205e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0f5b      	lsrs	r3, r3, #29
 8002066:	2207      	movs	r2, #7
 8002068:	4013      	ands	r3, r2
 800206a:	3301      	adds	r3, #1
 800206c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	6978      	ldr	r0, [r7, #20]
 8002072:	f7fe f849 	bl	8000108 <__udivsi3>
 8002076:	0003      	movs	r3, r0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	e015      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2238      	movs	r2, #56	; 0x38
 8002082:	4013      	ands	r3, r2
 8002084:	2b20      	cmp	r3, #32
 8002086:	d103      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2238      	movs	r2, #56	; 0x38
 8002096:	4013      	ands	r3, r2
 8002098:	2b18      	cmp	r3, #24
 800209a:	d103      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800209c:	23fa      	movs	r3, #250	; 0xfa
 800209e:	01db      	lsls	r3, r3, #7
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e001      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020a8:	693b      	ldr	r3, [r7, #16]
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b006      	add	sp, #24
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	40021000 	.word	0x40021000
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	007a1200 	.word	0x007a1200

080020c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e04a      	b.n	8002168 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	223d      	movs	r2, #61	; 0x3d
 80020d6:	5c9b      	ldrb	r3, [r3, r2]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d107      	bne.n	80020ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	223c      	movs	r2, #60	; 0x3c
 80020e2:	2100      	movs	r1, #0
 80020e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f7fe fbb7 	bl	800085c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223d      	movs	r2, #61	; 0x3d
 80020f2:	2102      	movs	r1, #2
 80020f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	0019      	movs	r1, r3
 8002100:	0010      	movs	r0, r2
 8002102:	f000 fa09 	bl	8002518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2248      	movs	r2, #72	; 0x48
 800210a:	2101      	movs	r1, #1
 800210c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	223e      	movs	r2, #62	; 0x3e
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	223f      	movs	r2, #63	; 0x3f
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2240      	movs	r2, #64	; 0x40
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2241      	movs	r2, #65	; 0x41
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2242      	movs	r2, #66	; 0x42
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2243      	movs	r2, #67	; 0x43
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2244      	movs	r2, #68	; 0x44
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2245      	movs	r2, #69	; 0x45
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2246      	movs	r2, #70	; 0x46
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2247      	movs	r2, #71	; 0x47
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	223d      	movs	r2, #61	; 0x3d
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d108      	bne.n	8002192 <HAL_TIM_PWM_Start+0x22>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	223e      	movs	r2, #62	; 0x3e
 8002184:	5c9b      	ldrb	r3, [r3, r2]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	1e5a      	subs	r2, r3, #1
 800218c:	4193      	sbcs	r3, r2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e037      	b.n	8002202 <HAL_TIM_PWM_Start+0x92>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d108      	bne.n	80021aa <HAL_TIM_PWM_Start+0x3a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	5c9b      	ldrb	r3, [r3, r2]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	1e5a      	subs	r2, r3, #1
 80021a4:	4193      	sbcs	r3, r2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	e02b      	b.n	8002202 <HAL_TIM_PWM_Start+0x92>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d108      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x52>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	4193      	sbcs	r3, r2
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	e01f      	b.n	8002202 <HAL_TIM_PWM_Start+0x92>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d108      	bne.n	80021da <HAL_TIM_PWM_Start+0x6a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2241      	movs	r2, #65	; 0x41
 80021cc:	5c9b      	ldrb	r3, [r3, r2]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	4193      	sbcs	r3, r2
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	e013      	b.n	8002202 <HAL_TIM_PWM_Start+0x92>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d108      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x82>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2242      	movs	r2, #66	; 0x42
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	1e5a      	subs	r2, r3, #1
 80021ec:	4193      	sbcs	r3, r2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e007      	b.n	8002202 <HAL_TIM_PWM_Start+0x92>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2243      	movs	r2, #67	; 0x43
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	4193      	sbcs	r3, r2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e081      	b.n	800230e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <HAL_TIM_PWM_Start+0xaa>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	223e      	movs	r2, #62	; 0x3e
 8002214:	2102      	movs	r1, #2
 8002216:	5499      	strb	r1, [r3, r2]
 8002218:	e023      	b.n	8002262 <HAL_TIM_PWM_Start+0xf2>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d104      	bne.n	800222a <HAL_TIM_PWM_Start+0xba>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	223f      	movs	r2, #63	; 0x3f
 8002224:	2102      	movs	r1, #2
 8002226:	5499      	strb	r1, [r3, r2]
 8002228:	e01b      	b.n	8002262 <HAL_TIM_PWM_Start+0xf2>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d104      	bne.n	800223a <HAL_TIM_PWM_Start+0xca>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	2102      	movs	r1, #2
 8002236:	5499      	strb	r1, [r3, r2]
 8002238:	e013      	b.n	8002262 <HAL_TIM_PWM_Start+0xf2>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d104      	bne.n	800224a <HAL_TIM_PWM_Start+0xda>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2241      	movs	r2, #65	; 0x41
 8002244:	2102      	movs	r1, #2
 8002246:	5499      	strb	r1, [r3, r2]
 8002248:	e00b      	b.n	8002262 <HAL_TIM_PWM_Start+0xf2>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b10      	cmp	r3, #16
 800224e:	d104      	bne.n	800225a <HAL_TIM_PWM_Start+0xea>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2242      	movs	r2, #66	; 0x42
 8002254:	2102      	movs	r1, #2
 8002256:	5499      	strb	r1, [r3, r2]
 8002258:	e003      	b.n	8002262 <HAL_TIM_PWM_Start+0xf2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2243      	movs	r2, #67	; 0x43
 800225e:	2102      	movs	r1, #2
 8002260:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	0018      	movs	r0, r3
 800226c:	f000 fc66 	bl	8002b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_TIM_PWM_Start+0x1a8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_TIM_PWM_Start+0x11e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a27      	ldr	r2, [pc, #156]	; (800231c <HAL_TIM_PWM_Start+0x1ac>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d004      	beq.n	800228e <HAL_TIM_PWM_Start+0x11e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <HAL_TIM_PWM_Start+0x1b0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_TIM_PWM_Start+0x122>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_TIM_PWM_Start+0x124>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	0209      	lsls	r1, r1, #8
 80022a6:	430a      	orrs	r2, r1
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_TIM_PWM_Start+0x1a8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00a      	beq.n	80022ca <HAL_TIM_PWM_Start+0x15a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	05db      	lsls	r3, r3, #23
 80022bc:	429a      	cmp	r2, r3
 80022be:	d004      	beq.n	80022ca <HAL_TIM_PWM_Start+0x15a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_TIM_PWM_Start+0x1b4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d116      	bne.n	80022f8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a15      	ldr	r2, [pc, #84]	; (8002328 <HAL_TIM_PWM_Start+0x1b8>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b06      	cmp	r3, #6
 80022da:	d016      	beq.n	800230a <HAL_TIM_PWM_Start+0x19a>
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	025b      	lsls	r3, r3, #9
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d011      	beq.n	800230a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f6:	e008      	b.n	800230a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e000      	b.n	800230c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40012c00 	.word	0x40012c00
 800231c:	40014400 	.word	0x40014400
 8002320:	40014800 	.word	0x40014800
 8002324:	40000400 	.word	0x40000400
 8002328:	00010007 	.word	0x00010007

0800232c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	223c      	movs	r2, #60	; 0x3c
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002342:	2302      	movs	r3, #2
 8002344:	e0df      	b.n	8002506 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	223c      	movs	r2, #60	; 0x3c
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b14      	cmp	r3, #20
 8002352:	d900      	bls.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002354:	e0d1      	b.n	80024fa <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	009a      	lsls	r2, r3, #2
 800235a:	4b6d      	ldr	r3, [pc, #436]	; (8002510 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800235c:	18d3      	adds	r3, r2, r3
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f94a 	bl	8002604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2108      	movs	r1, #8
 800237c:	430a      	orrs	r2, r1
 800237e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2104      	movs	r1, #4
 800238c:	438a      	bics	r2, r1
 800238e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6999      	ldr	r1, [r3, #24]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	619a      	str	r2, [r3, #24]
      break;
 80023a2:	e0ab      	b.n	80024fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	0011      	movs	r1, r2
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 f9a9 	bl	8002704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	0109      	lsls	r1, r1, #4
 80023c0:	430a      	orrs	r2, r1
 80023c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4951      	ldr	r1, [pc, #324]	; (8002514 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6999      	ldr	r1, [r3, #24]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	021a      	lsls	r2, r3, #8
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	619a      	str	r2, [r3, #24]
      break;
 80023e8:	e088      	b.n	80024fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	0011      	movs	r1, r2
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fa04 	bl	8002800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2108      	movs	r1, #8
 8002404:	430a      	orrs	r2, r1
 8002406:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2104      	movs	r1, #4
 8002414:	438a      	bics	r2, r1
 8002416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69d9      	ldr	r1, [r3, #28]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	61da      	str	r2, [r3, #28]
      break;
 800242a:	e067      	b.n	80024fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	0011      	movs	r1, r2
 8002434:	0018      	movs	r0, r3
 8002436:	f000 fa65 	bl	8002904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0109      	lsls	r1, r1, #4
 8002448:	430a      	orrs	r2, r1
 800244a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	492f      	ldr	r1, [pc, #188]	; (8002514 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002458:	400a      	ands	r2, r1
 800245a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69d9      	ldr	r1, [r3, #28]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	021a      	lsls	r2, r3, #8
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
      break;
 8002470:	e044      	b.n	80024fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	0011      	movs	r1, r2
 800247a:	0018      	movs	r0, r3
 800247c:	f000 faa6 	bl	80029cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2108      	movs	r1, #8
 800248c:	430a      	orrs	r2, r1
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2104      	movs	r1, #4
 800249c:	438a      	bics	r2, r1
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80024b2:	e023      	b.n	80024fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	0011      	movs	r1, r2
 80024bc:	0018      	movs	r0, r3
 80024be:	f000 fadf 	bl	8002a80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	0109      	lsls	r1, r1, #4
 80024d0:	430a      	orrs	r2, r1
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	490d      	ldr	r1, [pc, #52]	; (8002514 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	021a      	lsls	r2, r3, #8
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80024f8:	e000      	b.n	80024fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80024fa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	223c      	movs	r2, #60	; 0x3c
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b004      	add	sp, #16
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	08002d18 	.word	0x08002d18
 8002514:	fffffbff 	.word	0xfffffbff

08002518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a30      	ldr	r2, [pc, #192]	; (80025ec <TIM_Base_SetConfig+0xd4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d008      	beq.n	8002542 <TIM_Base_SetConfig+0x2a>
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	05db      	lsls	r3, r3, #23
 8002536:	429a      	cmp	r2, r3
 8002538:	d003      	beq.n	8002542 <TIM_Base_SetConfig+0x2a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2c      	ldr	r2, [pc, #176]	; (80025f0 <TIM_Base_SetConfig+0xd8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d108      	bne.n	8002554 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2270      	movs	r2, #112	; 0x70
 8002546:	4393      	bics	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a25      	ldr	r2, [pc, #148]	; (80025ec <TIM_Base_SetConfig+0xd4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d014      	beq.n	8002586 <TIM_Base_SetConfig+0x6e>
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	05db      	lsls	r3, r3, #23
 8002562:	429a      	cmp	r2, r3
 8002564:	d00f      	beq.n	8002586 <TIM_Base_SetConfig+0x6e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <TIM_Base_SetConfig+0xd8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00b      	beq.n	8002586 <TIM_Base_SetConfig+0x6e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <TIM_Base_SetConfig+0xdc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <TIM_Base_SetConfig+0x6e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <TIM_Base_SetConfig+0xe0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d003      	beq.n	8002586 <TIM_Base_SetConfig+0x6e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <TIM_Base_SetConfig+0xe4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d108      	bne.n	8002598 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <TIM_Base_SetConfig+0xe8>)
 800258a:	4013      	ands	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	4393      	bics	r3, r2
 800259e:	001a      	movs	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <TIM_Base_SetConfig+0xd4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <TIM_Base_SetConfig+0xbe>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <TIM_Base_SetConfig+0xe0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d003      	beq.n	80025d6 <TIM_Base_SetConfig+0xbe>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <TIM_Base_SetConfig+0xe4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d103      	bne.n	80025de <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	615a      	str	r2, [r3, #20]
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b004      	add	sp, #16
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40002000 	.word	0x40002000
 80025f8:	40014400 	.word	0x40014400
 80025fc:	40014800 	.word	0x40014800
 8002600:	fffffcff 	.word	0xfffffcff

08002604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2201      	movs	r2, #1
 8002614:	4393      	bics	r3, r2
 8002616:	001a      	movs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <TIM_OC1_SetConfig+0xe8>)
 8002632:	4013      	ands	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2203      	movs	r2, #3
 800263a:	4393      	bics	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2202      	movs	r2, #2
 800264c:	4393      	bics	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <TIM_OC1_SetConfig+0xec>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <TIM_OC1_SetConfig+0x6e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <TIM_OC1_SetConfig+0xf0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d003      	beq.n	8002672 <TIM_OC1_SetConfig+0x6e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <TIM_OC1_SetConfig+0xf4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10c      	bne.n	800268c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2208      	movs	r2, #8
 8002676:	4393      	bics	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2204      	movs	r2, #4
 8002688:	4393      	bics	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <TIM_OC1_SetConfig+0xec>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <TIM_OC1_SetConfig+0xa0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <TIM_OC1_SetConfig+0xf0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <TIM_OC1_SetConfig+0xa0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <TIM_OC1_SetConfig+0xf4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <TIM_OC1_SetConfig+0xf8>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <TIM_OC1_SetConfig+0xfc>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	621a      	str	r2, [r3, #32]
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b006      	add	sp, #24
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	fffeff8f 	.word	0xfffeff8f
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800
 80026fc:	fffffeff 	.word	0xfffffeff
 8002700:	fffffdff 	.word	0xfffffdff

08002704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	2210      	movs	r2, #16
 8002714:	4393      	bics	r3, r2
 8002716:	001a      	movs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a2c      	ldr	r2, [pc, #176]	; (80027e4 <TIM_OC2_SetConfig+0xe0>)
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a2b      	ldr	r2, [pc, #172]	; (80027e8 <TIM_OC2_SetConfig+0xe4>)
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2220      	movs	r2, #32
 800274e:	4393      	bics	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a22      	ldr	r2, [pc, #136]	; (80027ec <TIM_OC2_SetConfig+0xe8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10d      	bne.n	8002782 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2280      	movs	r2, #128	; 0x80
 800276a:	4393      	bics	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	4393      	bics	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <TIM_OC2_SetConfig+0xe8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <TIM_OC2_SetConfig+0x96>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <TIM_OC2_SetConfig+0xec>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <TIM_OC2_SetConfig+0x96>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <TIM_OC2_SetConfig+0xf0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d113      	bne.n	80027c2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <TIM_OC2_SetConfig+0xf4>)
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4a15      	ldr	r2, [pc, #84]	; (80027fc <TIM_OC2_SetConfig+0xf8>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	621a      	str	r2, [r3, #32]
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b006      	add	sp, #24
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	feff8fff 	.word	0xfeff8fff
 80027e8:	fffffcff 	.word	0xfffffcff
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40014400 	.word	0x40014400
 80027f4:	40014800 	.word	0x40014800
 80027f8:	fffffbff 	.word	0xfffffbff
 80027fc:	fffff7ff 	.word	0xfffff7ff

08002800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a33      	ldr	r2, [pc, #204]	; (80028dc <TIM_OC3_SetConfig+0xdc>)
 8002810:	401a      	ands	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <TIM_OC3_SetConfig+0xe0>)
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2203      	movs	r2, #3
 8002834:	4393      	bics	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <TIM_OC3_SetConfig+0xe4>)
 8002846:	4013      	ands	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <TIM_OC3_SetConfig+0xe8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10d      	bne.n	800287a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	4a22      	ldr	r2, [pc, #136]	; (80028ec <TIM_OC3_SetConfig+0xec>)
 8002862:	4013      	ands	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <TIM_OC3_SetConfig+0xf0>)
 8002876:	4013      	ands	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <TIM_OC3_SetConfig+0xe8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <TIM_OC3_SetConfig+0x92>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <TIM_OC3_SetConfig+0xf4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <TIM_OC3_SetConfig+0x92>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <TIM_OC3_SetConfig+0xf8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d113      	bne.n	80028ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <TIM_OC3_SetConfig+0xfc>)
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4a18      	ldr	r2, [pc, #96]	; (8002900 <TIM_OC3_SetConfig+0x100>)
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	621a      	str	r2, [r3, #32]
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b006      	add	sp, #24
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	fffffeff 	.word	0xfffffeff
 80028e0:	fffeff8f 	.word	0xfffeff8f
 80028e4:	fffffdff 	.word	0xfffffdff
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	fffff7ff 	.word	0xfffff7ff
 80028f0:	fffffbff 	.word	0xfffffbff
 80028f4:	40014400 	.word	0x40014400
 80028f8:	40014800 	.word	0x40014800
 80028fc:	ffffefff 	.word	0xffffefff
 8002900:	ffffdfff 	.word	0xffffdfff

08002904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a26      	ldr	r2, [pc, #152]	; (80029ac <TIM_OC4_SetConfig+0xa8>)
 8002914:	401a      	ands	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a20      	ldr	r2, [pc, #128]	; (80029b0 <TIM_OC4_SetConfig+0xac>)
 8002930:	4013      	ands	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <TIM_OC4_SetConfig+0xb0>)
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <TIM_OC4_SetConfig+0xb4>)
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	031b      	lsls	r3, r3, #12
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <TIM_OC4_SetConfig+0xb8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <TIM_OC4_SetConfig+0x70>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <TIM_OC4_SetConfig+0xbc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_OC4_SetConfig+0x70>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <TIM_OC4_SetConfig+0xc0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d109      	bne.n	8002988 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <TIM_OC4_SetConfig+0xc4>)
 8002978:	4013      	ands	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b006      	add	sp, #24
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	ffffefff 	.word	0xffffefff
 80029b0:	feff8fff 	.word	0xfeff8fff
 80029b4:	fffffcff 	.word	0xfffffcff
 80029b8:	ffffdfff 	.word	0xffffdfff
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800
 80029c8:	ffffbfff 	.word	0xffffbfff

080029cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <TIM_OC5_SetConfig+0x9c>)
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <TIM_OC5_SetConfig+0xa0>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <TIM_OC5_SetConfig+0xa4>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <TIM_OC5_SetConfig+0xa8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <TIM_OC5_SetConfig+0x66>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <TIM_OC5_SetConfig+0xac>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d003      	beq.n	8002a32 <TIM_OC5_SetConfig+0x66>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <TIM_OC5_SetConfig+0xb0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d109      	bne.n	8002a46 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <TIM_OC5_SetConfig+0x9c>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	621a      	str	r2, [r3, #32]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b006      	add	sp, #24
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	fffeffff 	.word	0xfffeffff
 8002a6c:	fffeff8f 	.word	0xfffeff8f
 8002a70:	fffdffff 	.word	0xfffdffff
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40014400 	.word	0x40014400
 8002a7c:	40014800 	.word	0x40014800

08002a80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <TIM_OC6_SetConfig+0xa0>)
 8002a90:	401a      	ands	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <TIM_OC6_SetConfig+0xa4>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <TIM_OC6_SetConfig+0xa8>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	051b      	lsls	r3, r3, #20
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <TIM_OC6_SetConfig+0xac>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <TIM_OC6_SetConfig+0x68>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <TIM_OC6_SetConfig+0xb0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <TIM_OC6_SetConfig+0x68>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <TIM_OC6_SetConfig+0xb4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d109      	bne.n	8002afc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <TIM_OC6_SetConfig+0xb8>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b006      	add	sp, #24
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	ffefffff 	.word	0xffefffff
 8002b24:	feff8fff 	.word	0xfeff8fff
 8002b28:	ffdfffff 	.word	0xffdfffff
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40014400 	.word	0x40014400
 8002b34:	40014800 	.word	0x40014800
 8002b38:	fffbffff 	.word	0xfffbffff

08002b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	221f      	movs	r2, #31
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2201      	movs	r2, #1
 8002b50:	409a      	lsls	r2, r3
 8002b52:	0013      	movs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	43d2      	mvns	r2, r2
 8002b5e:	401a      	ands	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	211f      	movs	r1, #31
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4099      	lsls	r1, r3
 8002b72:	000b      	movs	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b006      	add	sp, #24
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223c      	movs	r2, #60	; 0x3c
 8002b92:	5c9b      	ldrb	r3, [r3, r2]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e050      	b.n	8002c3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	223c      	movs	r2, #60	; 0x3c
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	223d      	movs	r2, #61	; 0x3d
 8002ba8:	2102      	movs	r1, #2
 8002baa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2270      	movs	r2, #112	; 0x70
 8002bdc:	4393      	bics	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00a      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	05db      	lsls	r3, r3, #23
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d004      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10c      	bne.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	4393      	bics	r3, r2
 8002c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	223d      	movs	r2, #61	; 0x3d
 8002c30:	2101      	movs	r1, #1
 8002c32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	223c      	movs	r2, #60	; 0x3c
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	ff0fffff 	.word	0xff0fffff
 8002c50:	40000400 	.word	0x40000400

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	2600      	movs	r6, #0
 8002c58:	4d0c      	ldr	r5, [pc, #48]	; (8002c8c <__libc_init_array+0x38>)
 8002c5a:	4c0d      	ldr	r4, [pc, #52]	; (8002c90 <__libc_init_array+0x3c>)
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	2600      	movs	r6, #0
 8002c66:	f000 f82b 	bl	8002cc0 <_init>
 8002c6a:	4d0a      	ldr	r5, [pc, #40]	; (8002c94 <__libc_init_array+0x40>)
 8002c6c:	4c0a      	ldr	r4, [pc, #40]	; (8002c98 <__libc_init_array+0x44>)
 8002c6e:	1b64      	subs	r4, r4, r5
 8002c70:	10a4      	asrs	r4, r4, #2
 8002c72:	42a6      	cmp	r6, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	00b3      	lsls	r3, r6, #2
 8002c7a:	58eb      	ldr	r3, [r5, r3]
 8002c7c:	4798      	blx	r3
 8002c7e:	3601      	adds	r6, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	00b3      	lsls	r3, r6, #2
 8002c84:	58eb      	ldr	r3, [r5, r3]
 8002c86:	4798      	blx	r3
 8002c88:	3601      	adds	r6, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08002d6c 	.word	0x08002d6c
 8002c90:	08002d6c 	.word	0x08002d6c
 8002c94:	08002d6c 	.word	0x08002d6c
 8002c98:	08002d70 	.word	0x08002d70

08002c9c <memcpy>:
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d100      	bne.n	8002ca6 <memcpy+0xa>
 8002ca4:	bd10      	pop	{r4, pc}
 8002ca6:	5ccc      	ldrb	r4, [r1, r3]
 8002ca8:	54c4      	strb	r4, [r0, r3]
 8002caa:	3301      	adds	r3, #1
 8002cac:	e7f8      	b.n	8002ca0 <memcpy+0x4>

08002cae <memset>:
 8002cae:	0003      	movs	r3, r0
 8002cb0:	1882      	adds	r2, r0, r2
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d100      	bne.n	8002cb8 <memset+0xa>
 8002cb6:	4770      	bx	lr
 8002cb8:	7019      	strb	r1, [r3, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	e7f9      	b.n	8002cb2 <memset+0x4>
	...

08002cc0 <_init>:
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc6:	bc08      	pop	{r3}
 8002cc8:	469e      	mov	lr, r3
 8002cca:	4770      	bx	lr

08002ccc <_fini>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr
